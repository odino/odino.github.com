<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title><![CDATA[Alessandro Nadalin]]></title>
	<link href="https://odino.org/atom.xml" rel="self"/>
	<link href="https://odino.org/"/>
	<updated>2022-05-07T15:04:41+00:00</updated>
	<id>https://odino.org/</id>
	<author>
		<name><![CDATA[Alessandro Nadalin]]></name>
		
	</author>
	<generator uri="http://octopress.org/">Octopress</generator>
	
	<entry>
		
			<title type="html"><![CDATA[MySQL features I can’t wait for them to happen]]></title>
		
		<link href="https://odino.org/mysql-features-i-cant-wait-for-them-to-happen/"/>
		<updated>2022-05-07T14:32:00+00:00</updated>
		<id>https://odino.org/mysql-features-i-cant-wait-for-them-to-happen</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>Having worked with MySQL for over ten years, and having had the chance to
see other storage engines at work during my career, I&rsquo;ve developed a list of
features that I&rsquo;d like to see MySQL implement. The inspiration of this post comes
from the implementation of <a href="https://www.percona.com/blog/2020/08/03/using-skip-lock-for-queue-processing-in-mysql/">SKIP LOCKED</a> in v8 &mdash; which was one of the items in my
bucket list :)</p>

<!-- more -->


<h2>TTL</h2>

<p>I recently bumped into <a href="https://cloud.google.com/spanner/docs/ttl">Google Cloud Spanner&rsquo;s TTL feature</a>, which I love:
you can specify a policy to delete &ldquo;old&rdquo; rows from a table you don&rsquo;t care
about anymore.</p>

<p>The <a href="https://cloud.google.com/spanner/docs/ttl/working-with-ttl#syntax">doc</a> is pretty self-explanatory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">MyTable</span><span class="p">(</span>
</span><span class='line'>  <span class="k">Key</span> <span class="n">INT64</span><span class="p">,</span>
</span><span class='line'>  <span class="n">CreatedAt</span> <span class="k">TIMESTAMP</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="k">Key</span><span class="p">)</span>
</span><span class='line'><span class="p">,</span> <span class="k">ROW</span> <span class="n">DELETION</span> <span class="n">POLICY</span> <span class="p">(</span><span class="n">OLDER_THAN</span><span class="p">(</span><span class="n">CreatedAt</span><span class="p">,</span> <span class="nb">INTERVAL</span> <span class="mi">30</span> <span class="k">DAY</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Over the course of my career I&rsquo;ve had to setup a whole bunch of
jobs that would, at intervals, have to go and delete rows from a
table, and would be an enthusiastic user of this feature!</p>

<h2>Record archival</h2>

<p>Similar to the above, archival of records would be pretty neat.</p>

<p>I haven&rsquo;t bumped into this problem just yet (or when I did, I simply
opted for getting rid of those old rows), but being able to support
record archival would be fun, for example by specifying a dynamic
set of tables records would end up in after a certain time:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">rider_location</span> <span class="p">(</span>
</span><span class='line'>    <span class="n">id_rider</span> <span class="nb">INT</span> <span class="p">...,</span>
</span><span class='line'>    <span class="n">created_at</span> <span class="k">TIMESTAMP</span> <span class="p">...</span>
</span><span class='line'><span class="p">)</span> <span class="p">...</span>
</span><span class='line'><span class="n">ARCHIVE</span> <span class="p">(</span><span class="n">OLDER_THAN</span><span class="p">(</span><span class="n">created_at</span><span class="p">),</span> <span class="nb">INTERVAL</span> <span class="mi">1</span> <span class="k">MONTH</span><span class="p">)</span>
</span><span class='line'><span class="k">IN</span> <span class="n">rider_location_</span><span class="o">%</span><span class="n">yyyy_</span><span class="o">%</span><span class="n">mm</span>
</span></code></pre></td></tr></table></div></figure>


<p>and then you would need to go and query <code>rider_location_2022_01</code>
to get records that were initially inserted in January.</p>

<h2>Implicit GROUPing</h2>

<p>This is easily one of my biggest frustrations &mdash; having such a verbose
implementation of <code>GROUP BY</code> without being able to infer grouping columns
implicitly.</p>

<p>I&rsquo;m talking about having to write:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">city</span><span class="p">,</span> <span class="n">district</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">gender</span><span class="p">,</span> <span class="k">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">users</span>
</span><span class='line'><span class="k">GROUP</span> <span class="k">BY</span> <span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure>


<p>instead of:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">city</span><span class="p">,</span> <span class="n">district</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">gender</span><span class="p">,</span> <span class="k">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">users</span>
</span></code></pre></td></tr></table></div></figure>


<p>having the engine implicitly use selected columns that aren&rsquo;t aggregated
with functions such as <code>MIN</code>, <code>count(...)</code> or <code>AVG</code> by default.</p>

<p><a href="https://dzone.com/articles/how-sql-group-should-have-been">Folks at DZONE have summed it up pretty well</a>,
so I&rsquo;ll let you go through their article and see what kind of solution
they&rsquo;ve proposed.</p>

<h2>Table and DB aliases</h2>

<p>Countless of times I&rsquo;ve made mistakes naming tables and DBs
(<a href="https://martinfowler.com/bliki/TwoHardThings.html">it&rsquo;s one of the hard things at the end of the day!</a>)
and I would love to be able to specify DB and table name aliases
without having to think about renaming / migrating them
altogether &mdash; table names are more manageable, so that&rsquo;s
probably something I don&rsquo;t really need (though it would still
be helpful to migrate tables used by different sets of apps eg.
writer and reader apps), but DB aliasing would make me fairly happy :)</p>

<h2>Want more?</h2>

<p>I&rsquo;m sure I&rsquo;m forgetting some big ticket item, but these above would
already make the ergonomics of working with MySQL a lot smoother for me.</p>

<p>What would <em>you</em> like to see in MySQL instead? Feel free to
reach out on <a href="https://twitter.com/_odino_">twitter</a>!</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Dell XPS 13 9310: USB-C port not recognizing external devices]]></title>
		
		<link href="https://odino.org/dell-xps-13-9310-usb-c-port-not-recognizing-external-devices/"/>
		<updated>2021-07-25T08:32:00+00:00</updated>
		<id>https://odino.org/dell-xps-13-9310-usb-c-port-not-recognizing-external-devices</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>Just a quick one as I got back from my holidays and got taken aback
by a glitch in my XPS.</p>

<p>My right USB-C port stopped recognizing external devices yesterday:
it would be able to charge my laptop through the regular charger but
I couldn&rsquo;t get it to recognize or charge neither my airpods or phone.</p>

<p>After digging a little bit around the Dell support forums I found
someone having luck by just restarting the laptop (though letting it rest
for a while).</p>

<p>So that&rsquo;s exactly what I did &mdash; turned off the laptop, let it rest
for a few hours (actually, overnight) and then turn it back on again&hellip;
&hellip;and the problem was gone. Worth to notice that I also tried shutting
it down for 1/2m and didn&rsquo;t work out.</p>

<p>I do believe this is a firmware issue, and I noticed it kicked in
by booting the laptop with a device connected to that port. Strange
world!</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Book review: Working Backwards]]></title>
		
		<link href="https://odino.org/book-review-working-backwards/"/>
		<updated>2021-07-24T07:42:00+00:00</updated>
		<id>https://odino.org/book-review-working-backwards</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p><img class="right" src="https://odino.org/images/working-backwards.jpg"></p>

<p>I just got back from a week-long restorative holiday, where I found some
time to go back digging into my Kindle library.</p>

<p>Based on <a href="https://www.linkedin.com/in/farazkhalid">Faraz</a>&rsquo;s suggestion,
this time I picked up <a href="https://www.amazon.com/Working-Backwards-Insights-Stories-Secrets/dp/1250267595">Working Backwards</a>,
a book that revolves around Amazon&rsquo;s culture, its unique approach to solving organizational
challenges and its pragmatic (albeit innovative) approaches to product development.</p>

<p>Little did I know this would be a great read, even though the style of the book
is definitely unconventional.</p>

<!-- more -->


<p>The book is really strange, in the sense that there doesn&rsquo;t really seem to be
an agenda and is instead a bunch of chapters about what the authors think
created great competitive advantage for Amazon, loosely tied together. To be
honest, when you have to handpick a bunch of winning strategies for a company,
it&rsquo;s probably hard to write a unidirectional story and instead should focus on
a bunch of anectodes (or mini-stories), which is what the authors do here, and
do extremely well.</p>

<p>It was incredibly insightful &mdash; for me, working at a high-growth, large-scale
company in a similar space, it provided a lot of key information about
problems we face while going through the same exact journey (even though
amazon&rsquo;s problems are at planet-scale, while <a href="https://www.noon.com">we</a> mostly limit to our region).</p>

<p>I really enjoyed reading about the single-threaded leadership model (re-inforced my thoughts), as well as
the journey from a XML product feed to AWS (it&rsquo;s brief, so don&rsquo;t expect a lot
around AWS in this book). I also liked the practical examples around 6-pagers
as well as PR/FAQ documents: while I do believe too much narrative can slow
things down, I also recognize how important is to think things through, and the
fact that too many times I hit the ground running without a coherent and cohesive
plan. Another key takeway for me is focusing on input, as opposed to output,
metrics.</p>

<p>One anectode that got me cracking is the first in-person feedback session on the earlier
amazon APIs (aka XML product feeds), where someone who would then go on to have
a brilliant career at AWS showed up:</p>

<blockquote><p>Since we did not have much experience creating programs for software developers, we sought in-person feedback from heavy users of the service. We decided to host an Amazon software developer conference in our Seattle headquarters. The first one attracted a grand total of eight people. We flew two of them in from Europe. I discovered, just a week before the conference, that one of the European attendees was a teenager. I had to check with our legal department if that was okay—fortunately we didn’t need permission from his parents, and he was able to join us at the conference. We worked out the logistics and set up a full day of sessions. Tim O’Reilly and Rael Dornfest from the O’Reilly Media, who were both avid supporters of the web services movement and taught us a lot about this new field, were there too. Another attendee was an avid customer who happened to live in Seattle. His name was Jeff Barr. He commented: The attendees were outnumbered by the Amazon employees. We sat and listened as the speakers talked about their plans to build on their success and to expand their web service offering over time. One speaker (it may have been Colin Bryar but I am not sure) looked to the future and said that they would be looking around the company for other services to expose in the future. This was the proverbial light-bulb moment for me! It was obvious that they were thinking about developers, platforms, and APIs and I wanted to be a part of it. Jeff Barr joined Amazon a few weeks later and is still with the company, serving as VP and chief evangelist for AWS.</p></blockquote>


<p>Some other interesting quotes from the book:</p>

<blockquote><p>bias for separable teams run by leaders with a singular focus that optimizes for speed of delivery and innovation</p></blockquote>


<blockquote><p>When I write about what led to Jeff making key decisions in this book, I can do so because I often directly asked him for his specific thinking behind his insights, as the reasoning behind them was often more illuminating than the insights themselves.</p></blockquote>


<blockquote><p>Before we start building, we write a Press Release to clearly define how the new idea or product will benefit customers, and we create a list of Frequently Asked Questions to resolve the tough issues up front. We carefully and critically study and modify each of these documents until we’re satisfied before we move on to the next step.</p></blockquote>


<blockquote><p>The meeting begins with everyone reading all the interview feedback. Afterward, the Bar Raiser may kick off the meeting by asking the group, “Now that everyone has had a chance to read all the feedback, would anyone like to change their vote?”</p></blockquote>


<blockquote><p>At many companies, the hiring manager has the recruiter make the offer. This is another mistake. The hiring manager should personally make the offer and sell him/her on the role and company. You may have chosen the candidate, but that doesn’t mean the candidate has chosen you. You must assume that good employees are being actively pursued by other companies, including their current employer. There is always the risk that you could lose the candidate. Nothing is certain until the day they report to the office.</p></blockquote>


<blockquote><p>employees should be able to say to themselves, “I’m glad I joined when I did. If I interviewed for a job today, I’m not sure I’d be hired!”</p></blockquote>


<blockquote><p>The best way to fail at inventing something is by making it somebody’s part-time job.</p></blockquote>


<blockquote><p>During this phase, we became aware of another, less positive trend: our explosive growth was slowing down our pace of innovation. We were spending more time coordinating and less time building. More features meant more software, written and supported by more software engineers, so both the code base and the technical staff grew continuously. Software engineers were once free to modify any section of the entire code base to independently develop, test, and immediately deploy any new features to the website. But as the number of software engineers grew, their work overlapped and intertwined until it was often difficult for teams to complete their work independently.</p></blockquote>


<blockquote><p>At last we realized that all this cross-team communication didn’t really need refinement at all—it needed elimination. Where was it written in stone that every project had to involve so many separate entities? It wasn’t just that we had had the wrong solution in mind; rather, we’d been trying to solve the wrong problem altogether. We didn’t yet have the new solution, but we finally grasped the true identity of our problem: the ever-expanding cost of coordination among teams. This change in our thinking was of course nudged along by Jeff. In my tenure at Amazon I heard him say many times that if we wanted Amazon to be a place where builders can build, we needed to eliminate communication, not encourage it.</p></blockquote>


<blockquote><p>The leader must have deep technical expertise, know how to hire world-class software engineers and product managers, and possess excellent business judgment.</p></blockquote>


<blockquote><p>While each two-pizza team crafted its own product vision and development roadmap, unavoidable dependencies could arise in the form of cross-functional projects or top-down initiatives that spanned multiple teams. For example, a two-pizza team working on picking algorithms for the fulfillment centers might also be called upon to add support for robotics being implemented to move products around the warehouse. We found it helpful to think of such cross-functional projects as a kind of tax, a payment one team had to make in support of the overall forward progress of the company. We tried to minimize such intrusions but could not avoid them altogether. Some teams, through no fault of their own, found themselves in a higher tax bracket than others. The Order Pipeline and Payments teams, for example, had to be involved in almost every new initiative, even though it wasn’t in their original charters.</p></blockquote>


<blockquote><p>The original idea was to create a large number of small teams, each under a solid, multidisciplined, frontline manager and arranged collectively into a traditional, hierarchical org chart. The manager would be comfortable mentoring and diving deep in areas ranging from technical challenges to financial modeling and business performance. Although we did identify a few such brilliant managers, they turned out to be notoriously difficult to find in sufficient numbers, even at Amazon. This greatly limited the number of two-pizza teams we could effectively deploy, unless we relaxed the constraint of forcing teams to have direct-line reporting to such rare leaders. We found instead that two-pizza teams could also operate successfully in a matrix organization model, where each team member would have a solid-line reporting relationship to a functional manager who matched their job description—for example, director of software development or director of product management—and a dotted-line reporting relationship to their two-pizza manager. This meant that individual two-pizza team managers could lead successfully even without expertise in every single discipline required on their team. This functional matrix ultimately became the most common structure, though each two-pizza team still devised its own strategies for choosing and prioritizing its projects.</p></blockquote>


<blockquote><p>Jeff has an uncanny ability to read a narrative and consistently arrive at insights that no one else did, even though we were all reading the same narrative. After one meeting, I asked him how he was able to do that. He responded with a simple and useful tip that I have not forgotten: he assumes each sentence he reads is wrong until he can prove otherwise. He’s challenging the content of the sentence, not the motive of the writer. Jeff, by the way, was usually among the last to finish reading.</p></blockquote>


<blockquote><p>Leadership and management are often about deciding what not to do rather than what to do. Bringing clarity to why you aren’t doing something is often as important as having clarity about what you are doing.</p></blockquote>


<blockquote><p>Input metrics measure things that, done right, bring about the desired results in your output metrics.</p></blockquote>


<blockquote><p>We soon saw that an increase in the number of detail pages, while seeming to improve selection, did not produce a rise in sales, the output metric. Analysis showed that the teams, while chasing an increase in the number of items, had sometimes purchased products that were not in high demand. This activity did cause a bump in a different output metric—the cost of holding inventory—and the low-demand items took up valuable space in fulfillment centers that should have been reserved for items that were in high demand. When we realized that the teams had chosen the wrong input metric—which was revealed via the WBR process—we changed the metric to reflect consumer demand instead. Over multiple WBR meetings, we asked ourselves, “If we work to change this selection metric, as currently defined, will it result in the desired output?” As we gathered more data and observed the business, this particular selection metric evolved over time from number of detail pages, which we refined to number of detail page views (you don’t get credit for a new detail page if customers don’t view it), which then became the percentage of detail page views where the products were in stock (you don’t get credit if you add items but can’t keep them in stock), which was ultimately finalized as the percentage of detail page views where the products were in stock and immediately ready for two-day shipping, which ended up being called Fast Track In Stock.</p></blockquote>


<blockquote><p>Charlie Bell, an SVP in AWS and a great operational guru at Amazon, put it aptly when he said, “When you encounter a problem, the probability you’re actually looking at the actual root cause of the problem in the initial 24 hours is pretty close to zero, because it turns out that behind every issue there’s a very interesting story.”</p></blockquote>


<blockquote><p>The deck is usually owned by someone in finance. Or more accurately, the data in the deck are certified as accurate by finance.</p></blockquote>


<blockquote><p>People like talking about their area, especially when they’re delivering as expected, and even more so when they exceed expectations, but WBR time is precious. If things are operating normally, say “Nothing to see here” and move along. The goal of the meeting is to discuss exceptions and what is being done about them. The status quo needs no elaboration.</p></blockquote>


<blockquote><p>He said, “Amazon has a decent chance of being the last place to buy CDs. The business will be high-margin but small. You’ll be able to charge a premium for CDs, since they’ll be hard to find.” Jeff did not take the bait. We were their guests and the rest of the meeting was uneventful. But we all knew that being the exclusive seller of antique CDs did not sound like an appealing business model. While it is tempting to suggest the meeting impacted Jeff’s thinking, only Jeff can speak to that. What we can say is what Jeff did and did not do afterward. What he didn’t do (and what many companies would have done) is to kick off an all-hands-on-deck project to combat this competitive threat, issue a press release claiming how Amazon’s new service would win the day, and race to build a copycat digital music service. Instead, Jeff took time to process what he learned from the meeting and formed a plan. A few months later, he appointed a single-threaded leader—Steve Kessel—to run Digital, who would report directly to him so that they could work together to formulate a vision and a plan for digital media. In other words, his first action was not a “what” decision, it was a “who” and “how” decision.</p></blockquote>


<blockquote><p>We applied the new two-pizza structure to every part of the org chart below Steve and his direct reports. The two-pizza structure became more complicated at the top of the org chart. For example, should product, engineering, and business functions all report to a single leader? Or should each one be run by its own leader, with those leaders in turn working as a team on the product, engineering, and business details? We decided that there would be separate leaders for business and tech for each digital product category—books, music, and video. Each of these category leaders would hire leaders for each business function, such as product management, marketing/merchandising, and vendor/content management (licensing digital content from publishers, studios, and record companies). Each general manager (GM) category leader had a corresponding peer leader on the engineering side. Each engineering category had a two-pizza team for each major component of the software services (e.g., content ingestion and transformation) and for client application software. This was mostly a pragmatic decision based on the skills of the leaders. For example, I had no experience at that time managing an engineering organization. The same was true of my peers on the engineering side with respect to business. This would change in the years to come.</p></blockquote>


<blockquote><p>Customer expectations are not static. They rise over time, which means you cannot rest on your laurels.</p></blockquote>


<blockquote><p>Jeff would say something like this to a leader who had just laid an egg: “Why would I fire you now? I just made a million-dollar investment in you. Now you have an obligation to make that investment pay off. Figure out and clearly document where you went wrong. Share what you have learned with other leaders throughout the company. Be sure you don’t make the same mistake again, and help others avoid making it the first time.”</p></blockquote>


<p>Definitely recommended: there are some overlooked problems embedded in amazon&rsquo;s ruthless
culture, but this book does a great job at explaining some of the things that worked
really well.</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[fwupd is the best thing that ever happened to Linux]]></title>
		
		<link href="https://odino.org/fwupd-is-the-best-thing-that-ever-happened-to-linux/"/>
		<updated>2021-04-15T10:41:00+00:00</updated>
		<id>https://odino.org/fwupd-is-the-best-thing-that-ever-happened-to-linux</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>Honestly, I have no words:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> fwupd.fwupdmgr refresh
</span><span class='line'><span class="go">WARNING: This package has not been validated, it may not work properly.</span>
</span><span class='line'><span class="go">Updating lvfs</span>
</span><span class='line'><span class="go">Downloading…             [***************************************]</span>
</span><span class='line'><span class="go">Downloading…             [***************************************]</span>
</span><span class='line'><span class="go">Successfully downloaded new metadata: 1 local device supported</span>
</span><span class='line'>
</span><span class='line'><span class="gp">$</span> fwupd.fwupdmgr get-updates
</span><span class='line'><span class="go">WARNING: This package has not been validated, it may not work properly.</span>
</span><span class='line'><span class="go">Devices with no available firmware updates: </span>
</span><span class='line'><span class="go"> • Integrated Webcam HD</span>
</span><span class='line'><span class="go"> • KBG40ZPZ1T02 NVMe KIOXIA 1024GB</span>
</span><span class='line'><span class="go"> • UEFI Device Firmware</span>
</span><span class='line'><span class="go"> • UEFI Device Firmware</span>
</span><span class='line'><span class="go"> • UEFI dbx</span>
</span><span class='line'><span class="go">XPS 13 9310 2-in-1</span>
</span><span class='line'><span class="go">│</span>
</span><span class='line'><span class="go">└─System Firmware:</span>
</span><span class='line'><span class="go">  │   Device ID:          [XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX]</span>
</span><span class='line'><span class="go">  │   Current version:    1.1.1</span>
</span><span class='line'><span class="go">  │   Minimum Version:    1.1.1</span>
</span><span class='line'><span class="go">  │   Vendor:             Dell Inc. (DMI:Dell Inc.)</span>
</span><span class='line'><span class="go">  │   GUIDs:              [XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX]</span>
</span><span class='line'><span class="go">  │                       [XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX]</span>
</span><span class='line'><span class="go">  │                       [XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX]</span>
</span><span class='line'><span class="go">  │   Device Flags:       • Internal device</span>
</span><span class='line'><span class="go">  │                       • Updatable</span>
</span><span class='line'><span class="go">  │                       • System requires external power source</span>
</span><span class='line'><span class="go">  │                       • Supported on remote server</span>
</span><span class='line'><span class="go">  │                       • Needs a reboot after installation</span>
</span><span class='line'><span class="go">  │                       • Cryptographic hash verification is available</span>
</span><span class='line'><span class="go">  │                       • Device is usable for the duration of the update</span>
</span><span class='line'><span class="go">  │ </span>
</span><span class='line'><span class="go">  └─XPS 13 9310 2-in-1 System Update:</span>
</span><span class='line'><span class="go">        New version:      2.2.1</span>
</span><span class='line'><span class="go">        Remote ID:        lvfs</span>
</span><span class='line'><span class="go">        Summary:          Firmware for the Dell XPS 13 9310 2-in-1</span>
</span><span class='line'><span class="go">        License:          Proprietary</span>
</span><span class='line'><span class="go">        Size:             26.7 MB</span>
</span><span class='line'><span class="go">        Created:          2021-03-25</span>
</span><span class='line'><span class="go">        Urgency:          Critical</span>
</span><span class='line'><span class="go">        Vendor:           Dell Inc.</span>
</span><span class='line'><span class="go">        Flags:            is-upgrade</span>
</span><span class='line'><span class="go">        Description:      </span>
</span><span class='line'><span class="go">        This stable release fixes the following issues:</span>
</span><span class='line'><span class="go">        </span>
</span><span class='line'><span class="go">        • Fixed the issue where there is no audio output from the external monitor when you close the lid after restarting the system.</span>
</span><span class='line'><span class="go">        </span>
</span><span class='line'><span class="go">        Some new functionality has also been added:</span>
</span><span class='line'><span class="go">        </span>
</span><span class='line'><span class="go">        • Updated the Intel Management Engine to enhance the Thunderbolt connectivity.</span>
</span><span class='line'><span class="go">        • Updated the Embedded Controller Engine firmware to enhance the battery life.</span>
</span><span class='line'><span class="go">        • Added secondary function key that is Fn+Left as Home and Fn+Right as End.</span>
</span><span class='line'>
</span><span class='line'><span class="gp">$</span> fwupd.fwupdmgr update
</span><span class='line'><span class="go">WARNING: This package has not been validated, it may not work properly.</span>
</span><span class='line'><span class="go">Devices with no available firmware updates: </span>
</span><span class='line'><span class="go"> • Integrated Webcam HD</span>
</span><span class='line'><span class="go"> • KBG40ZPZ1T02 NVMe KIOXIA 1024GB</span>
</span><span class='line'><span class="go"> • UEFI Device Firmware</span>
</span><span class='line'><span class="go"> • UEFI Device Firmware</span>
</span><span class='line'><span class="go"> • UEFI dbx</span>
</span><span class='line'><span class="go">Upgrade available for System Firmware from 1.1.1 to 2.2.1</span>
</span><span class='line'><span class="go">XPS 13 9310 2-in-1 must remain plugged into a power source for the duration of the update to avoid damage. Continue with update? [Y|n]: </span>
</span><span class='line'><span class="go">Downloading…             [***************************************] Less than one minute remaining…</span>
</span><span class='line'><span class="go">Decompressing…           [***************************************]</span>
</span><span class='line'><span class="go">Authenticating…          [***************************************]</span>
</span><span class='line'><span class="go">Authenticating…          [***************************************]</span>
</span><span class='line'><span class="go">Updating System Firmware…[***************************************]</span>
</span><span class='line'><span class="go">Scheduling…              [***************************************]</span>
</span><span class='line'><span class="go">Successfully installed firmware</span>
</span><span class='line'>
</span><span class='line'><span class="go">An update requires a reboot to complete. Restart now? [y|N]: </span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="https://odino.org/images/fwupd.png"></p>

<p><img class="center" src="https://odino.org/images/tearjoy.gif"></p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Avoid battery draining on your Linux-flavored Dell XPS]]></title>
		
		<link href="https://odino.org/avoid-battery-draining-on-your-linux-flavored-dell-xps/"/>
		<updated>2021-01-31T14:40:00+00:00</updated>
		<id>https://odino.org/avoid-battery-draining-on-your-linux-flavored-dell-xps</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p><img class="right" src="https://odino.org/images/dell.png"></p>

<p>Over the past few months my 2.5yo Dell XPS 13 has started showing signs of age,
and I had to worry both about my keyboard as well as the battery.</p>

<p>I haven&rsquo;t really managed to replace the keyboard yet (I&rsquo;m too scared of doing
it on my own, so I&rsquo;ll wait to go back to the office and ask the IT folks
to do it for me), though I managed to replace the battery (got it from <a href="https://www.noon.com/uae-en/replacement-battery-for-dell-xps-13-9360-black/N32141819A/p?o=a03e5f5f47c3ba5b">Noon</a>) since my old one was at &lt;40% capacity.</p>

<p>A factor that contributed to the battery&rsquo;s demise was definitely the fact that,
through a recent kernel update, the laptop started shutting down in <a href="https://github.com/torvalds/linux/blob/master/Documentation/admin-guide/pm/sleep-states.rst#suspend-to-idle">s2idle</a>
sleep mode, which is short for &ldquo;no bueno&rdquo; &mdash; it basically means that the system
will use a pure software implementation of energy savings.</p>

<!-- more -->


<p>The fix is generally fairly easy &mdash; you can see what sleep state your
system is going to use by:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cat /sys/power/mem_sleep
</span><span class='line'><span class="o">[</span>s2idle<span class="o">]</span> deep
</span></code></pre></td></tr></table></div></figure>


<p>and a quick and easy fix is to switch to the <a href="https://github.com/torvalds/linux/blob/master/Documentation/admin-guide/pm/sleep-states.rst#suspend-to-ram">deep</a> state:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo bash -c <span class="s2">&quot;echo deep &gt; /sys/power/mem_sleep&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et-voila:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cat /sys/power/mem_sleep
</span><span class='line'>s2idle <span class="o">[</span>deep<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, as usual, this change is not going to be permanent, as we need to
register the kernel parameter either in systemd or grub, depending on what your system is running
on.</p>

<p>Remember: a battery will only last you ~500 charges, so making sure you save as much
energy as possible while the system is resting will allow you to defer a purchase by
months or years.</p>

<p>Adios!</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Combining two numbers into a unique one: pairing functions]]></title>
		
		<link href="https://odino.org/combining-two-numbers-into-a-unique-one-pairing-functions/"/>
		<updated>2020-12-05T10:08:00+00:00</updated>
		<id>https://odino.org/combining-two-numbers-into-a-unique-one-pairing-functions</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>Over the past couple of years I&rsquo;ve grown my interest in image and data compression
&mdash; it&rsquo;s a very interesting field, with a lot of interesting solutions to important
and lucrative problems (think Dropbox).</p>

<p>Over the past few days I was running some experiments and bumped into an interesting
concept: pairing positive integers into a &ldquo;unique&rdquo; number, with the ability to reverse
the operation.</p>

<p>Now, in the context of compression, pairing would only be useful when
the resulting integer can be consistently represented with less bits
than the original ones, and that&rsquo;s where I&rsquo;m still stuck at (more on this on a later post),
but I still wanted to share a couple interesting approaches I&rsquo;ve bumped into.</p>

<!-- more -->


<h2>Cantor pairing</h2>

<p>The folks at <a href="https://www.wolfram.com/">Wolfram</a> ask a very interesting question:</p>

<blockquote><p>We all know that every point on a surface can be described by a pair of coordinates, but can
every point on a surface be described by only one coordinate?</p></blockquote>

<p>And it actually turns out that the german mathematician <a href="https://en.wikipedia.org/wiki/Georg_Cantor">Georg Cantor</a>
had already develop a system to do exactly what we&rsquo;ve been talking about, called
&ldquo;<a href="https://en.wikipedia.org/wiki/Pairing_function#Cantor_pairing_function">cantor pairing</a>&rdquo;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">pair</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">m</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="nx">n</span> <span class="o">+</span> <span class="nx">m</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="nx">n</span> <span class="o">+</span> <span class="nx">m</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="nx">m</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">unpair</span><span class="p">(</span><span class="nx">z</span> <span class="kt">int</span><span class="p">)</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">w</span> <span class="o">:=</span> <span class="nb">int</span><span class="p">(</span><span class="nx">math</span><span class="p">.</span><span class="nx">Floor</span><span class="p">((</span><span class="nx">math</span><span class="p">.</span><span class="nx">Sqrt</span><span class="p">(</span><span class="nb">float64</span><span class="p">(</span><span class="mi">8</span> <span class="o">*</span> <span class="nx">z</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'>  <span class="nx">t</span> <span class="o">:=</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span> <span class="nx">w</span> <span class="o">+</span> <span class="nx">w</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'>  <span class="nx">m</span> <span class="o">:=</span> <span class="nx">z</span> <span class="o">-</span> <span class="nx">t</span>
</span><span class='line'>  <span class="nx">n</span> <span class="o">:=</span> <span class="nx">w</span> <span class="o">-</span> <span class="nx">m</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">n</span><span class="p">,</span> <span class="nx">m</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://gist.github.com/dyoo/8062270">(code gently found on a random <em>gist</em>)</a></p>

<p>If you don&rsquo;t believe me, you can take a peek at this <a href="https://play.golang.org/p/wmvDNC2zEIx">runnable snippet that
illustrates cantor pairing in action</a>.</p>

<h2>Elegant pairing</h2>

<p>Now, I eventually bumped into <a href="http://szudzik.com/ElegantPairing.pdf">this presentation from a Wolfram conference</a>
15 years ago, and found another approach, which they call &ldquo;elegant pairing&rdquo;,
which seems to be a lot more straightforward, at least in terms of the algorithm&rsquo;s
readability:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">pair</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">m</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">n</span> <span class="o">&gt;=</span> <span class="nx">m</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">n</span> <span class="o">*</span> <span class="nx">n</span> <span class="o">+</span> <span class="nx">n</span> <span class="o">+</span> <span class="nx">m</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">m</span> <span class="o">*</span> <span class="nx">m</span> <span class="o">+</span> <span class="nx">n</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">unpair</span><span class="p">(</span><span class="nx">z</span> <span class="kt">int</span><span class="p">)</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">q</span> <span class="o">:=</span> <span class="nb">int</span><span class="p">(</span><span class="nx">math</span><span class="p">.</span><span class="nx">Floor</span><span class="p">(</span><span class="nx">math</span><span class="p">.</span><span class="nx">Sqrt</span><span class="p">(</span><span class="nb">float64</span><span class="p">(</span><span class="nx">z</span><span class="p">))))</span>
</span><span class='line'>    <span class="nx">l</span> <span class="o">:=</span> <span class="nx">z</span> <span class="o">-</span> <span class="nx">q</span> <span class="o">*</span> <span class="nx">q</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nx">l</span> <span class="p">&lt;</span> <span class="nx">q</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">l</span><span class="p">,</span> <span class="nx">q</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">q</span><span class="p">,</span> <span class="nx">l</span> <span class="o">-</span> <span class="nx">q</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, we can <a href="https://play.golang.org/p/u3mwn-o613X">take a look at this in action on the Go playground</a>.</p>

<h2>So, what about compression?</h2>

<p>Well, I won&rsquo;t go too deep into the realm of my thoughts so I&rsquo;ll keep this
real simple: compression is all about communicating the same information,
but with less characters. When you say &ldquo;jk&rdquo; you&rsquo;re compressing data (&ldquo;<em>just kidding</em>&rdquo;),
while the other party involved in the communication understands the &ldquo;algorithm&rdquo;
you&rsquo;re using and is able to translate that the 2 characters &ldquo;jk&rdquo; effectively
mean &ldquo;just kidding&rdquo; (more than compression this is just a hashmap, but let me
have it for the day&hellip;).</p>

<p>Images like PNGs are usually just a bunch of pixels put together, with each pixel
represented by R, G, B and A (alpha transparency) values. Each value is represented
by 1 byte, so its maximum value can be <a href="https://www.quora.com/What-is-the-highest-number-you-can-get-to-using-1-byte">255 at most</a>.</p>

<p>Think of an image as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">[</span>
</span><span class='line'>    <span class="nx">Pixel</span><span class="p">(</span><span class="mi">41</span><span class="p">,</span> <span class="mi">130</span><span class="p">,</span> <span class="mi">130</span><span class="p">,</span> <span class="mi">255</span><span class="p">),</span> <span class="c1">// &lt;-- Red: 41, Green: 130, Blue: 130, Alpha: 255</span>
</span><span class='line'>    <span class="nx">Pixel</span><span class="p">(</span><span class="mi">41</span><span class="p">,</span> <span class="mi">130</span><span class="p">,</span> <span class="mi">130</span><span class="p">,</span> <span class="mi">255</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">Pixel</span><span class="p">(</span><span class="mi">41</span><span class="p">,</span> <span class="mi">130</span><span class="p">,</span> <span class="mi">130</span><span class="p">,</span> <span class="mi">255</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">Pixel</span><span class="p">(</span><span class="mi">41</span><span class="p">,</span> <span class="mi">130</span><span class="p">,</span> <span class="mi">130</span><span class="p">,</span> <span class="mi">255</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">Pixel</span><span class="p">(</span><span class="mi">41</span><span class="p">,</span> <span class="mi">130</span><span class="p">,</span> <span class="mi">130</span><span class="p">,</span> <span class="mi">255</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">Pixel</span><span class="p">(</span><span class="mi">41</span><span class="p">,</span> <span class="mi">130</span><span class="p">,</span> <span class="mi">130</span><span class="p">,</span> <span class="mi">255</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">Pixel</span><span class="p">(</span><span class="mi">41</span><span class="p">,</span> <span class="mi">130</span><span class="p">,</span> <span class="mi">130</span><span class="p">,</span> <span class="mi">255</span><span class="p">),</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>which can be reduced to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="mi">41</span><span class="p">,</span><span class="mi">130</span><span class="p">,</span><span class="mi">130</span><span class="p">,</span><span class="mi">255</span>
</span><span class='line'><span class="mi">41</span><span class="p">,</span><span class="mi">130</span><span class="p">,</span><span class="mi">130</span><span class="p">,</span><span class="mi">255</span>
</span><span class='line'><span class="mi">41</span><span class="p">,</span><span class="mi">130</span><span class="p">,</span><span class="mi">130</span><span class="p">,</span><span class="mi">255</span>
</span><span class='line'><span class="mi">41</span><span class="p">,</span><span class="mi">130</span><span class="p">,</span><span class="mi">130</span><span class="p">,</span><span class="mi">255</span>
</span><span class='line'><span class="mi">41</span><span class="p">,</span><span class="mi">130</span><span class="p">,</span><span class="mi">130</span><span class="p">,</span><span class="mi">255</span>
</span><span class='line'><span class="mi">41</span><span class="p">,</span><span class="mi">130</span><span class="p">,</span><span class="mi">130</span><span class="p">,</span><span class="mi">255</span>
</span><span class='line'><span class="mi">41</span><span class="p">,</span><span class="mi">130</span><span class="p">,</span><span class="mi">130</span><span class="p">,</span><span class="mi">255</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>What&rsquo;s interesting about pairing functions is that we could use
them to combine numbers together to end up with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="mi">16941</span><span class="p">,</span><span class="mi">65155</span>
</span><span class='line'><span class="mi">16941</span><span class="p">,</span><span class="mi">65155</span>
</span><span class='line'><span class="mi">16941</span><span class="p">,</span><span class="mi">65155</span>
</span><span class='line'><span class="mi">16941</span><span class="p">,</span><span class="mi">65155</span>
</span><span class='line'><span class="mi">16941</span><span class="p">,</span><span class="mi">65155</span>
</span><span class='line'><span class="mi">16941</span><span class="p">,</span><span class="mi">65155</span>
</span><span class='line'><span class="mi">16941</span><span class="p">,</span><span class="mi">65155</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>which is, theoretically, less characters than we started with.</p>

<p>Unfortunately for us, the max value one of our pair can have
(255, 255) is 65535, which takes 2 bytes to store, so even if
we end up with less &ldquo;characters&rdquo;, the number of bytes we need
to use to store them is exactly the same
(4 * 1 byte earlier, 2 * 2 bytes later) &mdash; so <em>no bueno</em>. I&rsquo;ve opened
a can of worms that probably deserves its own post later on,
so I&rsquo;ll keep my oversimplification for now and we&rsquo;ll go on with
our lives :)</p>

<p>Adios!</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Running CI tests in Kubernetes through Github Actions]]></title>
		
		<link href="https://odino.org/running-ci-tests-in-kubernetes-through-github-actions/"/>
		<updated>2020-03-20T09:21:00+00:00</updated>
		<id>https://odino.org/running-ci-tests-in-kubernetes-through-github-actions</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p><img class="right" src="https://odino.org/images/github-actions-kubernetes.png"></p>

<p>Remember me? At the end of last decade I shared a post on <a href="https://odino.org/local-k8s-development-in-2020/">a simple way to run a Kubernetes cluster for local development</a>.</p>

<p>Today I&rsquo;d like to show the other side of the medal &mdash; running your CI
environment on Kubernetes (through <a href="https://github.com/features/actions">Github Actions</a>).</p>

<p>It&rsquo;s simple, mimics your production environment and it&rsquo;s automated &mdash;
let&rsquo;s get to it!</p>

<!-- more -->


<h2>How Github Actions work</h2>

<p>If you&rsquo;ve ever used <a href="https://travis-ci.com/">Travis CI</a> or similar tools
you&rsquo;re already familiar with Actions: they provide you an environment where
you can test your applications &mdash; generally in the form of a server with
your code checked out in a directory. When you push code to your Github
repository, an environment is booted, your code gets checked out and you
can run tasks on the environment &mdash; if any of the tasks fails, your CI
task fail.</p>

<p>This is not just useful for running automated tests &mdash; you could have
builds of your app being compiled in your CI environment and uploaded
to S3 or similar services, or send an email to your QA team to let them
know what tests are passing / failing.</p>

<p>So yes, you can think of Actions as Github booting a server, checking
out your code in there and giving you the option to run any command you
want on it &mdash; the actual implementation might be fairly different, but
this is all the eli5 you need right now.</p>

<h2>Like having a server. What now?</h2>

<p>If your development environment runs on a k8s cluster, or if you&rsquo;re planning
to run your CI environment in k8s, having a machine to play with everytime
you push code to Github is like a <em>manna from heaven</em>: you can simply
setup a k8s cluster in there and watch your application run like it would
on production.</p>

<p>You might be skeptical about installing k8s in your CI environment for
a couple of very valid reasons:</p>

<ul>
<li>installing k8s on a server is not always a straightforward operation</li>
<li>loads of moving parts that need to talk to each other (kubectl, apiserver, etcd, kubelet and so on),
so it could require quite some time to get everything up &amp; running</li>
</ul>


<p>Given that a CI environment should ideally be up in seconds,
the task of booting up a k8s cluster there seems quite daunting.</p>

<p>Luckily, the folks at <a href="https://rancher.com/">Rancher</a> got us covered:
they developed <a href="https://k3s.io/">k3s</a>, a lightweight Kubernetes distribution
geared towards IoT &amp; edge computing &mdash; with the main selling point
being the fact that the cluster is up &amp; running in a few seconds
with a simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>curl -sfL https://get.k3s.io | sh -
</span><span class='line'>
</span><span class='line'><span class="c"># wait ~30s</span>
</span><span class='line'>k3s kubectl get node
</span></code></pre></td></tr></table></div></figure>


<p>With k3s, bringing k8s into our Action is extremely simple &mdash; let&rsquo;s
see it in action!</p>

<h2>The Kubernetes Github Action</h2>

<p>First off, create your action file, eg. <code>test.yml</code> under the folder
<code>.github/workflows</code> in your repo &mdash; then add the following steps
to the workflow:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Example action</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">on</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">push</span><span class="p-Indicator">]</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">jobs</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">build</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">runs-on</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ubuntu-latest</span>
</span><span class='line'>    <span class="l-Scalar-Plain">timeout-minutes</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">5</span>
</span><span class='line'>    <span class="l-Scalar-Plain">steps</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">uses</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">actions/checkout@v2</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">install k8s</span>
</span><span class='line'>      <span class="l-Scalar-Plain">run</span><span class="p-Indicator">:</span> <span class="p-Indicator">|</span>
</span><span class='line'>        <span class="no">curl -sfL https://get.k3s.io | K3S_KUBECONFIG_MODE=777 sh -</span>
</span><span class='line'>        <span class="no">cat /etc/rancher/k3s/k3s.yaml</span>
</span><span class='line'>        <span class="no">mkdir -p ~/.kube</span>
</span><span class='line'>        <span class="no">cp /etc/rancher/k3s/k3s.yaml ~/.kube/config</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">example tests</span>
</span><span class='line'>      <span class="l-Scalar-Plain">run</span><span class="p-Indicator">:</span> <span class="p-Indicator">|</span>
</span><span class='line'>        <span class="no"># Whatever command you want to run</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, all the magic happens here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>curl -sfL https://get.k3s.io | <span class="nv">K3S_KUBECONFIG_MODE</span><span class="o">=</span>777 sh -
</span><span class='line'>cat /etc/rancher/k3s/k3s.yaml
</span><span class='line'>mkdir -p ~/.kube
</span><span class='line'>cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
</span></code></pre></td></tr></table></div></figure>


<p>We download k3s, install it and copy its configuration into
the usual kubeconfig path. This is done so that <code>kubectl</code>
can talk to the cluster, else you have to use the one provided
by k3s under the alias <code>k3s kubectl</code> (meaning you need to run
commands such as <code>k3s kubectl get po</code>).</p>

<p>If you&rsquo;re wondering how does this look like in action,
you should probably head over to the sample repo I
setup at <a href="https://github.com/odino/k8s-github-action">github.com/odino/k8s-github-action</a>:
it&rsquo;s really not that crazy, as it simply contains the above
code. What you might find interesting, though, is having
a look at <a href="https://github.com/odino/k8s-github-action/actions">some of the &ldquo;builds&rdquo; that ran</a>, where you can clarly
see k8s up &amp; running:</p>

<p><img class="center" src="https://odino.org/images/k8s-github-action-example.png"></p>

<p>As usual, <a href="https://github.com/odino/k8s-github-action/pull/1">Actions report their status on PRs</a>, so you get
Github to confirm that everything ran smoothly whenever
you push:</p>

<p><img class="center" src="https://odino.org/images/k8s-github-action-pr.png"></p>

<p>Hope this was helpful &mdash; peace!</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[I've decided to make the WASEC ebook free during these trying times]]></title>
		
		<link href="https://odino.org/ive-decided-to-make-the-wasec-ebook-free-during-these-trying-times/"/>
		<updated>2020-03-20T08:10:00+00:00</updated>
		<id>https://odino.org/ive-decided-to-make-the-wasec-ebook-free-during-these-trying-times</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>Short post for the day to address an hopefully even shorter-lived situation
we&rsquo;re all in.</p>

<!-- more -->


<p>I&rsquo;ve decided to make the WASEC book free, on LeanPub, for the time being.
During these uncertain times, folks might find themselves home from their
jobs or, even worse, having to deal with the loss of their livelihood.</p>

<p>If you, like many others, are facing uncertain times and would want
to spend time learning and educating yourself on the topic of web application
security feel free to <a href="https://leanpub.com/wasec">have one on me</a>.</p>

<h3>Update: 7th June 2020</h3>

<p>The book is now back on sale for $9.99, as anticipated by my
<a href="https://twitter.com/_odino_/status/1264926721050136583">tweet</a>.
In line with my original announcement, I want to provide a path
for those who cannot afford the book, so feel free to
<a href="https://odino.org/wasec-a-book-about-web-application-security-is-now-available-for-sale/#what-if-i-can%E2%80%99t-afford-the-book">get in touch if unable to pay</a>.</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Local k8s development in 2020]]></title>
		
		<link href="https://odino.org/local-k8s-development-in-2020/"/>
		<updated>2019-12-31T15:45:00+00:00</updated>
		<id>https://odino.org/local-k8s-development-in-2020</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p><img class="right" src="https://odino.org/images/kubernetes-logo.png"></p>

<p>This decade&rsquo;s about to wrap up, so I decided to spend some time
describing my development workflow as the year nears its end.</p>

<p>What I find interesting in my setup is that it entertains
working on a local k8s cluster &mdash; mainly to keep in touch
with the systems that run in production.</p>

<p>Running k8s locally isn&rsquo;t what
you&rsquo;d want to do to begin with, but rather a natural path
once you start wanting to replicate the environment that runs
your live applications. Again, you don&rsquo;t need a local k8s
cluster just &lsquo;cause, so make sure you have a good reason
before going through the rest of this article.</p>

<!-- more -->


<h2>Cluster setup</h2>

<p>Once a monstrous task, setting up a local k8s cluster is
now as simple as installing a package on your system:
Docker for Win/Mac allow you to run this very easily, and
Canonical has made it possible on Linux through <a href="https://microk8s.io/">microk8s</a>
(that&rsquo;s my boy!).</p>

<p>One of the funny things about running on microk8s
(or snaps, in general) is how it will automagically
upgrade under your nose &mdash; sometimes with breaking changes.
There was a recent change that <a href="https://github.com/ubuntu/microk8s/issues/382">swapped docker for containerd
as microk8s&#8217; default container runtime</a>, and it broke some
local workflows (more on that later, as it&rsquo;s easy to fix).
In general, you can always force a snap to use a particular
revision, so if anything&rsquo;s funky just downgrade and let others
figure it out :)</p>

<p>I&rsquo;d be keen to try <a href="https://k3s.io/">k3s</a> out, as it seem to provide an even more
lightweight way to run the local cluster. Built mainly for
IoT and edge computing, k3s is interesting as running
microk8s is sometime resource-intesive &mdash; once I&rsquo;m done
working on code, I usually prefer to <code>sudo snap disable microk8s</code>
in order to preserve RAM, CPU and battery life (<a href="https://github.com/odino/dev/commit/20749dd50c590ec376b7eed2db558615f1ef6fda">proof here</a>).</p>

<p>In the past, I&rsquo;ve also tried to work on a remote k8s cluster
in the GKE from my local machine, but that proved to be too
much of a hassle &mdash; the beauty of <code>kubectl</code> is that you don&rsquo;t
really care where the cluster is running, but your IDE and
other tools work best when everything is present and running
locally.</p>

<h2>Development tool</h2>

<p>This has been fairly stable until late this year, when I
decided to switch things around.</p>

<p>I&rsquo;ve historically used helm and a bunch of shell magic
to run apps locally: you would clone a repo and expect
an <code>helm/</code> folder to be available, with the chart being
able to install a whole bunch of k8s resources on your
cluster. Then, a bash script run simply apply the chart
with a bunch of pre-configured values: you would run <code>dev up</code>
and what the script would do would simply be something
along the lines of:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker build -t $CURRENT_FOLDER .
</span><span class='line'>helm install --name $CURRENT_FOLDER ./helm/ --set mountPath=/home/alex/path/to/$CURRENT_FOLDER --set image=$CURRENT_FOLDER
</span><span class='line'>kubectl logs -f deploy/$CURRENT_FOLDER --tail=100</span></code></pre></td></tr></table></div></figure>


<p>Nothing too crazy&hellip;but with a few downsides:</p>

<ul>
<li>I started off with Helm 2, and v3 brought in a few changes I didn&rsquo;t want to go through</li>
<li>helm is perfect if I want to package a generic app made up of multiple resources (service, ingress, etc) and release it to the outside world. Locally, I probably don&rsquo;t need all of that verbosity (<code>chart.yaml</code> and so on)</li>
<li>most of the templating I did on development was <code>{{ .Release.name }}</code>. What&rsquo;s the point then?</li>
</ul>


<p>Towards the end of this year I went back to the drawing board
and started to think what if there was anything else I could
use that was simple enough and gave me enough flexibility.
I knew I could use simple k8s manifests but it wasn&rsquo;t clear
to me how I could integrate it into my workflow in a way
that made it simpler than using a chart &mdash; and that&rsquo;s when I
gave <a href="https://skaffold.dev/">skaffold</a> another chance.</p>

<p>Skaffold is an interesting tool, promoted by Google, that
supposedly handles local k8s development &mdash; and I say &ldquo;supposedly&rdquo;
because I&rsquo;ve tried it in the past and have been extremely
underwhelmed by its workflow.</p>

<p>Let me explain: whenever a chance is detected in your codebase, skaffold
wants to redeploy your manifests but, rather than simply
working on an application-reload logic, is instead happy
to:</p>

<ul>
<li>re-build your local image</li>
<li>push it to a registry</li>
<li>update the k8s deployment so a brand new pod comes up</li>
</ul>


<p>If you&rsquo;ve made it so far you probably realized that
the whole operation doesn&rsquo;t either come cheap nor fast
&mdash; you could be waiting several seconds for your changes
to take effect&hellip;</p>

<p>That was, until skaffold introduced <a href="https://skaffold.dev/docs/pipeline-stages/filesync/">file sync</a>
to avoid the need to rebuild, redeploy and restart pods.
This feature is currently in beta, but it&rsquo;s already working
well enough that I&rsquo;ve decided to give it a shot, with very
positive results.</p>

<p>Now, rather than having an entire chart to mantain locally,
my development setup has a simple <code>skaffold.yaml</code> that
looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">apiVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">skaffold/v1</span>
</span><span class='line'><span class="l-Scalar-Plain">kind</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Config</span>
</span><span class='line'><span class="l-Scalar-Plain">build</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">artifacts</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my_app</span>
</span><span class='line'>    <span class="l-Scalar-Plain">context</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">.</span>
</span><span class='line'>    <span class="l-Scalar-Plain">sync</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">manual</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">src</span><span class="p-Indicator">:</span> <span class="s">&quot;**&quot;</span>
</span><span class='line'>          <span class="l-Scalar-Plain">dest</span><span class="p-Indicator">:</span> <span class="s">&quot;/src&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">deploy</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">kubectl</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">manifests</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">skaffold/*.yaml</span>
</span></code></pre></td></tr></table></div></figure>


<p>and I reduced the manifests to a simple k8s manifest
containing multiple resources, separated by <code>---</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">apiVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">apps/v1</span>
</span><span class='line'><span class="l-Scalar-Plain">kind</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Deployment</span>
</span><span class='line'><span class="l-Scalar-Plain">metadata</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my_app</span>
</span><span class='line'>  <span class="l-Scalar-Plain">labels</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">app</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my_app</span>
</span><span class='line'><span class="l-Scalar-Plain">spec</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">replicas</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'>  <span class="l-Scalar-Plain">selector</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">matchLabels</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">app</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my_app</span>
</span><span class='line'>  <span class="l-Scalar-Plain">template</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">metadata</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my_app</span>
</span><span class='line'>      <span class="l-Scalar-Plain">labels</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">app</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my_app</span>
</span><span class='line'>    <span class="l-Scalar-Plain">spec</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">restartPolicy</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Always</span>
</span><span class='line'>      <span class="l-Scalar-Plain">containers</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my_app</span>
</span><span class='line'>        <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my_app</span>
</span><span class='line'>        <span class="l-Scalar-Plain">imagePullPolicy</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">IfNotPresent</span>
</span><span class='line'>        <span class="l-Scalar-Plain">tty</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>        <span class="l-Scalar-Plain">stdin</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>        <span class="l-Scalar-Plain">env</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ENV</span>
</span><span class='line'>          <span class="l-Scalar-Plain">value</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">dev</span>
</span><span class='line'>      <span class="l-Scalar-Plain">terminationGracePeriodSeconds</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">apiVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">extensions/v1beta1</span>
</span><span class='line'><span class="l-Scalar-Plain">kind</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Ingress</span>
</span><span class='line'><span class="l-Scalar-Plain">metadata</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my_app</span>
</span><span class='line'>  <span class="l-Scalar-Plain">annotations</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">kubernetes.io/ingress.class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">nginx</span>
</span><span class='line'><span class="l-Scalar-Plain">spec</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">tls</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">my-app.dev</span>
</span><span class='line'>  <span class="l-Scalar-Plain">rules</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my-app.dev</span>
</span><span class='line'>    <span class="l-Scalar-Plain">http</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">paths</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/</span>
</span><span class='line'>        <span class="l-Scalar-Plain">backend</span><span class="p-Indicator">:</span>
</span><span class='line'>          <span class="l-Scalar-Plain">serviceName</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my_app</span>
</span><span class='line'>          <span class="l-Scalar-Plain">servicePort</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my-app.dev</span>
</span><span class='line'>    <span class="l-Scalar-Plain">http</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">paths</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/</span>
</span><span class='line'>        <span class="l-Scalar-Plain">backend</span><span class="p-Indicator">:</span>
</span><span class='line'>          <span class="l-Scalar-Plain">serviceName</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my_app</span>
</span><span class='line'>          <span class="l-Scalar-Plain">servicePort</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http</span>
</span><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">apiVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">v1</span>
</span><span class='line'><span class="l-Scalar-Plain">kind</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Service</span>
</span><span class='line'><span class="l-Scalar-Plain">metadata</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my_app</span>
</span><span class='line'><span class="l-Scalar-Plain">spec</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http</span>
</span><span class='line'>    <span class="l-Scalar-Plain">port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">80</span>
</span><span class='line'>    <span class="l-Scalar-Plain">protocol</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">TCP</span>
</span><span class='line'>    <span class="l-Scalar-Plain">targetPort</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">8080</span>
</span><span class='line'>  <span class="l-Scalar-Plain">selector</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">app</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my_app</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s about it. Now my <code>dev up</code> is mapped to a simple
<code>skaffold dev</code>, and skaffold takes care of re-building
the image when needed, syncing changes locally and so on.
One of the advantages of using this tool is that it automatically
detects changes to the manifests and the Dockerfile, so
it re-builds the image without you having to trigger the
process manually (which wasn&rsquo;t possible with Helm alone).</p>

<p>Another interesting benefit of using skaffold is the support
for base registries as well as build stages. The former
allows you to run a registry at any given URL, and tell
skaffold to prepend that URL to any image that&rsquo;s being pushed
to the k8s cluster.</p>

<p>As I mentioned, I use microk8s, which doesn&rsquo;t play very well
with <a href="https://microk8s.io/docs/registry-images">locally-built images</a>,
so I simply run the built-in registry on port <code>32000</code>. Others
in my team simply run Docker for Mac which doesn&rsquo;t need a registry
as any image built locally is automatically available to k8s.</p>

<p>This would mean that I would have to update the <code>image</code> field
of my deployments, manually, to <code>localhost:32000/my_app</code>, a
tedious and annoying operation (and I&rsquo;d also have to make sure
those changes aren&rsquo;t pushed to git). Skaffold frees you from the
drama with a simple <code>skaffold config set default-repo localhost:32000</code>,
a trick that will tell skaffold to parse all the manifests it deploys
and replace the <code>image</code> fields, prepending the URL of your own registry.
The feature is documented extensively <a href="https://skaffold.dev/docs/environment/image-registries/">here</a>,
and it&rsquo;s a life saver!</p>

<p>The support for build stages is another great trick up in
skaffold&rsquo;s sleeve, as it allows to use the power of Docker&rsquo;s
multi-stage builds in your development environment.</p>

<p>If you have a Dockerfile that looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">FROM golang:1.13 as dev</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">RUN go get -v github.com/codegangsta/gin</span>
</span><span class='line'><span class="l-Scalar-Plain">WORKDIR /src</span>
</span><span class='line'><span class="l-Scalar-Plain">COPY go.mod /src</span>
</span><span class='line'><span class="l-Scalar-Plain">COPY go.sum /src</span>
</span><span class='line'><span class="l-Scalar-Plain">RUN go mod download</span>
</span><span class='line'><span class="l-Scalar-Plain">COPY . /src</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">RUN go build -o my_go_binary main.go</span>
</span><span class='line'><span class="l-Scalar-Plain">CMD gin run main.go</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">FROM gcr.io/distroless/base as prod</span>
</span><span class='line'><span class="l-Scalar-Plain">COPY --from=dev /src /</span>
</span><span class='line'><span class="l-Scalar-Plain">CMD [&quot;/my_go_binary&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can tell skaffold that, locally, it should simply stop at the
<code>dev</code> stage:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">apiVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">skaffold/v1</span>
</span><span class='line'><span class="l-Scalar-Plain">kind</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Config</span>
</span><span class='line'><span class="l-Scalar-Plain">build</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">artifacts</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my_go_app</span>
</span><span class='line'>    <span class="l-Scalar-Plain">docker</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">target</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">dev</span>
</span><span class='line'>    <span class="l-Scalar-Plain">context</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">.</span>
</span><span class='line'>    <span class="l-Scalar-Plain">sync</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">manual</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">src</span><span class="p-Indicator">:</span> <span class="s">&quot;**&quot;</span>
</span><span class='line'>          <span class="l-Scalar-Plain">dest</span><span class="p-Indicator">:</span> <span class="s">&quot;/src&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">deploy</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">kubectl</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">manifests</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">skaffold/*.yaml</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you see, the <code>target</code> field does the trick.</p>

<p>Believe me, skaffold has made my life so much easier and it&rsquo;s a tool
I would gladly recommend. Before introducing file syncing I didn&rsquo;t
want to get my hads dirty with it, as I did not find the development
workflow sustainable (re-build and re-deploy at every file change),
but right now it works much better than anything I could have come
up with on my own.</p>

<h2>Hands on the code</h2>

<p>Last but not least, we went over running a cluster as well as our
application &mdash; but how do we actually debug our code or run tests?</p>

<p>Ideally, we&rsquo;d like a script that would be able to:</p>

<ul>
<li>build and run your app (<code>up</code>)</li>
<li>execute commands inside the container (<code>exec</code>)</li>
<li>jump inside the container (<code>in</code>)</li>
<li>execute tests (<code>test</code>)</li>
</ul>


<p>Wouldn&rsquo;t it be nice to simply open a shell and run your tests with <code>dev test</code>?</p>

<p>Turns out, creating a simple wrapper over our wokflow is very
straightforward, and here&rsquo;s a sample of the code one could write:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c"># dev $command</span>
</span><span class='line'><span class="nv">arg</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'><span class="nb">command</span><span class="o">=</span><span class="s2">&quot;cmd_$1&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Boot the app through skaffold.</span>
</span><span class='line'>cmd_up<span class="o">(){</span>
</span><span class='line'>    skaffold dev
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Deletes the app</span>
</span><span class='line'>cmd_delete<span class="o">(){</span>
</span><span class='line'>    skaffold delete
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># This will drop you inside the container.</span>
</span><span class='line'><span class="c"># We use bash, if available, else &quot;sh&quot;</span>
</span><span class='line'>cmd_in<span class="o">(){</span>
</span><span class='line'>    <span class="nv">app</span><span class="o">=</span><span class="k">$(</span>get_app_name<span class="k">)</span>
</span><span class='line'>    kubectl <span class="nb">exec</span> -ti deploy/<span class="nv">$app</span> -- sh -c <span class="s2">&quot;command -v bash &amp;&amp; bash || sh&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Read the app name based on the image we</span>
</span><span class='line'><span class="c"># build inside the skaffold.yaml</span>
</span><span class='line'>get_app_name<span class="o">(){</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="k">$(</span>yq <span class="nb">read </span>skaffold.yaml build.artifacts.0.image<span class="k">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Main function: if a command has been passed,</span>
</span><span class='line'><span class="c"># check if it&#39;s available, and execute it. If</span>
</span><span class='line'><span class="c"># the command is not available, we print the</span>
</span><span class='line'><span class="c"># default help.</span>
</span><span class='line'>main<span class="o">(){</span>
</span><span class='line'>    <span class="nb">declare</span> -f <span class="nv">$command</span> &gt; /dev/null
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> -eq 0 <span class="o">]</span>
</span><span class='line'>    <span class="k">then</span>
</span><span class='line'>        <span class="nv">$command</span> <span class="nv">$@</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'><span class="k">        </span><span class="nb">printf</span> <span class="s2">&quot;&#39;$arg&#39; is not a recognized command.\n\n&quot;</span>
</span><span class='line'>        <span class="nb">exit </span>1
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">shift</span>
</span><span class='line'>main <span class="nv">$@</span>
</span></code></pre></td></tr></table></div></figure>


<p>All this script does is to read the command passed to it
and run it as a bash function. As you see, <code>up</code> is mapped
to <code>skaffold dev</code>, and <code>in</code> is mapped to <code>kubectl exec ... -- bash</code>
(so that you can jump into the container and run whatever
command you&rsquo;d like).</p>

<p>The actual <code>dev</code> I run locally is on github, under <a href="https://github.com/odino/k8s-dev">odino/k8s-dev</a>,
and I believe I should credit <a href="https://www.linkedin.com/in/hzarka/">Hisham</a> for the original idea
&mdash; this is a script we&rsquo;ve been using (and polishing) since ages.</p>

<p>If you&rsquo;re wondering how does it look on the
terminal, here&rsquo;s an asciicast where tests
are run succesfully (<code>dev test</code>), we update
the code to make the tests fail and then
we jump into the container (<code>dev in</code>), before
cleaning up (<code>dev delete</code>):</p>

<script id="asciicast-07QLv6MRWkgurAu7uHxYfA421" src="https://asciinema.org/a/07QLv6MRWkgurAu7uHxYfA421.js" async></script>


<h2>That&rsquo;s a wrap</h2>

<p>Oh boy, right on time to close 2019 with a splash!</p>

<p>Developing on a local k8s cluster isn&rsquo;t super straightforward,
and I hope that by sharing my toolbox it should be easier for
you to set your environment up for a productive day.</p>

<p>Happy new decade!</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[WASEC, a book about Web Application Security, is now available for sale]]></title>
		
		<link href="https://odino.org/wasec-a-book-about-web-application-security-is-now-available-for-sale/"/>
		<updated>2019-11-25T22:41:00+00:00</updated>
		<id>https://odino.org/wasec-a-book-about-web-application-security-is-now-available-for-sale</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p><img class="right" src="https://odino.org/images/wasec.jpeg"></p>

<p>I&rsquo;m pleased to announce (even though you might have already heard about this on <a href="https://twitter.com/_odino_">my Twitter stream</a>)
that the ebook on web application security I&rsquo;ve been working on over the past year is now
officially available for sale, at the hopefully-reasonable price of <del>$6.99</del> $9.99.</p>

<p>You can now buy the book at <a href="https://leanpub.com/wasec">leanpub.com/wasec</a>, while Kindle enthusiasts will
have to wait a few more days for it to become available there: it is currently available for <a href="https://www.amazon.com/dp/B081Z7SD48">pre-order</a>
and should be generally available in the next few days.</p>

<p>WASEC is the culmination of over a year of thoughts regarding my experience with web application
security from the point of view of a software engineer, rather than the one of a security researcher.
I believe software engineers might find it extremely interesting as it approaches <em>defensive</em> security
from the point of view of someone who has to build an app and needs to keep security into consideration
<em>among other things</em>.</p>

<!-- more -->


<p>If you&rsquo;re unsure about purchasing the ebook you can take a look at some of its content that I previously
shared <a href="https://odino.org/introduction-to-web-application-security/">in this blog</a>. If reading lengthy blog posts isn&rsquo;t
your thing, you can also download the sample version from <a href="https://leanpub.com/wasec">leanpub itself</a> &mdash; it contains the first few
complete chapters of the book.</p>

<h2>What if I can&rsquo;t afford the book?</h2>

<p>Reach out to me privately, and we&rsquo;ll sort something out. I will need to make sure you&rsquo;re not trying
to <em>gamble the system</em>, but I&rsquo;d hate to see someone not being able to read the book simply because they
can&rsquo;t afford it &mdash; I will try to make an effort to reply to everyone who reaches out to me, and make sure
financial conditions don&rsquo;t get in the way of knowledge.</p>

<p>I wrote this book to share what my experience with
web security has been and, frankly, I don&rsquo;t think I&rsquo;ll ever make the money I spent on it (in terms of man-hours)
ever &mdash; so there&rsquo;s no point in being greedy :&ndash;)</p>

<p>Again, ping me and we&rsquo;ll try to work something out.</p>

<h2>Sayonara</h2>

<p>Again, please make sure you visit <a href="https://leanpub.com/wasec">WASEC&rsquo;s book page on leanpub</a> and,
if you&rsquo;re interested in the topic and have a few bucks to spare, buy the book. Leanpub has a 45-day &ldquo;<a href="http://help.leanpub.com/en/articles/110743-what-if-i-want-to-return-a-book-can-i-get-a-refund">100% Happiness Guarantee</a>&rdquo;,
which means there&rsquo;s no risk in purchasing any Leanpub book, and they make it easy to get a refund if you&rsquo;ve tried
a book and want your money back within 45 days of your purchase. If you end up reading the book, feel free to reach
out and let me know what your thoughts are.</p>

<p>In the next few days I&rsquo;ll be publishing some more updates to the book (all future updates will be available for
free for users who have purchased it) and release it on the Kindle store &mdash; hit me up if you have any question.</p>

<p>Adios!</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Web application security: what to do when...]]></title>
		
		<link href="https://odino.org/wasec-web-application-security-what-to-do-when-dot-dot-dot/"/>
		<updated>2019-10-28T14:43:00+00:00</updated>
		<id>https://odino.org/wasec-web-application-security-what-to-do-when-dot-dot-dot</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<ol class="aseries">
    <p>This post is part of the &#8221;<strong><a href="https://odino.org/categories/wasec/">WASEC: Web Application SECurity</a></strong>&#8221; series, which is a portion of the content of <a href="https://leanpub.com/wasec">WASEC</a>, an e-book on web application security I&#8217;ve written.</p>
    <p>Here is a list of all the articles in this series:</p>
    <li>
        <a href="https://odino.org/web-security-demistified/">Web security demystified: WASEC</a>
    </li>
    <li>
        <a href="https://odino.org/introduction-to-web-application-security/">Introduction</a>
    </li>
    <li>
        <a href="https://odino.org/wasec-understanding-the-browser/">Understanding the browser</a>
    </li>
    <li>
        <a href="https://odino.org/security-https-perspective/">Security at the HTTP level</a>
    </li>
    <li>
        <a href="https://odino.org/secure-your-web-application-with-these-http-headers/">HTTP headers to secure your application</a>
    </li>
    <li>
        <a href="https://odino.org/security-hardening-http-cookies/">Hardening HTTP cookies</a>
    </li>
    <li>
        <a href="https://odino.org/wasec-web-application-security-what-to-do-when-dot-dot-dot/">Situationals</a>
    </li>
    </br>
    <p>
        If you&#8217;ve enjoyed the content of this article, consider buying the complete ebook on either the <a href="https://www.amazon.com/WASEC-Application-Everything-developer-application-ebook/dp/B081Z7SD48">Kindle store</a> or <a href="https://leanpub.com/wasec">Leanpub</a>.
    </p>
</ol>


<p>Often times, we&rsquo;re challenged with decisions that have a direct impact on the security of our applications, and the consequences of those decisions could potentially be disastrous. This article aims to present a few scenarios you might be faced with, and offer advice on how to handle each and every single of them.</p>

<p>This is by no means an exhaustive list of security considerations you will have to make in your day to day as a software engineer, but rather an inspiration to keep security at the centre of your attention by offering a few examples.</p>

<!-- more -->


<h2>Blacklisting versus whitelisting</h2>

<p>When implementing systems that require discarding elements based on an input (eg. rejecting requests based on an IP address or a comment based on certain words) you might be tempted to use a blacklist in order to filter elements out.</p>

<p>The inherent problem with blacklist is the approach we&rsquo;re taking: it allows us to specify which elements we think are unsafe, making the strong assumption of knowing everything that might hurt us. From a security perspective, that&rsquo;s the equivalent of us wearing summer clothes because we&rsquo;re well into June, without looking out the window in order to make sure today&rsquo;s actually sunny: we make assumptions without having the whole picture, and it could hurt us.</p>

<p>If you were, for example, thinking of filtering out comments based on a blacklist of words, you would probably start by describing a blacklist of 5 to 10 words: when coming up with the list you might be forgetting words such a <em>j3rk</em>, or reject genuine comments mentioning &ldquo;<a href="https://en.wikipedia.org/wiki/Dick_Bavetta">Dick Bavetta</a>&rdquo;, a retired NBA referee.</p>

<p>Now, comments aren&rsquo;t always the most appropriate example in terms of security, but you get the gist of what we&rsquo;re talking about: it&rsquo;s hard to know everything that&rsquo;s going to hurt us well in advance, so whitelisting is generally a more cautious approach, allowing us to specify what input we trust.</p>

<p>A more practical example would be logging: you will definitely want to whitelist what can be logged rather than the opposite. Take an example object such as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nx">email</span><span class="o">:</span> <span class="s2">&quot;lebron@james.com&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">password</span><span class="o">:</span> <span class="s2">&quot;King_James&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">credit_card</span><span class="o">:</span> <span class="s2">&quot;1111 2222 3333 4444&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">birthday</span><span class="o">:</span> <span class="s2">&quot;1984-12-30&quot;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You could possibly create a blacklist that includes <code>password</code> and <code>credit_card</code>, but what would happen when another engineer in the team changes fields from snake_case to camelCase?</p>

<p>Our object would become:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nx">email</span><span class="o">:</span> <span class="s2">&quot;lebron@james.com&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">password</span><span class="o">:</span> <span class="s2">&quot;King_James&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">creditCard</span><span class="o">:</span> <span class="s2">&quot;1111 2222 3333 4444&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">birthday</span><span class="o">:</span> <span class="s2">&quot;1984-12-30&quot;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You might end up forgetting to update your blacklist, leading to the credit card number of your customers being leaked all over your logs.</p>

<p>As you&rsquo;ve probably realized, the choice of utilizing a blacklist or a whitelist highly depends on the context you&rsquo;re operating in: if you&rsquo;re exposing a service on the internet (such as facebook.com), then blacklisting is definitely not going to work, as that would mean knowing the IP address of every genuine visitor, which is practically impossible.</p>

<p>From a security perspective, whitelisting is definitely a better approach, but is often impactical. Choose your strategy carefully after reviewing both options: none of the above is suitable without prior knowledge of your system, constraints and requirements.</p>

<h2>Logging secrets</h2>

<p>If you develop systems that have to deal with secrets such as passwords, credit card numbers, security tokens or personally identifiable information (abbr. PII), you need to be very careful about how you deal with these data within your application, as a simple mistake can lead to data leaks in your infrastructure.</p>

<p>Take a look at this example, where our app fetches user details based on a header:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/users/me&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">user</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">getUserByToken</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">token</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Error in request: &quot;</span><span class="p">,</span> <span class="nx">req</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, this innocuous piece of code is actually dangerous: if an error occurs, the entire request gets logged.</p>

<p>Having the whole request logged is going to be extremely helpful when debugging, but will also lead to storing auth tokens (available in the request&rsquo;s headers) in our logs: anyone who has access to those logs will be able to steal the tokens and impersonate your users.</p>

<p>You might think that, since you have tight restrictions on who has access to your logs, you would still be &ldquo;safe&rdquo;: chances are that your logs are ingested into a cloud service such as <a href="https://cloud.google.com/stackdriver/">GCP&rsquo;s StackDriver</a> or <a href="https://aws.amazon.com/cloudwatch/features/">AWS&#8217; CloudWatch</a>, meaning that there are more attack vectors, such as the cloud provider&rsquo;s infrastructure itself, the communication between your systems and the provider to transmit logs and so on.</p>

<p>The solution is to simply avoid logging sensitive information: whitelist what you log (as we&rsquo;ve seen in the previous paragraph) and be wary of logging nested entities (such as objects), as there might be sensitive information hiding somewhere inside them, such as our <code>req.headers.token</code>.</p>

<p>Another solution would be to mask fields, for example turning a credit card number such as <code>1111 2222 3333 4444</code> into <code>**** **** **** 4444</code> before logging it.</p>

<p>That&rsquo;s sometimes a dangerous approach: an erroneous deployment or a bug in your software might prevent your code from masking the right fields, leading to leaking the sensitive information. As I like to say: <strong>use it with caution</strong>.</p>

<p>Last but not least, I want to mention one particular scenario in which any effort we make not to log sensitive information goes in vain: when users input sensitive information in the wrong place.</p>

<p>You might have a login form with username and password, and users might actually input their password in the username field (this can generally happen when you &ldquo;autoremember&rdquo; their username, so that the input field is not available the next time they log in). Your logs would then look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>user e0u9f8f484hf94 attempted to login: failure
</span><span class='line'>user lebron@james.com attempted to login: success
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>Anyone with access to those logs can figure an interesting pattern out: if a username doesn&rsquo;t follow an email pattern (<em>email@domain.tld</em>), chances are the string is actually a password the user had wrongly typed in the username field. Then you would need to look at the successful login attempts been made shortly after, and try to login with the submitted password against a short list of usernames.</p>

<p>What is the point here? Security is hard and, most often, things will work against you: in this context, being paranoid is a virtue.</p>

<blockquote><p><h3>Who is silly enough to log a password?</h3></p><p>You might think logging sensitive information is an amateur&#8217;s mistake, but I argue that even experienced programmers and organizations fall fall under this trap. Facebook, in early 2019, suffered a <a href="https://newsroom.fb.com/news/2019/03/keeping-passwords-secure/">security incident</a> directly related to this problem. As <a href="https://krebsonsecurity.com/2019/03/facebook-stored-hundreds-of-millions-of-user-passwords-in-plain-text-for-years/">Brian Krebs</a> put it:</p><p>&#8220;Facebook is probing a series of security failures in which employees built applications that logged unencrypted password data for Facebook users and stored it in plain text on internal company servers.&#8221;</p><p>This is not to say that Facebook should not be held accountable for the incident, but rather that we can probably sympathize with the engineers who forgot the console.log somewhere in the code. Security is hard, and so making sure we pay extra-attention to what we log is an extremely important matter.</p></blockquote>


<h2>Never trust the client</h2>

<p>As we&rsquo;ve seen before, cookies that are issued by our servers can be tampered with, especially if they&rsquo;re not <code>HttpOnly</code> and are accesible by JS code on your page.</p>

<p>At the same time, even if your cookies are <code>HttpOnly</code>, storing plaintext data in them is not secure, as any client (even <code>curl</code>), could get a hold of those cookie, modify them and re-issue a request with a modified version of the original cookie.</p>

<p>Suppose your session cookie contains this information:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>profile=dXNlcm5hbWU9TGVCcm9uLHJvbGU9dXNlcg==;
</span></code></pre></td></tr></table></div></figure>


<p>The string is base64-encoded, and anyone could reverse it to get to its actual value, <code>username=LeBron,role=user</code>. Anyone could, at that point, replace <code>user</code> with <code>admin</code> and re-encode the string, altering the value of the cookie.</p>

<p>If your system trusts this cookie without any additional check, you&rsquo;re in for trouble. You should instead <strong>never trust the client</strong>, and prevent it from being able to easily tamper with the data you&rsquo;ve handed off. A popular workaround to this issue is to encrypt or sign this data, like <a href="https://tools.ietf.org/html/rfc7519">JSON Web Tokens</a> do.</p>

<p>Let&rsquo;s drift for a second and dive into JWT, as their simplicity lets us understand the security mechanism behind them extremely well. A JWT is made of 3 parts: headers, claims and signature, separated by a dot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>JWT = &quot;$HEADER.$CLAIMS.$SIGNATURE&quot;
</span></code></pre></td></tr></table></div></figure>


<p>Each value is base64-encoded, with header and claims being nothing but an encoded JSON object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$HEADER = BASE64({
</span><span class='line'>  &quot;alg&quot;: &quot;HS256&quot;,  # HMAC SHA 256
</span><span class='line'>  &quot;typ&quot;: &quot;JWT&quot;     # type of the token
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>$CLAIMS = BASE64({
</span><span class='line'>  &quot;sub&quot;: &quot;1234567890&quot;, # ID of the user
</span><span class='line'>  &quot;name&quot;: &quot;John Doe&quot;,  # Other attributes...
</span><span class='line'>  &quot;iat&quot;: 1516239022    # issued at
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>JWT = &quot;$HEADER.$CLAIMS.$SIGNATURE&quot;
</span></code></pre></td></tr></table></div></figure>


<p>The last part, the signature, is the Message Authentication Code (abbr. MAC) of the combined <code>$HEADER.$CLAIM</code>, calculated through the algorithm specified in the header itself (<code>HMAC SHA-256</code> in our case). Once the MAC is calculated, it is base64-encoded as well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$HEADER = BASE64({
</span><span class='line'>  &quot;alg&quot;: &quot;HS256&quot;,
</span><span class='line'>  &quot;typ&quot;: &quot;JWT&quot;
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>$CLAIMS = BASE64({
</span><span class='line'>  &quot;sub&quot;: &quot;1234567890&quot;,
</span><span class='line'>  &quot;name&quot;: &quot;John Doe&quot;,
</span><span class='line'>  &quot;iat&quot;: 1516239022
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>$SIGNATURE = BASE64(HS256(&quot;$HEADER.$CLAIMS&quot;, $PRIVATE_KEY))
</span><span class='line'>
</span><span class='line'>JWT = &quot;$HEADER.$CLAIMS.$SIGNATURE&quot;
</span></code></pre></td></tr></table></div></figure>


<p>E-voila, our JWT is here!</p>

<p>If you followed this far, you might have understood that JWT is simply composed of 3 parts: 2 insecure set of strings and a signed one, which is what is used to  verify the authenticy of the token. Without the signature, JWTs would be insecure and (arguably) useless, as the information they contain is simply base64-encoded.</p>

<p>As a practical example, let&rsquo;s have a look at this token:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, we have 3 base64-encoded strings, separated by dots. Reversing them in bash is straightforward:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> cut -d<span class="s1">&#39;.&#39;</span> -f1 <span class="o">&lt;&lt;&lt;</span> <span class="nv">$TOKEN</span> | base64 -d
</span><span class='line'><span class="go">{&quot;alg&quot;:&quot;HS256&quot;,&quot;typ&quot;:&quot;JWT&quot;}</span>
</span><span class='line'><span class="gp">$</span> cut -d<span class="s1">&#39;.&#39;</span> -f2 <span class="o">&lt;&lt;&lt;</span> <span class="nv">$TOKEN</span> | base64 -d
</span><span class='line'><span class="go">{&quot;sub&quot;:&quot;1234567890&quot;,&quot;name&quot;:&quot;John Doe&quot;,&quot;iat&quot;:1516239022}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you would expect, the signature produces garbage instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> cut -d<span class="s1">&#39;.&#39;</span> -f3 <span class="o">&lt;&lt;&lt;</span> <span class="nv">$TOKEN</span> | base64 -d
</span><span class='line'><span class="go">I�J�IHǊ(]�O���ǉ~N�%base64: invalid input</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s the mechanism JWTs use to prevent clients from tampering with the tokens themselves: when a server validates a token, it will first verify its signature (through the public key associated by the private one used to generate the signature), then access the token&rsquo;s data. If you&rsquo;re planning to hand over critical information to the client, signing or encrypting it is the only way forward.</p>

<blockquote><p><h3>Are JWTs safe?</h3></p><p>JWTs have been under a lot of scrutiny in recent years, partly because of some design flaws that had to be course-corrected, such as the <a href="https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries/">support of a &#8216;None&#8217; algorithm</a> which would effectively allow forging tokens without any prior knowledge of secrets and keys used to sign them. Luciano Mammino, a researcher from Italy, even managed to publish a <a href="https://github.com/lmammino/jwt-cracker">JWT cracker</a> to illustrate how easy it could be to crack JWTs through brute-forcing, granted the algorithm and secrets used are weak.</p><p>In all honesty, JWTs are very useful when you want to exchange data between two parties. For example, you could send a client the URL https://example.com/check-this-message?token=$JWT so that they could access the data within the token and know it comes from a trusted source. As session IDs, often times there are simpler mechanism you should rely on, as you only really need to issue a cryptographically random ID that identifies a client.</p><p>Does this mean JWTs are not safe? Not really, as it depends on how you use them: Google, for example, allows <a href="https://developers.google.com/identity/protocols/OAuth2ServiceAccount#jwt-auth">authentication to their APIs through JWTs</a>, like many others; the trick is to use safe, long secrets or a cryptographically secure signing algorithm, and understand the use-case you&#8217;re presented with. JWTs also don&#8217;t make any effort to encrypt the data they hold, and they&#8217;re only concerned with validating its authenticity: understand these trade-offs and make your own educated choice.</p><p>In addition, you might want to consider <a href="https://github.com/paragonie/paseto">PASETO</a>, &#8220;Platform Agnostic SEcurity TOkens&#8221;: they were designed with the explicit goal to provide the flexibility and feature-set of JWTs without some of the design flaws that have been highlighted earlier on.</p><p>Further readings:</p><p><ul><br/>    <li><a href="https://paragonie.com/blog/2017/03/jwt-json-web-tokens-is-bad-standard-that-everyone-should-avoid">paragonie.com/blog/2017/03/jwt-json-web-tokens-is-bad-standard-that-everyone-should-avoid</a></li><br/>    <li><a href="https://kevin.burke.dev/kevin/things-to-use-instead-of-jwt/">kevin.burke.dev/kevin/things-to-use-instead-of-jwt</a></li><br/>    <li><a href="https://www.pingidentity.com/en/company/blog/posts/2019/jwt-security-nobody-talks-about.html">www.pingidentity.com/en/company/blog/posts/2019/jwt-security-nobody-talks-about.html</a></li><br/></ul></p></blockquote>


<h2>Generating session IDs</h2>

<p>It should go without saying, but your session IDs (often stored in cookies) should not resemble a know pattern, or be generally guessable. Using an auto-icrementing sequence of integers as IDs would be a terrible choice, as any attacker could just log in, receive session id <code>X</code> and then replace it with <code>X ± N</code>, where <code>N</code> is a small number to increase chances of that being an identifier of a recent, thus valid, session.</p>

<p>The simplest choice would be to use a cryptographically secure function that generates a random string, and usually that&rsquo;s not a hard task to accomplish. Let&rsquo;s, for example, take the <a href="https://github.com/astaxie/beego">Beego</a> framework, very popular among Golang developers, as an example: the function that generates session IDs is</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">session</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;crypto/rand&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">manager</span> <span class="o">*</span><span class="nx">Manager</span><span class="p">)</span> <span class="nx">sessionID</span><span class="p">()</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">b</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">manager</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">SessionIDLength</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">n</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">rand</span><span class="p">.</span><span class="nx">Read</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">n</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span> <span class="o">||</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Errorf</span><span class="p">(</span><span class="s">&quot;Could not successfully read from the system CSPRNG&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">manager</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">SessionIDPrefix</span> <span class="o">+</span> <span class="nx">hex</span><span class="p">.</span><span class="nx">EncodeToString</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>6 lines of code, secure session IDs. As we mentioned earlier, no magic needs to be involved. In general, in most cases you won&rsquo;t need to write this code yourself, as frameworks would provide the basic building blocks to secure your application out of the box: if you&rsquo;re in doubt, though, you can review the framework&rsquo;s code, or open an issue on GitHub to clarify your security concern.</p>

<h2>Querying your database while avoiding SQL injections</h2>

<p>Right off the bat, you&rsquo;re probably thinking: &ldquo;<em>I&rsquo;ve heard about injections!</em>&rdquo;, and that&rsquo;s probably because was the #1 vulnerability in the &ldquo;<a href="https://www.owasp.org/images/7/72/OWASP_Top_10-2017_%28en%29.pdf.pdf">2017 OWASP Top 10: The Ten Most Critical Web Application Security Risks</a>&rdquo;.</p>

<p><img class="center" src="https://odino.org/images/wasec/owasp_2017_injection.png"></p>

<p>But guess what, injections made the #1 spot in the 2010 and 2013 version of the same list as well, and so there&rsquo;s a strong chance you might be familiar with any type of injection risk. To quote what we discussed earlier in this chapter, the only thing you need to remember to fight injection is to <strong>never trust the client</strong>: if you receive data from a client, make sure it&rsquo;s validated, filtered and innocuous, then pass it to your database.</p>

<p>A typical example of an injection vulnerability is the following SQL query:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">db</span><span class="p">.</span><span class="n">users</span> <span class="k">WHERE</span> <span class="n">name</span> <span class="o">=</span> <span class="ss">&quot;$name&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Suppose <code>$name</code> comes from an external input, like the URL
<code>https://example.com/users/search?name=LeBron</code>: an attacker can then craft a specific value for the variable that will significantly alter the SQL query being executed. For example, the URL <code>https://example.com/users/search?name=anyone%22%3B%20TRUNCATE%20TABLE%20users%3B%20--</code> would result in this query being executed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">db</span><span class="p">.</span><span class="n">users</span> <span class="k">WHERE</span> <span class="n">name</span> <span class="o">=</span> <span class="ss">&quot;anyone&quot;</span><span class="p">;</span> <span class="k">TRUNCATE</span> <span class="k">TABLE</span> <span class="n">users</span><span class="p">;</span> <span class="c1">--&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This query would return the right search result, but also destroy the users&#8217; table, with catastrophic consequences.</p>

<p>Most frameworks and libraries provide you with the tools needed to sanitize data before feeding it to, for example, a database. The simplest solution, though, is to use prepared statements, a mechanism offered by most databases that prevents SQL injections altogether.</p>

<blockquote><p><h3>Prepared statements: behind the scenes</h3></p><p>Wondering how prepared statements work? They&#8217;re very straightforward, but often misunderstood. The typical API of a prepared statement looks like:</p><p>query = `SELECT * FROM users WHERE id = ?`<br/>db.execute(query, id)</p><p>As you can see, the &#8220;base&#8221; query itself is separated from the external variables that need to be embedded in the query: what most database drivers will eventually do is to first send the query to the database, so that it can prepare an execution plan for the query itself (that execution plan can also be reused for the same query using different parameters, so prepared statements have performance benefits as well). Separately, the driver will also send the parameters to be used in the query.</p><p>At that point the database will sanitize them, and execute the query together with the sanitized parameters. </p><p>There are 2 key takeaways in this process:</p><p><ul><br/>    <li>the query and parameters are never joined before being sent to the database, as it&#8217;s the database itself that performs this operation</li><br/>    <li>you delegate sanitization to a built-in database mechanism, and that is likely to be more effective than any sanitization mechanism we could have come up by ourselves</li><br/></ul></p></blockquote>


<h2>Dependencies with known vulnerabilities</h2>

<p>Chances are that the application you&rsquo;re working on <em>right now</em> depends on a plethora of open-source libraries: ExpressJS, a popular web framework for NodeJS, depends on 30 external libraries, and those libraries depend on&hellip;we could go on forever. As a simple exercise, I tried to install a brand new version of ExpressJS in my system, with interesting results:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> npm install express
</span><span class='line'><span class="go">+ express@4.17.1</span>
</span><span class='line'><span class="go">added 50 packages from 37 contributors and audited 127 packages in 9.072s</span>
</span><span class='line'><span class="go">found 0 vulnerabilities</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just by installing the latest version of ExpressJS, I&rsquo;ve included 50 libraries in my codebase. Is that inherently bad? Not at all, but it presents a security risk: the more code we write (or use), the larger the attack surface for malicious users.</p>

<p>One of the biggest risks when using a plethora of external libraries is not following up on updates when they are released: it isn&rsquo;t so bad to use open-source libraries (after all, they probably are safer than most of the code we write ourselves), but forgetting to update them, especially when a security fix gets released, is a genuine problem we face every day.</p>

<p>Luckily, programs such as npm provide tools to identify outdated packages with known vulnerabilities: we can simply try to install a dependency with a known vulnerability and run <code>npm audit fix</code>, and npm will do th job for us.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> npm install lodash@4.17.11
</span><span class='line'><span class="go">+ lodash@4.17.11</span>
</span><span class='line'><span class="go">added 1 package from 2 contributors and audited 288 packages in 1.793s</span>
</span><span class='line'><span class="go">found 1 high severity vulnerability</span>
</span><span class='line'><span class="go">  run `npm audit fix` to fix them, or `npm audit` for details</span>
</span><span class='line'><span class="gp">$</span> npm audit
</span><span class='line'><span class="go">                                                                                </span>
</span><span class='line'><span class="go">                       === npm audit security report ===                        </span>
</span><span class='line'><span class="go">                                                                                </span>
</span><span class='line'><span class="gp">#</span> Run  npm update lodash --depth 1  to resolve 1 vulnerability
</span><span class='line'><span class="go">┌───────────────┬──────────────────────────────────────────────────────────────┐</span>
</span><span class='line'><span class="go">│ High          │ Prototype Pollution                                          │</span>
</span><span class='line'><span class="go">├───────────────┼──────────────────────────────────────────────────────────────┤</span>
</span><span class='line'><span class="go">│ Package       │ lodash                                                       │</span>
</span><span class='line'><span class="go">├───────────────┼──────────────────────────────────────────────────────────────┤</span>
</span><span class='line'><span class="go">│ Dependency of │ lodash                                                       │</span>
</span><span class='line'><span class="go">├───────────────┼──────────────────────────────────────────────────────────────┤</span>
</span><span class='line'><span class="go">│ Path          │ lodash                                                       │</span>
</span><span class='line'><span class="go">├───────────────┼──────────────────────────────────────────────────────────────┤</span>
</span><span class='line'><span class="go">│ More info     │ https://npmjs.com/advisories/1065                            │</span>
</span><span class='line'><span class="go">└───────────────┴──────────────────────────────────────────────────────────────┘</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="go">found 1 high severity vulnerability in 1 scanned package</span>
</span><span class='line'><span class="go">  run `npm audit fix` to fix 1 of them.</span>
</span><span class='line'><span class="gp">$</span> npm audit fix
</span><span class='line'><span class="go">+ lodash@4.17.15</span>
</span><span class='line'><span class="go">updated 1 package in 0.421s</span>
</span><span class='line'><span class="go">fixed 1 of 1 vulnerability in 1 scanned package</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re not using JavaScript and npm, you can always rely on external services to scan your software and let you know if any library with known vulnerabilities is found: GitHub offers this service for all their repositories, and you might find it convenient when your codebase is already hosted there.</p>

<p><img class="center" src="https://odino.org/images/wasec/github_alerts.png"></p>

<p>GitHub will also send you an email every time a dependency with a known vulnerability is detected, so you can head over to the repository and have a look at the problem in detail.</p>

<p><img class="center" src="https://odino.org/images/wasec/github_alerts_detail.png"></p>

<p>If you prefer using a different platform, you could try <a href="https://gitlab.com">gitlab.com</a>: it acquired Gemnasium, a product that offered vulnerability scanning, in early 2018 in order to compete with GitHub&rsquo;s offering. If you prefer to use a tool that does not require code hosting instead, <a href="https://snyk.io">snyk.io</a> would probably be your best bet: it&rsquo;s trusted by massive companies such as Google, Microsoft and SalesForce, and offers different tools for your applications, not just dependency scanning.</p>

<h2>Have I been pwned?</h2>

<p>Remember when you were a teenager, and signed up for your first online service ever? Do you remember the password you used? You probably don&rsquo;t, but the internet might.</p>

<p>Chances are that, throughout your life, you&rsquo;ve used an online service that has been subject to attacks, with malicious users being able to obtain confidential information, such as your your password. I&rsquo;m going to make it personal here: my email address has been seen in at least 10 public security breaches, including incidents involving trustworthy companies such as LinkedIn and Dropbox.</p>

<p>How do I know?</p>

<p>I use a very interesting service called <a href="https://haveibeenpwned.com">haveibeenpwned.com</a> (abbr. HIBP), created by Troy Hunt, an Australian web security expert. The site collects information about public data breaches and allows you to understand whether your personal information was seen in any of these breaches. There&rsquo;s no shame in being involved in one of these data breaches, as it&rsquo;s not really your fault. This is, for example, the result of looking up the email address of Larry Page, one of Google&rsquo;s co-founders:</p>

<p><img class="center" src="https://odino.org/images/wasec/larry_page.png"></p>

<p><em>Larry&rsquo;s email address has been masked, but it&rsquo;s pretty public information</em></p>

<p>By knowing when and where an incident happened, you can take a few actions to improve your personal security posture, such as activating two-factor authentication (abbr. 2FA) and being notified of a breach as soon as HIBP is.</p>

<p>One of the interesting side-effects of HIBP is, though, the ability to use it to improve your business&#8217; security, as the site offers an API that you can use to verify whether users within your organization were involved in a data breach. This is extremely important as, too often, users consider security an afterthought, and opt out of mechanisms such as 2-factor authentication. This quickly becomes disastrous when you put in context of password re-use, a practice that is still way too common: a user signing up to multiple services using the same exact password. When one of those services is breached, the accounts on all the other ones might be breached as well.</p>

<blockquote><p><h3>Re-using credentials: a real-world story</h3></p><p>I&#8217;ve been directly hit by a password re-use attack during my career, and it wasn&#8217;t a fun experience.</p><p>While I was heading technology at an online company, our security team received a message from a (questionable) researcher claiming he could login into many of our user accounts, sending across plaintext passwords to prove the fact. Baffled, we quickly realized we either got compromised, or someone else had been: when the attacker revealed *how* he got those credentials, we quickly realized they were available to the public through some hardcore googling.</p><p>After obtaining a full list of emails included in the breach, we then had to join it with the list of our customers, ending with forcefully resetting the password of the ones found both in the breach and our own database.</p></blockquote>


<h2>Session invalidation in a stateless architecture</h2>

<p>If you&rsquo;ve ever built a web architecture, chances are that you&rsquo;ve heard how stateless ones scale better due to the fact that they do not have to keep track of state. That is true, and it represents a security risk, especially in the context of authentication state.</p>

<p>In a typical stateful architecture, a client gets issued a session ID, which is stored on the server as well, usually linked to the user ID. When the client requests information from the server, it includes its session ID, so that the server knows that a particular request is made on behalf of a user with a particular ID, thanks to the mapping between session and user IDs. This requires the server store a list of all the session IDs it generated with a link to the user ID, and it can be a costly operation.</p>

<p>JWTs, which we spoke about earlier on in this chapter, rose to prominence due to the fact that they easily allow stateless authentication between the client and the server, so that the server would not have to store additional information about the session. A JWT can include a user id, and the server can simply verify its signature on-the-fly, without having to store a mapping between a session ID and a user ID.</p>

<p>The issue with stateless authentication tokens (and not just JWTs) lies in a simple security aspect: it is supposedly hard to invalidate tokens, as the server has no knowledge of each one it generated since they&rsquo;re not stored anywhere. If I logged in on a service yesterday, and my laptop gets stolen, an attacker could simply use my browser and would still be logged in on the stateless service, as there is no way for me to invalidate the previously-issued token.</p>

<p>This can be easily circumvented, but it requires us to drop the notion of running a completely stateless architecture, as there will be some state-tracking required if we want to be able to invalidate JWTs. The key here is to find a sweet spot between stateful and stateless, taking advantage of both the pros of statelessness (performance) and statefulness (security).</p>

<p>Let&rsquo;s suppose we want to use JWTs for authentication: we could issue a token containing a few information fo the user:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkxlYnJvbiBKYW1lcyIsImlhdCI6MTUxNjIzOTAyMn0.UJNHBHIBipS_agfTfTpqBmyOFaAR4mNz7eOwLOKUdLk
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> cut -d<span class="s1">&#39;.&#39;</span> -f1 <span class="o">&lt;&lt;&lt;</span> <span class="nv">$TOKEN</span> | base64 -d
</span><span class='line'><span class="go">{&quot;alg&quot;:&quot;HS256&quot;,&quot;typ&quot;:&quot;JWT&quot;}%                                                            </span>
</span><span class='line'>
</span><span class='line'><span class="gp">$</span> cut -d<span class="s1">&#39;.&#39;</span> -f2 <span class="o">&lt;&lt;&lt;</span> <span class="nv">$TOKEN</span> | base64 -d
</span><span class='line'><span class="go">{&quot;sub&quot;:&quot;1234567890&quot;,&quot;name&quot;:&quot;Lebron James&quot;,&quot;iat&quot;:1516239022}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, we included a the <em>issued at</em> (<code>iat</code>) field in the token, which can help us invalidating &ldquo;expired&rdquo; tokens. You could then implement a mechanism whereby the user can revoke all previously issued tokens by simply by clicking a button that saves a timestamp in a, for example, <code>last_valid_token_date</code> field in the database.</p>

<p>The authentication logic you would then need to implement for verifying the validity of the token would look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">function</span> <span class="nx">authenticate</span><span class="p">(</span><span class="nx">token</span><span class="p">):</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">!</span><span class="nx">validate</span><span class="p">(</span><span class="nx">token</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">payload</span> <span class="p">=</span> <span class="nx">get_payload</span><span class="p">(</span><span class="nx">token</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">user_data</span> <span class="p">=</span> <span class="nx">get_user_from_db</span><span class="p">(</span><span class="nx">payload</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nx">payload</span><span class="p">.</span><span class="nx">iat</span> <span class="p">&lt;</span> <span class="nx">user_data</span><span class="p">.</span><span class="nx">last_valid_token_date</span><span class="p">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Easy-peasy! Unfortunately, this requires you to hit the database everytime the user logs in, which might go against your goal of scaling more easily through being state-less. An ideal solution to this problem would be to use 2 tokens: a long-lived one and a short-lived one (eg. 1 to 5 minutes).</p>

<p>When your servers receive a request:</p>

<ul>
<li>if it only has the long-lived one only, validate it and do a database check as well. If the process is successful, issue a new short-lived one to go with the long-lived one</li>
<li>if it carries both tokens, simply validate the short-lived one. If it&rsquo;s expired, repeat the process on the previous point. If it&rsquo;s valid instead, there&rsquo;s no need to check the long-lived one as well</li>
</ul>


<p>This allows you to keep a session active for a very long time (the validity of the long-lived token) but only check for its validity on the database every N minutes, depending on the validity of the short-lived token. Every time the short-lived token expires, you can go ahead and re-validate the long-lived one, hitting the database.</p>

<p>Other major companies, such as Facebook, keep track of all of your sessions in order to offer an increased level of security:</p>

<p><img class="center" src="https://odino.org/images/wasec/facebook-sessions.png"></p>

<p>This approach definitly &ldquo;costs&rdquo; them more, but I&rsquo;d argue it&rsquo;s essential for such a service, where the safety of its user&rsquo;s information is extremely important. As we stated multiple times before, choose your approach after carefully reviewing your priorities, as well as your goals.</p>

<h2>My CDN was compromised!</h2>

<p>Often times, web applications serve part of their content through a CDN, typically in the form of static assets like Javascript or CSS files, while the &ldquo;main&rdquo; document is rendered by a webserver. This gives developers very limited control over the static assets themselves, as they&rsquo;re usually uploaded to a 3rd-party CDN (eg. CoudFront, Google Cloud CDN, Akamai).</p>

<p>Now, suppose an attacker gained access to your login credentials on the CDN provider&rsquo;s portal and uploaded a modified version of your static assets, injecting malicious code. How could you prevent such a risk for your users?</p>

<p>Browser vendors have a solution for you, called <a href="https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity">sub-resource integrity</a> (abbr. SRI). Long-story short, SRI allows your main application to generate cryptographic hashes of your static files and tell the browser which file is mapped to what hash. When the browser downloads the static asset from the CDN, it will calculate the asset&rsquo;s hash on-the-fly, and make sure that it matches the one provided in the main document. If the hashes don&rsquo;t match the browser will simply refuse to execute or render the asset.</p>

<p>This is how you can include an asset with an <em>integrity hash</em> in your document:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>...
</span><span class='line'><span class="nt">&lt;script </span>
</span><span class='line'><span class="nt">  </span><span class="na">src=</span><span class="s">&quot;https://my.cdn.com/asset.js&quot;</span>
</span><span class='line'>  <span class="na">integrity=</span><span class="s">&quot;sha256-Y34u3VVVcO2pZtmdTnfZ+7OquEpJj/VawhuWPB4Fwq3ftcFc0gceft1HNZ14eUHT&quot;</span>
</span><span class='line'><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>The <em>integrity hash</em> can be computed with a simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">cat $ASSET_FILE_NAME | openssl dgst -sha384 -binary | openssl base64 -A</span>
</span></code></pre></td></tr></table></div></figure>


<p>A working example can be found at <a href="https://github.com/odino/wasec/tree/master/sub-resource-integrity">github.com/odino/wasec/tree/master/sub-resource-integrity</a>: after you&rsquo;ve ran the webserver with a simple <code>node index.js</code> you can visit <a href="http://wasec.local:7888">http://wasec.local:7888</a> to see SRI in action.</p>

<p>Two scripts are included in the page you&rsquo;re opening, one that&rsquo;s <em>legitimate</em> and one that&rsquo;s supposed to simulate an attacker&rsquo;s attempt to inject malicious code in one of your assets. As you can see, the attacker&rsquo;s attempt proceeds without any issue when SRI is turned off:</p>

<p><img class="center" src="https://odino.org/images/wasec/sri_off.png"></p>

<p>By visiting <a href="http://wasec.local:7888/?sri=on">http://wasec.local:7888/?sri=on</a> we get a completely different outcome, as the browser realizes that there&rsquo;s a script that doesn&rsquo;t seem to be genuine, and doesn&rsquo;t let it execute:</p>

<p><img class="center" src="https://odino.org/images/wasec/sri_on.png"></p>

<p>Here is what our HTML looks like when SRI is turned on:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/asset.js&quot;</span> <span class="na">integrity=</span><span class="s">&quot;sha256-Z67eKNNu3z1gzgMcRCqRQo4f4gtT6pM0y6BHe/r5OGY=&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/attack.js&quot;</span> <span class="na">integrity=</span><span class="s">&quot;sha256-AN_INTEGRITY_THAT_DOESNT_MATCH&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>A very clever trick from browser vendors, and your users are secured should anything happen to the files hosted on a separate CDN. Clearly this doesn&rsquo;t prevent an attacker from attacking your &ldquo;main&rdquo; resource (ie. the main HTML document), but it&rsquo;s an additional layer of security you couldn&rsquo;t count on until a few years ago.</p>

<h2>The slow death of EV certificates</h2>

<p>More than once in my career I&rsquo;ve been asked to provision an EV certificate for web applications I was managing, and every single time I managed my way out of it &mdash; not because of lazyness, but rather due to the security implications of these certificates. In short? They don&rsquo;t have any influence on security, and cost a whole lot of money: let&rsquo;s try to understand what EV certificates are and why you don&rsquo;t really need to use one.</p>

<p>Extended Validation certificates (abbr. EV) are a type of SSL certificates that aims to increase the users&#8217; security by performing additional verification before the issuance of the certificate. This additional level of scrutiny would, on paper, allow CAs to prevent bad actors from obtaining SSL certificates to be used for malicious purposes &mdash; a truly remarkable feat if it would actually work that way: there were some egregious cases instead, like the one where <a href="https://arstechnica.com/information-technology/2017/12/nope-this-isnt-the-https-validated-stripe-website-you-think-it-is/">a researcher named Ian Carrol was able to obtain an EV certificate for an entity named &ldquo;Stripe, inc&rdquo; from a CA</a>. Long story short, CAs are not able to guarantee an increased level of security for EV certificates.</p>

<p>If you&rsquo;re wondering why are EV certificates still a thing to this day, let me give you a quick answer: under the false assumption of &ldquo;added security&rdquo;, EV certificates used to have a special UI in browsers, sort of a &ldquo;vanity&rdquo; feature CAs would charge exorbitant amount of money for (in some cases more than $1000 for a single-domain EV certificate). This is how an EV certificate would show up in the user&rsquo;s browser:</p>

<p><img class="center" src="https://odino.org/images/wasec/ev-cert.png"></p>

<p>As you can see, there is a &ldquo;nice&rdquo; UI pattern here, with the problem being that it is of no use from a security perspective. As soon as research after research started to point out how ineffective EV certificates are, in terms of security, browsers started to adapt, discouraging websites from purchasing EV certificates. This is how the browser bar looks like when you access stripe.com from Chrome 77 onwards:</p>

<p><img class="center" src="https://odino.org/images/wasec/non-ev-cert.png"></p>

<p>The additional information (such as the organization&rsquo;s name) has been moved to the &ldquo;Page Info&rdquo; section, which is accessible by clicking on the lock icon on the address bar:</p>

<p><img class="center" src="https://odino.org/images/wasec/ev-chrome-77.png"></p>

<p>Mozilla has implemented a similar pattern starting with Firefox 70, so it&rsquo;s safe to safe you shouldn&rsquo;t bother with EV certificates anymore:</p>

<ul>
<li>they do not offer any increased level of security for your users</li>
<li>they do not get a &ldquo;preferential&rdquo; UI at the browser-level, making it a very inefficient expense compared to regular SSL certificates you can obtain (<a href="https://letsencrypt.org">Let&rsquo;s Encrypt</a> certificates are free, for example)</li>
</ul>


<p>Troy Hunt summed the EV experience quite well:</p>

<blockquote><p>EV is now really, really dead. The claims that were made about it have been thoroughly debunked and the entire premise on which it was sold is about to disappear. So what does it mean for people who paid good money for EV certs that now won&#8217;t look any different to DV? I know precisely what I&#8217;d do if I was sold something that didn&#8217;t perform as advertised and became indistinguishable from free alternatives&#8230;</p><footer><strong>Troy Hunt</strong> <cite><a href='https://www.troyhunt.com/extended-validation-certificates-are-really-really-dead/'>Extended Validation Certificates Are (Really, Really) Dead</a></cite></footer></blockquote>


<h2>Paranoid mode: on</h2>

<p>Remember: being paranoid might sometime cause a scoff from one of your colleagues or trigger their eye roll, but don&rsquo;t let that deter you from doing your job and making sure the right precautions are being taken.</p>

<p>Some users, for example, do not appreciate enforcing 2FA on their account, or might not like to have to CC their manager in an email to get an approval, but your job is to make sure the ship is tight and secure, even if it means having to implement some annoying checks or processes along the way. This doesn&rsquo;t mean you should ask your colleagues to get a notary public to attest their printed request for a replacement laptop, so always try to be reasonable.</p>

<p>I still remember being locked out of an AWS account (I stupidly let my password expire) and having to ask our Lead System Administrator for a password reset with an email along the lines of &ldquo;<em>Hi X, I&rsquo;m locked out of my AWS account, can you reset my password and share a new, temporary one here?</em>&rdquo;.</p>

<p>The response? A message on WhatsApp:</p>

<p><img class="center" src="https://odino.org/images/wasec/oba-paranoid.png"></p>

<p>This was the right thing to do, as a person with malicious intentions could have just gotten a hold of my email account and try to steal credentials by posing as me. Again, being paranoid is often times a virtue.</p>

<h2>Low-priority and delegated domains</h2>

<p>What is Google?</p>

<p>A search engine you might say, but then you&rsquo;d find yourself thinking about the vast amount of products that they offer and quickly realize Google is a conglomerate that offers a growing number of products, starting with household names such as <a href="https://maps.google.com">Maps</a> to little-known services like <a href="https://keep.google.com">Keep</a> or <a href="https://play.google.com/store/apps/details?id=com.google.chromeremotedesktop&amp;hl=en">Chrome Remote Desktop</a>.</p>

<p>You might be wondering where we&rsquo;re headed, so let me clarify that right now: the organization you work for probably has more than one service it offers to customers, and those services might not really be related to each other. Some of them, for example, could be low-priority ones the company works on, such as a corporate or engineering blog, or a URL shortener your customers can use alongside other, far bigger services you offer. Often, these servics, sit on a domain such as <code>blog.example.com</code>.</p>

<p>&ldquo;What&rsquo;s the harm?&rdquo;, you say. I would counter that using your main domain to store low-priority services can harm your main business, and you could be in for a lot of trouble. Even though there&rsquo;s nothing inherently wrong with using subdomains to serve different services, you might want to think about offloading low-priority services to a different domain: the reasoning behind this choice is that, if the service running on the subdomain gets compromised, it will be much harder for attackers to escalate the exploit to your main service(s).</p>

<p>As we&rsquo;ve seen, cookies are often shared across multiple subdomains (by setting the <em>domain</em> attribute to something such as <code>*.example.com</code>, <code>.example.com</code> or simply <code>example.com</code>), so a scenario could play out where you install a popular blogging software such as WordPress on <code>engineering-blog.example.com</code> and run with it for a few months, forgetting to upgrade the software and install security patches as they get published. Later, an XSS in the blogging platform allows an attacker to dump all cookies present on your blog somewhere in his control, meaning that users who are logged onto your main service (<code>example.com</code>) who visit your engineering blog could have their credentials stolen. If you had kept the engineering blog on a separate domain, such as <code>engineering-blog.example.io</code>, that would not have been possible.</p>

<p>In a similar fashion, you might sometime need to delegate domain to external entities, such as email providers &mdash; this is a crucial step as it allows them to do their job properly. Sometimes, though, these providers might have security flaws on their interfaces as well, meaning that your users, on your domains, are going to be at risk. Evaluate if you could move these providers to a separate domain, as it could be helpful from a security perspective. Assess risks and goals and make a decision accordingly: as always, there&rsquo;s no silver bullet.</p>

<h2>OWASP</h2>

<p>Truth to be told, I would strongly recommend you to visit the OWASP website
and find out what they have to say:</p>

<ul>
<li>OWASP Cheat Sheet Series (<a href="https://cheatsheetseries.owasp.org">https://cheatsheetseries.owasp.org</a>): a collection of brief, practical information. You can find inspiring articles such as how to harden Docker containers or in what form should passwords be stored. It is a very technical and comprehensive list of guides that inspired the practical approach used in this chapter of WASEC</li>
<li>OWASP Developer Guide (<a href="https://github.com/OWASP/DevGuide">https://github.com/OWASP/DevGuide</a>): a guide on how to build secure applications. It is slowly being rewritten (the original version was pubished in 2005) but most of the content is still very useful</li>
<li>OWASP Testing Guide (<a href="https://www.owasp.org/index.php/OWASP_Testing_Guide_v4_Table_of_Contents">https://www.owasp.org/index.php/OWASP_Testing_Guide_v4_Table_of_Contents</a>): on how to test for security holes</li>
</ul>


<p>These are 3 very informative guides that should help you infusing resistance against attacks across your architecture, so I&rsquo;d strongly suggest going through them at som point in time. The Cheat Sheet Series, in particular, is extremely recommended.</p>

<h2>Hold the door</h2>

<p>Now that we went through a few common scenarios you might be faced with in your career, it&rsquo;s time to look at the type of attack that has garnered the most attention in recent years due to the widespread adoption of both cloud computing and IoT devices, allowing attackers to create armies of loyal soldiers ready to wreck havoc with our networks.</p>

<p>They are distributed, they are many, they grow in intensity each and every year and represent a constant treat to public-facing companies on the internet: it&rsquo;s time to look a DDOS attacks.</p>

<div class="series_nav">
  
  <div class="prev">
    <a href="https://odino.org/security-hardening-http-cookies/">Hardening HTTP cookies</a>
  </div>
  
  
</div>

]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Command line spinners: the magic tale of modern typewriters and terminal movies]]></title>
		
		<link href="https://odino.org/command-line-spinners-the-amazing-tale-of-modern-typewriters-and-digital-movies/"/>
		<updated>2019-09-22T06:54:00+00:00</updated>
		<id>https://odino.org/command-line-spinners-the-amazing-tale-of-modern-typewriters-and-digital-movies</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>In the latest release of ABS, we introduced a package manager
that fetches an archive from GitHub and installs it locally:
like in many other command-line interfaces, we decided to
add a &ldquo;loader&rdquo; to accompany the process, something that looks
like this:</p>

<p><video controls autobuffer playsinline><source src="https://odino.org/images/abs-installer-spinner.webm" type="video/webm" /></video></p>

<p>I want to take a moment to reflect on how we implemented
the simple spinner you see in the video, a process that derives
from typewriters and movies &mdash; let&rsquo;s get to it!</p>

<!-- more -->


<h2>We&rsquo;re going to see a picture???</h2>

<p><img class="right" src="https://upload.wikimedia.org/wikipedia/commons/d/dd/Muybridge_race_horse_animated.gif"></p>

<p>My wife usually refers to movies as pictures, something that leaves me
confused as I&rsquo;m not familiar with the term. But
when you think about it, we&rsquo;re often dealing with the same term in the
context of award winning movies &mdash; who won <em>best picture</em> at the last
<a href="https://en.wikipedia.org/wiki/Academy_Award_for_Best_Picture">academy awards</a>?</p>

<p>This happens because movies, in their essence, are simply a collection
of pictures stitched together, put <em>in motion</em> to give us the illusion
of something happening in front of our eyes while, in reality, it&rsquo;s just
a very quick passing of images, aided by sounds, that trick us into
believing a story is unfolding in front of our eyes.</p>

<p>Now, we said we wanted to create a command-line spinner, and you can
probably see where I&rsquo;m going already: we can borrow the very same concept
of motion picture and apply it to the command-line &mdash; have a few different
characters (pictures) that are swapped very quickly to give us the illusion
of an animation, kinda like this:</p>

<div style="border: 3px dotted black; padding: 50px; margin: 50px; text-align: center">
    <p>
        <span id="spinner">THIS SPINS</span>
    </p>
    <p>
        <a onClick="spin()">start</a> - <a onClick="unspin()">stop</a>
    </p>
    <script>
        let chars = ['⠋', '⠙', '⠹', '⠸', '⠼', '⠴', '⠦', '⠧', '⠇', '⠏']
        let cancel;
        function spin() {
            cancel && clearInterval(cancel)
            i = 0
            cancel = setInterval(_ => {
                if (i > chars.length - 1) {
                    i = 0
                }
                document.getElementById("spinner").innerHTML = chars[i]
                i++
            }, 50)
            
        }

        function unspin() {
            cancel && clearInterval(cancel)
        }
    </script>
</div>


<p>The list of characters, or &ldquo;pictures&rdquo;, we&rsquo;ve used in this sequence is
<code>['⠋', '⠙', '⠹', '⠸', '⠼', '⠴', '⠦', '⠧', '⠇', '⠏']</code>, but you can
try this one out yourself by playing around in the example below, where
you decide both the speed of the &ldquo;animation&rdquo;, as well as the characters
involved (I&rsquo;m using <a href="https://en.wikipedia.org/wiki/List_of_Unicode_characters#Box_Drawing">these unicode characters</a> in this example):</p>

<div style="border: 3px dotted black; padding: 50px; margin: 50px; text-align: center">
    <p>
        <span id="spinner_custom">THIS SPINS</span>
    </p>
    <p>
        <p>
            Enter the list of comma-separated characters:
        </p>
        <textarea id="chars">▛,▜,▟,▙</textarea>
    </p>
    <p>
        <p>
            Enter the speed at which characters rotate (in ms):
        </p>
        <input type="text" value="75" id="speed" />
    </p>
    <p>
        <a onClick="spin_custom()">start / update</a> - <a onClick="unspin_custom()">stop</a>
    </p>
    <script>
        let cancel_custom
        function spin_custom() {
            cancel_custom && clearInterval(cancel_custom)
            let chars = document.getElementById("chars").value.trim().split(",")
            i = 0
            cancel_custom = setInterval(_ => {
                if (i > chars.length - 1) {
                    i = 0
                }
                document.getElementById("spinner_custom").innerHTML = chars[i]
                i++
            }, document.getElementById("speed").value)
            
        }

        function unspin_custom() {
            cancel_custom && clearInterval(cancel_custom)
        }
    </script>
</div>


<p>Now, it should be very clear what the mechanics behind spinners
are, but we&rsquo;re still missing one key element &mdash; on the command line, how can
we &ldquo;override&rdquo; the previous characters? This is no HTML, where a simple
<code>document.getElementById("id").innerHTML = "myNewChar"</code> does the trick,
this is the CLI we&rsquo;re talking about.</p>

<p>This example illustrates the problem we&rsquo;re talking about:</p>

<p><video controls autobuffer playsinline><source src="https://odino.org/images/fail-spinner.webm" type="video/webm" /></video></p>

<p>Enter good old fashioned typewriters.</p>

<h2>Carriage returns</h2>

<p><img class="right" src="https://odino.org/images/typewriter.png"></p>

<p>Hey there! Have you ever set your hands on an old-school typewriter?</p>

<p>If you say &ldquo;it&rsquo;s all good&rdquo; rather than &ldquo;<a href="https://www.urbandictionary.com/define.php?term=its%20all%20gucci">it&rsquo;s all gucci</a>&rdquo;,
chances are you&rsquo;re old enough to have, at least, seen one of them. I&rsquo;ve
personally never used one, but a mechanism they use is the basis of how modern terminals
allow you to replace content inline.</p>

<p>This animation by <a href="https://dribbble.com/haleyshbeeb">Haley Schbeeb</a> gives you a little bit more context &mdash;
watch closely what happens when the typewriter reaches the end of the line:</p>

<p><img class="center" src="https://cdn.dribbble.com/users/1000955/screenshots/2993972/ezgif.com-gif-maker.gif"></p>

<p>It &ldquo;resets&rdquo;, right? This mechanism is called &ldquo;carriage return&rdquo; and it&rsquo;s best explained by
Wikipedia:</p>

<blockquote><p>Originally, the term &#8220;carriage return&#8221; referred to a mechanism or lever on a typewriter. For machines where the type element was fixed and the paper held in a moving carriage, this lever was operated after typing a line of text to cause the carriage to return to the far right so the type element would be aligned to the left side of the paper. The lever would also usually feed the paper to advance to the next line.</p><footer><strong>Wikipedia</strong> <cite><a href='https://en.wikipedia.org/wiki/Carriage_return'>en.wikipedia.org/wiki/&hellip;</a></cite></footer></blockquote>


<p>Now, typewriters need to advance one line (&ldquo;line feed&rdquo;) as well as reset their
position to the far left of the paper (&ldquo;carriage return&rdquo;). The same exact mechanisms can
be applied to your terminal too: these two operations are done through the characters
<code>\n</code> and <code>\r</code>.
Nowadays, most systems consider <code>\n</code> the equivalent of <code>\n\r</code>,
but understanding how these characters work is important to fully grasp how to
replace a character in your terminal: <code>\n</code> will &ldquo;move the cursor down one line&rdquo;,
while <code>\r</code> will move it all the way back to the starting position of the current
line.</p>

<p>With this understanding, we will now be able to create a CLI spinner using this
simple loop:</p>

<ul>
<li>print character <code>X</code></li>
<li>print a carriage return (<code>\r</code>): the cursor is moved back to the beginning of the line</li>
<li>print character <code>Y</code>, it will override character <code>X</code> since they&rsquo;re printed at the same position</li>
</ul>


<h2>Put it altogether</h2>

<p>The simple example I&rsquo;m going to use is written in Go, but you could build it
in virtually any programming language. What we need to do is to simply start with a
list of characters, then print one of them at a time, followed by a carriage
return, so that the next character will be printed in place of the current one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>    <span class="s">&quot;time&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">chars</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;⠋&quot;</span><span class="p">,</span> <span class="s">&quot;⠙&quot;</span><span class="p">,</span> <span class="s">&quot;⠹&quot;</span><span class="p">,</span> <span class="s">&quot;⠸&quot;</span><span class="p">,</span> <span class="s">&quot;⠼&quot;</span><span class="p">,</span> <span class="s">&quot;⠴&quot;</span><span class="p">,</span> <span class="s">&quot;⠦&quot;</span><span class="p">,</span> <span class="s">&quot;⠧&quot;</span><span class="p">,</span> <span class="s">&quot;⠇&quot;</span><span class="p">,</span> <span class="s">&quot;⠏&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">for</span> <span class="kc">true</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">i</span> <span class="p">&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">chars</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">i</span> <span class="p">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%s\r&quot;</span><span class="p">,</span> <span class="nx">chars</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
</span><span class='line'>    <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">i</span><span class="o">++</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the result is this beauty:</p>

<p><video controls autobuffer playsinline><source src="https://odino.org/images/go-spinner.webm" type="video/webm" /></video></p>

<p>Adios!</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[My last day at Namshi: goodbye folks!]]></title>
		
		<link href="https://odino.org/goodbye-namshi/"/>
		<updated>2019-09-15T19:42:00+00:00</updated>
		<id>https://odino.org/goodbye-namshi</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>Today, I wave goodbye to the company I supported for the past 7 and
a half years, Namshi.</p>

<!-- more -->


<p>It&rsquo;s with mixed feeling that I write this blog post, as it&rsquo;s been
a hell of a ride and I recognize I was privileged to get on board
just at the right time. It is a truly
bittersweet moment to leave behind something you&rsquo;ve dedicate so much
to, but I do feel <em>my time is now</em>: after all of these years I long for a change
of scenery, (somewhat) different challenges and new environment
to flourish in. It won&rsquo;t be easy to replicate what we&rsquo;ve done over
the past years, but the least I can do is to try to spread all the
good I&rsquo;ve experienced.</p>

<p>To all my teammates, I thank you for striving to make this
happen: we wouldn&rsquo;t have come anywhere near to where we are right now
if it wasn&rsquo;t for the collective team effort we put over the years.
This is a &ldquo;thank you&rdquo; that spans 7 years of life, so it goes to the
the current team as much as it goes to the ones who were there in
2012, when it was real wild. From the warehouse to HQ, your work
was impressive, and it&rsquo;s a great story in the region.</p>

<p>I want to take a moment to mention <a href="https://tech.namshi.io/team/">the folks
in the tech team</a>, as their loyalty and
effort have ignited my days for years &mdash; if it wasn&rsquo;t for what
my teammates have been putting in day in and day out, I don&rsquo;t think
I could have lasted this long.</p>

<p>Among all of the positive qualities that this tech team developed,
there&rsquo;s one I want to call out: the <strong>generosity</strong> that is embedded in this team&rsquo;s
DNA is what is going to make me proud for years to come, as how much
each and every individual strives to help their teammates is something
I haven&rsquo;t experienced before. I am truly happy to say that
we are a team of great software engineers but, way before that,
great human beings.</p>

<p>As for myself, I will take a break, and focus on the next crazy ride
right after. I&rsquo;m not planning to get back to work for at least another couple
of months, and I haven&rsquo;t finalized anything yet. What I can say, though,
is that I&rsquo;m not planning to sit down and discuss new opportunities as I&rsquo;ve
already done that and have shortlisted my options. I&rsquo;m excited about this
ambiguity and, more importantly, I&rsquo;m excited about spending my next
couple of months relaxing, recharging my batteries and waiting to see
the future unfold in front of me.</p>

<p>Bye folks, it&rsquo;s been a pleasure.</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[ABS 1.7.0: ctrl+r and other optimizations]]></title>
		
		<link href="https://odino.org/abs-1-dot-7-0-ctrl-plus-r-and-other-optimizations/"/>
		<updated>2019-08-30T19:15:00+00:00</updated>
		<id>https://odino.org/abs-1-dot-7-0-ctrl-plus-r-and-other-optimizations</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>A few days ago I released a new minor version of the ABS
programming language, <a href="https://github.com/abs-lang/abs/releases/tag/1.7.0">1.7.0</a>,
which adds some syntactic sugar as well as improvments to
the REPL &mdash; let&rsquo;s get to them!</p>

<p><img class="center" src="https://odino.org/images/abs-1.7.png"></p>

<!-- more -->


<h2>Reverse search in the REPL through ctrl+r</h2>

<p>You can type something in the REPL and, by pressing
<code>ctrl+r</code>, ABS will try to find the last command that
was executed that matches what you typed.</p>

<p>See it in action:</p>

<p><a href="https://asciinema.org/a/0yT7ZRCeIwGAYNRg5hmoykyoe"><img src="https://asciinema.org/a/0yT7ZRCeIwGAYNRg5hmoykyoe.svg" alt="asciicast" /></a></p>

<p>If you press <code>ctrl+r</code> multiple times, the REPL will
walk its way back into the history to find the previous
command matching your input, until it reaches the end
of the history.</p>

<p>This feature has been implemented thanks to some improvements
in <a href="https://github.com/c-bata/go-prompt">go-prompt</a>, so hats off to
<a href="https://github.com/c-bata">Masashi Shibata</a> for helping out!</p>

<h2>Number abbreviations</h2>

<p>Easily my favorite, this feature allows you to append a suffix to a
number in order to specify the &ldquo;order of magnitude&rdquo; of the number itself.
Confused? It&rsquo;s actually quite simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>1k <span class="c"># 1000 - thousand</span>
</span><span class='line'>1m <span class="c"># 1000000 - million</span>
</span><span class='line'>1b <span class="c"># 1000000000 - billion</span>
</span><span class='line'>1t <span class="c"># 1000000000000 - trillion</span>
</span></code></pre></td></tr></table></div></figure>


<p>Suffixes are case-insensitive, so you can express <code>1000000</code>
with either <code>1m</code> or <code>1M</code>.</p>

<h2>Improvements to some builtin functions</h2>

<p>We&rsquo;ve decided to ease using some of the standard functions:
you can now, for example, print a message before exiting
a script directly through the <code>exit</code> function.</p>

<p>Your code would have previously looked like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">echo</span><span class="p">(</span><span class="s">&quot;an error occurred, goodbye!&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>while now you can simply do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;an error occurred, goodbye!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Similarly, we made it easier to use the <code>replace</code> function on
strings: you can now omit the last argument (number of replacements),
with its default value being <code>-1</code> (no limit):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="s2">&quot;aaa&quot;</span>.replace<span class="o">(</span><span class="s2">&quot;a&quot;</span>, <span class="s2">&quot;b&quot;</span>, -1<span class="o">)</span> <span class="c"># &quot;bbb&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># is now the same as</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;aaa&quot;</span>.replace<span class="o">(</span><span class="s2">&quot;a&quot;</span>, <span class="s2">&quot;b&quot;</span><span class="o">)</span> <span class="c"># &quot;bbb&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and you can now also specify a list of characters to replace:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="s2">&quot;a_0&quot;</span>.replace<span class="o">([</span><span class="s2">&quot;a&quot;</span>, <span class="s2">&quot;_&quot;</span>, <span class="s2">&quot;0&quot;</span><span class="o">]</span>, <span class="s2">&quot;b&quot;</span><span class="o">)</span> <span class="c"># &quot;bbb&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Now what?</h2>

<p>Install ABS with a simple one-liner:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bash &lt;<span class="o">(</span>curl https://www.abs-lang.org/installer.sh<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip;and start scripting like it&rsquo;s 2019!</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[ABS 1.6.0: the convenience of index ranges and default return values]]></title>
		
		<link href="https://odino.org/abs-1-dot-6-0-the-convenience-of-index-ranges-and-default-return-values/"/>
		<updated>2019-08-18T18:15:00+00:00</updated>
		<id>https://odino.org/abs-1-dot-6-0-the-convenience-of-index-ranges-and-default-return-values</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>Here we are with a new release of ABS, the elegant programming language
for all of your scripting needs!</p>

<p><img class="center" src="https://odino.org/images/abs-1.6.png"></p>

<p>Even though small, 1.6 (with <a href="https://github.com/abs-lang/abs/releases/tag/1.6.0">1.6.0</a>
and <a href="https://github.com/abs-lang/abs/releases/tag/1.6.1">1.6.1</a>) introduces a
couple interesting features, so let&rsquo;s check them out!</p>

<!-- more -->


<h2>Index ranges</h2>

<p>You can now access ranges within strings and arrays by using the
popular <code>[start:end]</code> syntax: <code>[1,2,3,4][0:2]</code> will return <code>[1,2]</code>.</p>

<p>Start and end can be ommitted &mdash; you could simplify the expression
above with <code>[1,2,3,4][:2]</code>.</p>

<h2>Default return values</h2>

<p>You can now simply use a <code>return;</code> at the end of a function, and
it will return the default value <code>null</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">fn</span> <span class="p">=</span> <span class="nx">f</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">echo</span><span class="p">(</span><span class="nx">fn</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Deprecation of $(&hellip;)</h2>

<p>If you&rsquo;ve followed ABS since its initial release, chances are you first
used system commands through the <code>$(command)</code> syntax: we&rsquo;ve now deprecated
it and make sure the documentation reflects the fact that <code>`command`</code>
is the standard, preferred way to run commands.</p>

<h2>Now what?</h2>

<p>Install ABS with a simple one-liner:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">bash</span> <span class="p">&lt;(</span><span class="nx">curl</span> <span class="nx">https</span><span class="p">:</span><span class="c1">//www.abs-lang.org/installer.sh)</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip;and start scripting like it&rsquo;s 2019!</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[The ABS playground: run ABS code directly in your browser (WHOOOOP!)]]></title>
		
		<link href="https://odino.org/the-abs-playground-run-abs-code-directly-in-your-browser-whoooop/"/>
		<updated>2019-08-17T18:45:00+00:00</updated>
		<id>https://odino.org/the-abs-playground-run-abs-code-directly-in-your-browser-whoooop</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p><img class="right" src="https://odino.org/images/wasm.png"></p>

<p>Remember the last time you thought &ldquo;ough, JavaScript&rdquo;?</p>

<p>Well, that&rsquo;s me every other day: I love JS for
its flexibility and dynamism, but I also sometimes find
it painful to deal with, especially in some
specific programming contexts.</p>

<p>If you, like me, hoped to be able to write
something other than JavaScript in order to get
stuff done on the web, chances are you bumbed
into <a href="https://en.wikipedia.org/wiki/WebAssembly">WebAssembly</a> (abbr. WASM),
and considered it your holy grail. WASM
is a portable binary format that&rsquo;s been
<a href="https://caniuse.com/#search=wasm">implemented by all major browsers</a> and
allows other languages to be compiled for the
web.</p>

<p>Why is that important? Well, that&rsquo;s the key
of how I managed to run an ABS playground
(a code runner) on the browser.</p>

<!-- more -->


<h2>The original issue</h2>

<p>One of ABS&#8217; main contributors, Ming, <a href="https://github.com/abs-lang/abs/issues/236">smartly
suggested</a> that it would be interesting to let
users play around with ABS without having it
installed on their systems.</p>

<p>My first thought was to replicate the <a href="https://play.golang.org/">Go playground</a>,
but that would have meant setting up a server-side
code-runner, and that would have required
more time (maintenance) and money (server cost)
that we had on hand.</p>

<p>We abandoned the idea of a code runner for a while,
until we thought of something creative&hellip;</p>

<h2>WASM to the rescue</h2>

<p><a href="https://github.com/golang/go/wiki/WebAssembly">Go recently added support for WASM</a>
as one of its compilation targets, meaning you can
run Go applications on the browser &mdash; you just
need a simple <code>GOOS=js GOARCH=wasm go build -o script.js script.go</code>
and you&rsquo;re set with an executable that can run within the
browser.</p>

<p>I then thought: what if we could compile the ABS interpreter,
which is purely written in Go, to WASM?</p>

<p>The result is a simple <a href="https://github.com/abs-lang/abs/blob/4112e3ef13b595ef39e55c4be8d5314004037d62/js/js.go">&ldquo;JS&rdquo; distribution of the ABS
interpreter</a>,
50 lines of code that bring ABS to the browser!</p>

<p>The downside of compiling Go into WASM is that the
binaries are a bit heavy (<a href="https://github.com/abs-lang/abs/blob/master/docs/abs.wasm">ABS is 4.3 MB</a>),
but, considering that this is more of a proof-of-concept
than a serious attempt to run ABS in the browser, I
can&rsquo;t really complain.</p>

<p>Armed with a distribution of the ABS interpreter that
can run within your browser, I then setup a <a href="https://raw.githubusercontent.com/abs-lang/abs/4112e3ef13b595ef39e55c4be8d5314004037d62/docs/playground.md">silly HTML
page in our docs</a>
that would load the WASM binary and give you a textboxt
to play around, which brings me to the big announcement&hellip;</p>

<h2>Welcome to the ABS playground!</h2>

<p>Without further ado, please head over to
<a href="https://www.abs-lang.org/playground">www.abs-lang.org/playground</a>:</p>

<p><img class="center" src="https://odino.org/images/abs-playground.png"></p>

<p>You can try most of ABS&#8217; features directly in
the web editor: simply write some code, hit
<code>Ctrl+Enter</code> and see the result pop in front
of your eyes!</p>

<p>Let me know if you have any feedback!</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Playing with QuickJS]]></title>
		
		<link href="https://odino.org/playing-with-quickjs/"/>
		<updated>2019-07-23T12:14:00+00:00</updated>
		<id>https://odino.org/playing-with-quickjs</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>A few days ago <a href="https://bellard.org/">Fabrice Bellard</a> released
<a href="https://bellard.org/quickjs/">QuickJS</a>, a small JS engine that
targets embedded systems.</p>

<p>Curious to give it a try, I downloaded and set it up on my system
to try and understand this incredible piece of software.</p>

<!-- more -->


<h2>Installation</h2>

<p>Setting up QuickJS is <em>dead</em> simple:</p>

<ul>
<li>clone one of the Github mirrors with <code>git clone git@github.com:ldarren/QuickJS.git</code></li>
<li><code>cd QuickJS</code></li>
<li><code>make</code></li>
</ul>


<p>&hellip;and that&rsquo;s it: the installation will leave you with a few
interesting binaries, the most interesting one being <code>qjsc</code>,
the compiler you can use to create executables out of your JS
code.</p>

<h2>Trying it out</h2>

<p>Let&rsquo;s try to write a simple script that calculates powersets
for a given list:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">powerSet</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">str</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>       <span class="nx">obj</span><span class="p">[</span><span class="nx">str</span><span class="p">[</span><span class="nx">i</span><span class="p">]]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">[[]];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">array</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>       <span class="kd">var</span> <span class="nx">len</span> <span class="o">=</span> <span class="nx">result</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">x</span> <span class="o">&lt;</span> <span class="nx">len</span><span class="p">;</span> <span class="nx">x</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>         <span class="kd">let</span> <span class="nx">set</span> <span class="o">=</span> <span class="nx">result</span><span class="p">[</span><span class="nx">x</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">array</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
</span><span class='line'>         <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">set</span><span class="p">)</span>
</span><span class='line'>         <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">set</span><span class="p">)</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">powerSet</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>then we can compile it down to a binary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">.</span><span class="o">/</span><span class="nx">qjsc</span> <span class="o">-</span><span class="nx">o</span> <span class="nx">powerset</span> <span class="nx">powerset</span><span class="p">.</span><span class="nx">js</span>
</span></code></pre></td></tr></table></div></figure>


<p>and execute it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span> <span class="p">.</span><span class="o">/</span><span class="nx">powerset</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="mi">1</span><span class="p">,</span><span class="mi">2</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="mi">1</span><span class="p">,</span><span class="mi">3</span>
</span><span class='line'><span class="mi">2</span><span class="p">,</span><span class="mi">3</span>
</span><span class='line'><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span>
</span><span class='line'><span class="mi">4</span>
</span><span class='line'><span class="mi">1</span><span class="p">,</span><span class="mi">4</span>
</span><span class='line'><span class="mi">2</span><span class="p">,</span><span class="mi">4</span>
</span><span class='line'><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span>
</span><span class='line'><span class="mi">3</span><span class="p">,</span><span class="mi">4</span>
</span><span class='line'><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span>
</span><span class='line'><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span>
</span><span class='line'><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it &mdash; quite of a breeze!</p>

<h2>Where&rsquo;s the catch?</h2>

<p>Well, QuickJS&#8217; standard library is fairly limited at the moment,
meaning you won&rsquo;t be able to use most NPM modules or the NodeJS standard
library since it&rsquo;s not really implemented: QuickJS simply implements
the ES2019 specification, which doesn&rsquo;t include any kind of standard
item you might be used to, like <code>require</code> or <code>process</code>.</p>

<p>The full <a href="https://bellard.org/quickjs/quickjs.html">documentation for QuickJS is available here</a>,
and you will notice that the only <a href="https://bellard.org/quickjs/quickjs.html#Standard-library">standard objects you can work with</a>
are <code>std</code> and <code>os</code> &mdash; very limited when compared to other, fully-bloated
engines but useful nevertheless (again, you have to think of QuickJS as an
engine to be embedded, and not something you can use to write your next
web app).</p>

<p>Still, quite an impressive piece of work!</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[ABS 1.5.0: file writers have landed!]]></title>
		
		<link href="https://odino.org/abs-1-dot-5-0-file-writers-have-landed/"/>
		<updated>2019-07-16T19:00:00+00:00</updated>
		<id>https://odino.org/abs-1-dot-5-0-file-writers-have-landed</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>A few hours ago I released a new minor version of the ABS programming
language, <a href="https://github.com/abs-lang/abs/releases/tag/1.5.0">1.5.0</a>,
which includes a couple of interesting features &mdash; let&rsquo;s get to them!</p>

<p><img class="center" src="https://odino.org/images/abs-15-intro.png"></p>

<!-- more -->


<h2>File writers</h2>

<p>Probably one of the most exciting things coming out of this release
are file writers: <code>&gt;</code> and <code>&gt;&gt;</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">for</span> <span class="nx">x</span> <span class="nx">in</span> <span class="mf">1..3</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">x</span> <span class="o">&gt;&gt;</span> <span class="s">&quot;file.txt&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="s">`cat file.txt`</span> <span class="c1">// 1\n2\n3</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="nx">x</span> <span class="nx">in</span> <span class="mf">1..3</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">x</span> <span class="p">&gt;</span> <span class="s">&quot;file.txt&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="s">`cat file.txt`</span> <span class="c1">// 3</span>
</span></code></pre></td></tr></table></div></figure>


<p>These operators work as file writers when both the left and right
arguments are strings, and proceed to either truncate and write
(<code>&gt;</code>) or append (<code>&gt;&gt;</code>).</p>

<h2>[].unique()</h2>

<p>Arrays now have a <code>.unique()</code> method, used to filter out
duplicated elements:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">].</span><span class="nx">unique</span><span class="p">()</span> <span class="c1">// [1, 2, 3]</span>
</span></code></pre></td></tr></table></div></figure>


<p>An element is considered duplicate if both its type and string
representation match:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;1&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">].</span><span class="nx">unique</span><span class="p">()</span> <span class="c1">// [1, &quot;1&quot;, 2]</span>
</span></code></pre></td></tr></table></div></figure>


<p>For example, different hashes with the same content are
considered duplicates:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">a</span> <span class="p">=</span> <span class="p">{</span><span class="s">&quot;key&quot;</span><span class="p">:</span> <span class="s">&quot;value&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nx">b</span> <span class="p">=</span> <span class="p">{</span><span class="s">&quot;key&quot;</span><span class="p">:</span> <span class="s">&quot;value&quot;</span><span class="p">}</span>
</span><span class='line'><span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">].</span><span class="nx">unique</span><span class="p">()</span> <span class="c1">// [{&quot;key&quot;: &quot;value&quot;}]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Break and continue in for loops</h2>

<p>We finally implemented <code>break</code> and <code>continue</code>
within for loops: earlier on you could use <code>return</code>
to exit a loop but it always felt a tad awkward &mdash;
with this release this has been fixed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">x</span> <span class="p">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="nx">v</span> <span class="nx">in</span> <span class="mf">1..10</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">v</span> <span class="p">&lt;</span> <span class="mi">10</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">continue</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">x</span> <span class="o">+=</span> <span class="nx">v</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">x</span> <span class="c1">// 10</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="nx">v</span> <span class="nx">in</span> <span class="mf">1..10</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">v</span> <span class="p">&gt;</span> <span class="mi">1</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">x</span> <span class="o">+=</span> <span class="nx">v</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">x</span> <span class="c1">// 11</span>
</span></code></pre></td></tr></table></div></figure>


<h2>for..in stackoverflow</h2>

<p>We also fixed a bug that resulted in a stack overflow when looping
a high number of times in a <code>for..in</code> loop:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="k">for </span>x in 1..10_000_000 <span class="o">{</span> 1 &amp; 2 <span class="o">}</span>
</span><span class='line'>runtime: goroutine stack exceeds 1000000000-byte limit
</span><span class='line'>fatal error: stack overflow
</span></code></pre></td></tr></table></div></figure>


<p>This has been fixed. As a bonus point, <code>for..in</code> loops are
also significantly faster with this change (especially noticeable
on larger loops, at around 30% faster):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat <span class="k">for</span>-benchmark.abs
</span><span class='line'><span class="nv">start</span> <span class="o">=</span> <span class="sb">`</span><span class="nb">echo</span> <span class="k">$(($(</span>date +%s%N<span class="k">)</span><span class="o">/</span><span class="m">1000000</span><span class="k">))</span><span class="sb">`</span>
</span><span class='line'><span class="k">for </span>x in 1..1_000_000 <span class="o">{</span> 1 &amp; 2 <span class="o">}</span>
</span><span class='line'><span class="nv">end</span> <span class="o">=</span> <span class="sb">`</span><span class="nb">echo</span> <span class="k">$(($(</span>date +%s%N<span class="k">)</span><span class="o">/</span><span class="m">1000000</span><span class="k">))</span><span class="sb">`</span>
</span><span class='line'><span class="nb">echo</span><span class="o">(</span>end.int<span class="o">()</span> - start.int<span class="o">())</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>abs1.4 <span class="k">for</span>-benchmark.abs
</span><span class='line'>820
</span><span class='line'><span class="nv">$ </span>abs1.5 <span class="k">for</span>-benchmark.abs
</span><span class='line'>546
</span></code></pre></td></tr></table></div></figure>


<h2>Now what?</h2>

<p>Install ABS with a simple one-liner:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bash &lt;<span class="o">(</span>curl https://www.abs-lang.org/installer.sh<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip;and start scripting like it&rsquo;s 2019!</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[ABS 1.4.0: welcome unicode!]]></title>
		
		<link href="https://odino.org/abs-1-dot-4-0-welcome-unicode/"/>
		<updated>2019-07-15T19:00:00+00:00</updated>
		<id>https://odino.org/abs-1-dot-4-0-welcome-unicode</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>A few weeks ago I released version 1.4.0 (and 1.4.1, with an additional bugfix)
of the ABS programming language: in this post, I&rsquo;d like to explain everything
major that made it in this new minor release.</p>

<p><img class="center" src="https://odino.org/images/abs-1.4.png"></p>

<!-- more -->


<h2>ABS ❤ unicode</h2>

<p>We have implemented unicode in ABS: you can now use both
unicode letters in variable names as well as any
unicode character in strings.</p>

<p>For example, you can output any code point within a string:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">echo</span><span class="p">(</span><span class="s">&quot;I ❤ ABS&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">echo</span><span class="p">(</span><span class="s">&quot;Hello 世界!&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>as well as use <a href="https://www.compart.com/en/unicode/category">unicode letters</a> in variable names:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="err">ȼ</span> <span class="p">=</span> <span class="s">&quot;this is a weird c&quot;</span>
</span><span class='line'><span class="nx">echo</span><span class="p">(</span><span class="err">ȼ</span><span class="p">)</span> <span class="c1">// &quot;this is a weird c&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that only unicode letters (category <code>L</code>) are allowed as variable
names, and using any other character will result in a parsing error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="err">⧐</span>  <span class="err">❤</span> <span class="p">=</span> <span class="nx">a</span>
</span><span class='line'> <span class="nx">parser</span> <span class="nx">errors</span><span class="p">:</span>
</span><span class='line'>  <span class="nx">Illegal</span> <span class="nx">token</span> <span class="sc">&#39;❤&#39;</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">1</span><span class="p">]</span>  <span class="err">❤</span> <span class="p">=</span> <span class="nx">a</span>
</span></code></pre></td></tr></table></div></figure>


<h2>eval(&hellip;)</h2>

<p>Oh, good old-school <code>eval</code>!</p>

<p>This function does exactly what you&rsquo;d expect it to do, as it executes
the ABS code passed as its argument:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">test</span> <span class="p">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="nx">eval</span><span class="p">(</span><span class="s">&quot;test.len()&quot;</span><span class="p">)</span> <span class="c1">// 4</span>
</span><span class='line'><span class="nx">eval</span><span class="p">(</span><span class="s">&quot;test.len()&quot;</span><span class="p">).</span><span class="kd">type</span><span class="p">()</span> <span class="c1">// NUMBER</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Digits in variable names</h2>

<p>We now support digits in variable names:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">v4r14bl3</span> <span class="p">=</span> <span class="s">&quot;I got numbers&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We might expand this feature later on to include unicode numbers,
if the community feels like this would be a useful feature (haven&rsquo;t
heard of any use case so far).</p>

<h2>Numeric separators</h2>

<p>Following <a href="https://www.python.org/dev/peps/pep-0515/">Python 3.6</a>
and <a href="https://github.com/tc39/proposal-numeric-separator">JS on Chrome 75</a>,
we&rsquo;ve decided to help with readability on large numbers and allow
<code>_</code> as a numeric separator:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// before</span>
</span><span class='line'><span class="nx">ten_grands</span>  <span class="p">=</span> <span class="mi">10000</span>
</span><span class='line'><span class="nx">ten_yards</span>   <span class="p">=</span> <span class="mi">10000000</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// now you can...</span>
</span><span class='line'><span class="nx">ten_grands</span>  <span class="p">=</span> <span class="mi">10</span><span class="nx">_000</span>
</span><span class='line'><span class="nx">ten_yards</span>   <span class="p">=</span> <span class="mi">10</span><span class="nx">_000_000</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Panic without a terminal</h2>

<p>We fixed a panic when you try to run the ABS REPL without
having a terminal attached (for example, during a Docker
build, or when piping a bare <code>abs</code> command); ABS will now
explicitely let you know what the problem is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="err">$</span> <span class="nx">abs</span> <span class="p">&gt;</span> <span class="nx">file</span><span class="p">.</span><span class="nx">txt</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span> <span class="nx">echo</span> <span class="err">$?</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span> <span class="nx">cat</span> <span class="nx">file</span><span class="p">.</span><span class="nx">txt</span>
</span><span class='line'><span class="nx">Hello</span> <span class="nx">alex</span><span class="p">,</span> <span class="nx">welcome</span> <span class="nx">to</span> <span class="nx">the</span> <span class="nx">ABS</span> <span class="p">(</span><span class="mf">1.4.1</span><span class="p">)</span> <span class="nx">programming</span> <span class="nx">language</span><span class="p">!</span>
</span><span class='line'><span class="nx">Type</span> <span class="err">&#39;</span><span class="nx">quit</span><span class="err">&#39;</span> <span class="nx">when</span> <span class="nx">you</span><span class="err">&#39;</span><span class="nx">re</span> <span class="nx">done</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">help</span><span class="err">&#39;</span> <span class="k">if</span> <span class="nx">you</span> <span class="nx">get</span> <span class="nx">lost</span><span class="p">!</span>
</span><span class='line'><span class="nx">unable</span> <span class="nx">to</span> <span class="nx">start</span> <span class="nx">the</span> <span class="nx">ABS</span> <span class="nx">repl</span> <span class="p">(</span><span class="nx">no</span> <span class="nx">terminal</span> <span class="nx">detected</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Panic when converting empty strings to JSON</h2>

<p>We fixed a pnic when trying to convert an empty string
to JSON, which will now convert to an empty string:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="s">&quot;&quot;</span><span class="p">.</span><span class="nx">json</span><span class="p">()</span> <span class="c1">// &quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Fixes to JSON conversion of hashes</h2>

<p>You can easily convert an hash to JSON through the
builtin <code>.str   ()</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="err">$</span> <span class="nx">key</span> <span class="p">=</span> <span class="s">&quot;hello&quot;</span>
</span><span class='line'><span class="err">$</span> <span class="nx">value</span> <span class="p">=</span> <span class="s">&quot;world&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span> <span class="nx">hash</span> <span class="p">=</span> <span class="p">{</span><span class="nx">key</span><span class="p">:</span> <span class="nx">value</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span> <span class="nx">hash</span><span class="p">.</span><span class="nx">str</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span><span class="s">&quot;hello&quot;</span><span class="p">:</span> <span class="s">&quot;world&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There was an issue when converting keys or values with
double quotes in them, but it has since been fixed.
Code such as <code>'{"x": "\"y"}'.json().x</code> will now work
seamlessly.</p>

<h2>Go modules</h2>

<p>We&rsquo;ve migrated the codebase to <a href="https://github.com/golang/go/wiki/Modules">Go modules</a>:
even though this might not be a ground-breaking change, it should
help those who develop the ABS core, allowing no conflicts when it
comes to dependencies.</p>

<h2>Now what?</h2>

<p>Install ABS with a simple one-liner:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">bash</span> <span class="p">&lt;(</span><span class="nx">curl</span> <span class="nx">https</span><span class="p">:</span><span class="c1">//www.abs-lang.org/installer.sh)</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip;and start scripting like it&rsquo;s 2019!</p>

<p>PS: Again, many thanks to <a href="https://github.com/mingwho">Ming</a>,
who&rsquo;s been taking a larger role as the weeks went by. Without her,
many of the stuff included in 1.4 wouldn&rsquo;t be possible!</p>

<p>PPS: <a href="https://github.com/abs-lang/abs/milestone/12">1.5.0 is already well underway</a> &mdash; expect
it in the next few days. We&rsquo;ll be introducing extremely
interesting features such as file writers, so it&rsquo;s going
to be an exciting release!</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[ABS 1.3.2: making ABS faster with a simple fix]]></title>
		
		<link href="https://odino.org/abs-1-dot-3-2-making-abs-faster-with-a-simple-fix/"/>
		<updated>2019-06-05T20:36:00+00:00</updated>
		<id>https://odino.org/abs-1-dot-3-2-making-abs-faster-with-a-simple-fix</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>Hi there! Just a quick post to announce a bugfix release of the ABS programming
language: <a href="https://github.com/abs-lang/abs/releases/tag/1.3.2">1.3.2</a> fixes a simple yet important performance bug dealing
with short-circuit evaluation.</p>

<p><img class="center" src="https://odino.org/images/abs132.png"></p>

<!-- more -->


<p>Short-circuiting is the amazing property some languages assign
to boolean operators (eg. <code>&amp;&amp;</code> or <code>||</code>): if the first parameter
in the expression is sufficient to determine the end value of
the expression, the second value is not evaluated at all.</p>

<p>Take a look at this example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">false</span> <span class="o">&amp;&amp;</span> sleep<span class="o">(</span>a_really_long_time<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You wouldn&rsquo;t expect the script to <code>sleep</code> since the first parameter
in the expression is already falsy, thus the expression can never be
truthy.</p>

<p>What about:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">true</span> <span class="o">||</span> sleep<span class="o">(</span>a_really_long_time<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Same thing, easy peasy.</p>

<p>Even more important, short-circuiting can be really useful in order
to access a property when not sure whether it exists:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># we don&#39;t know whether X is null or what</span>
</span><span class='line'>x <span class="o">&amp;&amp;</span> x.property
</span></code></pre></td></tr></table></div></figure>


<p>Compare that to what you&rsquo;d usually have to write:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># we don&#39;t know whether X is null or what</span>
</span><span class='line'><span class="k">if </span>x <span class="o">{</span>
</span><span class='line'>    <span class="k">return </span>null
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return </span>x.property
</span></code></pre></td></tr></table></div></figure>


<p>You might be wondering what does all of this have to do with ABS:
well, we were supposed to have fully working short-circuiting but,
as it turns out, there was a bug preventing this from working. Your
code would work and run successfully, but it would always evaluate
all the arguments of an expression, even if it short-circuited. In
some cases (like when using short-circuiting for accessing properties)
your code would crash &mdash; defeating the whole purpose of short-circuiting.</p>

<p>Luckily, <a href="https://github.com/mingwho">Ming</a> fixed this in <a href="https://github.com/abs-lang/abs/pull/227">#227</a>
and the fix got backported to the 1.3.x branch: <a href="https://github.com/abs-lang/abs/releases/tag/1.3.2">1.3.2 is served!</a></p>

<h2>Now what?</h2>

<p>Install ABS with a simple one-liner:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bash &lt;<span class="o">(</span>curl https://www.abs-lang.org/installer.sh<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip;and start scripting like it&rsquo;s 2019!</p>
]]>
		</content>
	</entry>
	
</feed>