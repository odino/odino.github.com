<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title><![CDATA[Alessandro Nadalin]]></title>
	<link href="http://odino.org/atom.xml" rel="self"/>
	<link href="http://odino.org/"/>
	<updated>2014-02-28T21:10:50-05:00</updated>
	<id>http://odino.org/</id>
	<author>
		<name><![CDATA[Alessandro Nadalin]]></name>
		
	</author>
	<generator uri="http://octopress.org/">Octopress</generator>
	
	<entry>
		
			<title type="html"><![CDATA[Service Oriented Architectures with Symfony2]]></title>
		
		<link href="http://odino.org/service-oriented-architectures-with-symfony2/"/>
		<updated>2014-02-28T14:31:00-05:00</updated>
		<id>http://odino.org/service-oriented-architectures-with-symfony2</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>Last talk for me in the cold lands of Canada: today it was Symfony2&rsquo;s
turn and how to integrate it with your SOA.</p>

<!-- more -->


<p>As usual, for those who missed it, here are the slides:</p>

<div class="slideshare" id="__ss_31775384"><iframe src="http://www.slideshare.net/slideshow/embed_code/31775384 " width="850" height="650" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe></div>

]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[6 takeways from the second day of ConFoo]]></title>
		
		<link href="http://odino.org/6-takeways-from-the-second-day-of-confoo/"/>
		<updated>2014-02-27T18:27:00-05:00</updated>
		<id>http://odino.org/6-takeways-from-the-second-day-of-confoo</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>Today it was an interesting day here at ConFoo, and I&rsquo;ve
seen some good content dealing with web performances.</p>

<!-- more -->


<h2>Don&rsquo;t pollute domain models with specifications</h2>

<p><img class="right" src="http://odino.org/images/odino-confoo-2.jpg"></p>

<p>During a very good talk I was waiting for since the conference started,
<a href="http://twitter.com/mathiasverraes">Mathias Verrase</a> has been talking
about DDD and domain models and has shown to the audience how you
should not pollute them with specifications.</p>

<p>The proposed approach introduces a bit more verbosity with the advantage
of having cleaner models that reflect your domain.</p>

<p>So, instead of having models knowing the business specification:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$customer-&gt;isPremium();</span></code></pre></td></tr></table></div></figure>


<p>you might want to refactor the code in a way that makes the
information as part of a business rule (hence, the <em>specification</em>),
that will accept a subject in order to verify that it actually
satisfies the rule / specification:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$premiumSpecification-&gt;isSatisfiedBy($customer);</span></code></pre></td></tr></table></div></figure>


<h2>Optimizing images</h2>

<p><a href="">Imageoptim</a> is a very handy tool to losslessly compress images
and save bandwidth while serving them.</p>

<h2>gzip_static</h2>

<p>Instead of gzipping each and every assets <em>on-the-fly</em> you can tell <code>nginx</code>
to look for a previously gzipped version of the same file.</p>

<p>Compile <code>nginx</code> with this option enabled:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./configure --with-http_gzip_static_module</span></code></pre></td></tr></table></div></figure>


<p>and then turn it on:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gzip_static on;</span></code></pre></td></tr></table></div></figure>


<h2>Turn off tcp_slow_start_after_idle</h2>

<p><a href="http://www.lognormal.com/blog/2012/09/27/linux-tcpip-tuning/">Turning off window resizing</a>
(or&hellip; downsizing) after a slow start will help clients who take a while
to send back packets over the same, slow, TCP connection, as it doesn&rsquo;t resize
the TCP window contrary to what the system would do by default.</p>

<h2>Pagespeed at nginx level</h2>

<p>I already knew about <a href="https://github.com/pagespeed/ngx_pagespeed">ngx_pagespeed</a>
but totally forgot to use it :)</p>

<h2>More RUM monitoring tools</h2>

<p>I&rsquo;ve come across <a href="https://mpulse.soasta.com">mpulse</a> which is another RUM platform.</p>

<p>Even though their UI is a bit old school, they&rsquo;re (of course) real-time and provide
valuable insides, like pageload times and DOM rendering performances.</p>

<p>Sign up on their site, it&rsquo;s free up to 1M visits a month!</p>

<h2>All in all</h2>

<p>Good day for optimizations and delivering a faster experience to your users, looking
forward to my third day &ndash; with my last talk, about SOAs &ndash; in this cold land!</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[AngularJS is the future. Maybe.]]></title>
		
		<link href="http://odino.org/angularjs-is-the-future-maybe/"/>
		<updated>2014-02-27T11:54:00-05:00</updated>
		<id>http://odino.org/angularjs-is-the-future-maybe</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>Today I gave my 2nd talk here at the ConFoo in Montreal,
an overview of why Angular could fit your <em>future</em> requirements
quite well.</p>

<!-- more -->


<p>Enjoy!</p>

<div class="slideshare" id="__ss_31723051"><iframe src="http://www.slideshare.net/slideshow/embed_code/31723051 " width="850" height="650" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe></div>

]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[7 takeways from the first day of ConFoo]]></title>
		
		<link href="http://odino.org/7-takeways-from-the-first-day-of-confoo/"/>
		<updated>2014-02-26T20:34:00-05:00</updated>
		<id>http://odino.org/7-takeways-from-the-first-day-of-confoo</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>Today it was the first day of ConFoo here in Montreal and,
as usual, a conference is always good to wrap your head around
solutions, different standpoints and discussions with other
nerds :)</p>

<!-- more -->


<p><img class="right" src="http://odino.org/images/odino-confoo.jpg"></p>

<h2>Websockets to the rescue</h2>

<p>I&rsquo;ve come to learn about <a href="http://en.wikipedia.org/wiki/WebSocket">WebSocket</a>
quite a while ago but I honestly never found a practical application for our
architecture: nonetheless, in one of the talks it was <a href="http://blog.arungupta.me/2014/02/rest-vs-websocket-comparison-benchmarks/">compared to REST</a>
in a context where multiple API calls are made, and the idea of re-using the same
TCP connection is pretty handy at that point.</p>

<p>For sure, things like <a href="http://stackoverflow.com/questions/12103628/spdy-as-replacement-for-websockets">SPDY</a>
are probably already enough from that point of view, but that&rsquo;s not a valid excuse
for not digging deeper into the WS specification.</p>

<h2>Patterns of batch processing</h2>

<p>During the same talk, <a href="https://twitter.com/arungupta">Arun Gupta</a> spoke about
<a href="https://blogs.oracle.com/arungupta/entry/batch_applications_in_java_ee">JSR 352</a>,
a specification for batch processing introduced in Java EE7.</p>

<p>It was really interesting as the specification is quite &ldquo;obvious&rdquo; but anyhow
efficient, as it structures batch jobs following a few rules:</p>

<ul>
<li>every job must process a specific number of items to process</li>
<li>it is divided in steps</li>
<li>each step is then again divided into 3 different sub-steps

<ul>
<li>reading the content of the item (<code>ItemReader</code>)</li>
<li>processing it, executing transformation and any kind of magic over that content (<code>ItemProcessor</code>)</li>
<li>writing the processed content <em>somewhere</em> (<code>ItemWriter</code>)</li>
</ul>
</li>
</ul>


<p>Dividing batches into jobs of a limited number of items is a golden rule (and I would say
your number should be as close to 1 as possible), while the structure that the JSR proposes
is very clean.</p>

<h2>Xamarin</h2>

<p>This tool might be what you were looking for if you&rsquo;re into mobile development:
its aim is to write code once (in C#) that gets <strong>converted to native code</strong> for both
IOS and Android.</p>

<p>If you had to write an app twice, because you needed to go native, you might really
wanna <a href="https://xamarin.com/">have a look at it</a> as, from what I heard, it might
really simplify your life.</p>

<h2>AppDynamics</h2>

<p>My bad for not being aware of <a href="http://www.appdynamics.com/">AppDynamics</a>, but we&rsquo;re pretty
happy with one of their competitors (<a href="http://newrelic.com/">NewRelic</a>) :)</p>

<p>AD is an <strong>application performance management</strong> platform that, just like NR, provides agents for
various platforms in order to collect metrics and reports from the stuff that runs on your
production servers: definitely worth a look, at least to understand the differences between
these guys and NewRelic.</p>

<h2>Detach DOM elements while transforming them</h2>

<p>Switching to something more browser-oriented, I found out about a very simple but
effective tecnique to optimize browser rendering performances when working with DOM
elements: instead of applying a bunch of transformations on a visible element you can
simply hide it, apply them and then show the element again, so that the browser
won&rsquo;t have to repaint and reflow at every transformation but only when you eventually
make the element visible again.</p>

<p>Another way to implement the same tecnique is to clone the element (so that we are actually
just working with a <strong>virtual DOM node</strong>), apply the transformations to that element and then
replacing the existing one by calling <code>parent.innerHtml(virtualElement)</code>.</p>

<p>Pretty simple but much valuable!</p>

<h2>Optimize DOM animations</h2>

<p>Another way to optimize browser performance upon rendering is to execute animations
on elements with an absolute or fixed position.</p>

<p>Why? Again, because then the browser doesn&rsquo;t have to reflow the whole DOM.</p>

<h2>Lodash</h2>

<p>A very <a href="http://lodash.com/">handy JS library</a> that seems to be <a href="http://lodash.com/benchmarks">way faster</a>
than underscore. It is now considered a <a href="http://stackoverflow.com/questions/13789618/differences-between-lodash-and-underscore">superset of underscore</a>
and you might want to look into using it from now on, in place of its predecessor.</p>

<h2>All in all&hellip;</h2>

<p>It was a fairly good day and my <a href="http://odino.org/orientdb-the-fastest-document-based-graph-database/">presentation about OrientDB</a>
went pretty well, can&rsquo;t wait for tomorrow!</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[OrientDB, the fastest document-based graph database]]></title>
		
		<link href="http://odino.org/orientdb-the-fastest-document-based-graph-database/"/>
		<updated>2014-02-26T15:25:00-05:00</updated>
		<id>http://odino.org/orientdb-the-fastest-document-based-graph-database</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>Today I gave the first of my talks here at the 2014 edition
of the confoo in Montreal, &ldquo;<a href="http://www.slideshare.net/odino/orientdb-the-fastest-documentbased-graph-database-confoo-2014-in-montreal-ca">OrientDB, the fastest
document-based graphdb</a>&rdquo;.</p>

<!-- more -->


<p>For the ones interested in the slides, I am also publishing them,
as usual, here:</p>

<div class="slideshare" id="__ss_31683783"><iframe src="http://www.slideshare.net/slideshow/embed_code/31683783 " width="850" height="650" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe></div>

]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[7 reasons why working for Namshi is great]]></title>
		
		<link href="http://odino.org/7-reasons-why-working-at-namshi-is-great/"/>
		<updated>2014-01-17T17:44:00-05:00</updated>
		<id>http://odino.org/7-reasons-why-working-at-namshi-is-great</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>I&rsquo;ve been working for <a href="http://namshi.com">Namshi</a> for almost 2
years now and I thought it would be interesting to share some
of the reasons why I consider this an ideal place, at the moment.</p>

<!-- more -->


<p>Some of these points can be extended to the company in general,
while some of them are related to the <a href="http://tech.namshi.com">tech department</a>.
All in all I&rsquo;d like to share my experience and what I feel when
I enter (sometimes late) in the office.</p>

<h2>Young and talented people</h2>

<p><img class="right" src="http://farm8.staticflickr.com/7353/11924599125_b40b12de0d_n.jpg"></p>

<p>Here I might repeat what you might have heard on the internet
about <a href="http://www.rocket-internet.de/ventures">Rocket Internet and its ventures</a>,
but working for one of them will make you cross paths with some
of the brightest youngsters across the industry.</p>

<p>If I were to mention everyone, the list would be too long to
fit in this post (and it would grow, like us, as they days go by)
but by walking around the office you can immediately feel
how <strong>many young people are pushing themselves to the max</strong> in
order to make the business as succesfull as possible.</p>

<p>I happen to live with my colleague
<a href="http://ae.linkedin.com/in/casuccioalex">Alessandro</a>,
a <a href="http://www.unibocconi.eu/wps/wcm/connect/Bocconi/SitoPubblico_EN/Navigation+Tree/Home/">Bocconi</a>
graduate from <a href="http://en.wikipedia.org/wiki/Trapani">Trapani</a>,
who has worked for other Rocket ventures in Australia
before landing here in Dubai: see, the amount of work he puts on,
the sleepless nights trying to improve workflows and metrics,
the fervent passion he shows (and the fun as well) on a daily basis
are very difficult to find elsewhere: it takes the right mix
of professionality and age, and I think Namshi makes it
exciting as people come to work to improve, learn and teach,
not (just) for their wage.</p>

<h2>Less talk, more action</h2>

<p><img class="left" src="http://farm4.staticflickr.com/3683/11924594475_e884e51973.jpg"></p>

<p>As Elvis sang<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>, <strong>a little less conversation,
a little more action</strong>: holy words!</p>

<p>We&rsquo;re at a place where we don&rsquo;t rely too much on papers
but proactively experiment solutions (more on this later)
and reward those who make giant leaps with their actions.</p>

<p>It is also worth noting that we don&rsquo;t look <strong>too</strong> much at
experience if people have really the skills to become game changers
in the organization: I&rsquo;ve witnessed people without previous
experiences in teams becoming leaders among their peers.</p>

<p>Additionally, <strong>it&rsquo;s not your job title that defines your boundaries</strong>:
in the tech team, we&rsquo;ve had our most junior member writing and deploying
a NodeJS app in production with Capistrano<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>.</p>

<p>Quoting <a href="ae.linkedin.com/in/sonjaneuber">Sonja</a>:</p>

<blockquote><p>[it matters] that people are really driven, that they are passionate about what they do; it doesn&#8217;t matter that much how long they have worked in their jobs before, 15 years, 5 years, as long as they bring the right attitude and the right spirit on board</p><footer><strong>Sonja, VP - Digital Marketing</strong> <cite><a href='http://youtu.be/NThxiu1HGgM?t=3m1s'>Working at Namshi</a></cite></footer></blockquote>


<h2>MEMEs</h2>

<p><img class="right" src="http://odino.org/images/meme-odino.jpg"></p>

<p>A modern startup cannot live without memes, it&rsquo;s phisically impossible:
here on the right you will find the one our team made for me,
to highlight my nature of late-night coder.</p>

<p>I find it amazing that we can gather together a bunch
of highly-skilled professional to build a dream and having
fun at the same time; having worked for other companies before
I can really say <strong>Namshi has the environment I enjoyed the most</strong>
so far.</p>

<h2>The family built by HR</h2>

<p>I must admit that HR played a <strong>huge role</strong> in making
Namshi an environment that gets better day after day:
the weekly internal newsletter, the
<a href="http://www.flickr.com/photos/106891956@N06/sets/72157637043616496/">Namshi Olimpics</a>,
the <a href="http://www.flickr.com/photos/106891956@N06/sets/72157637897125985/">picnics</a>&hellip;</p>

<p>I never had the privilege to see these in any company
I&rsquo;ve worked for before<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>.</p>

<h2>Technology stack</h2>

<p>We&rsquo;re a team of polyglots, as our SOA features 4 or 5 different
programming languages and we&rsquo;ve been using pretty interesting
systems over the past 2 years.</p>

<p>We&rsquo;ve started with refactoring a traditional
<a href="http://en.wikipedia.org/wiki/Multitier_architecture">n-tier</a>
architecture in order to be able to move towards a
Service Oriented Architecture while keeping up &amp; running
the existing services: the first steps were made with
Symfony2, and now we&rsquo;ve been throwing AngularJS and NodeJS
into the mix, while replacing memcache with Redis in order
to take advantage of a <strong>more structured key-value NoSQL
storage</strong>.</p>

<p>Things don&rsquo;t end on the <em>development</em> side: from the system point of you
we&rsquo;ve been using <a href="http://www.saltstack.com/">SaltStack</a> after a year of
<a href="http://puppetlabs.com/">Puppet</a> and are currently experimenting with
some tailor-made solutions for content delivery.</p>

<p>All in all, I must admit it feels damn exciting :)</p>

<h2>Ability to experiment</h2>

<p><img class="left" src="http://odino.org/images/angularjs.png"></p>

<p>If you paid attention to the previous section, you have probably
noticed that we <strong>transitioned</strong> from an already decoupled architecture
(separate frontend and backend), which means that we had the
chance to experiment a lot in order to completely revamp it:
in the last 12 months we&rsquo;ve started using (for some of us
it was the first time ever) Symfony2, Redis, Lua, xDomain,
AngularJS, Grunt, HTTP extensions and JWS, not to mention the
traditional components of our stack, like RabbitMQ or Solr.</p>

<p>On top of this, we are now hungry for SPDY, WebP
and <strong>API orchestration layers</strong>.
More on this soon on this blog ;&ndash;)</p>

<h2>A great team of nerds</h2>

<p>I will never get bored of repeating this: the tech team, which
I&rsquo;m part of, <strong>feels like a family</strong>.</p>

<p>I&rsquo;ve seen some of us doing their first <code>composer.phar install</code>,
some saying &ldquo;<em>How do I f</em><em>**** get out of this?</em>&rdquo; after
opening VIM, some others reviewing my pull requests like a boss,
and others never hesitating to help a friend who
had his Vagrant machine stuck.</p>

<p>I&rsquo;ve seen the team growing into a squad able to deliver
enterprise applications under the motto
&ldquo;<a href="http://www.theverge.com/2013/8/14/4621378/the-facebook-ification-of-instagram-begins-today">move fast and break things</a>&rdquo;,
spending endless nights trying to fix PHPUnit tests or
rewriting a service in order to provide a robust checkout
experience written in JavaScript (JS, funky JS!).</p>

<p>Being part of this means recognizing that it will be very
difficult to replicate such achievements elsewhere,
something I will always be proud of.</p>

<h2>So?</h2>

<p>So yes, it feels good to be part of the Namshi family, and since
we have some <a href="http://odino.org/if-you-love-angularjs-you-should-definitely-join-us-dot-dot-dot-were-hiring/">open positions</a>
I would highly recommend you to give us a try :) Of course,
the world offers a lot of interesting and attractive
opportunities, but for the moment I must admit I still feel
<strong>very</strong> lucky.</p>

<p>Last but not least, I have to thank <a href="http://ae.linkedin.com/in/hosam">Hosam</a>,
<a href="http://ae.linkedin.com/in/farazkhalid">Faraz</a><sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup> and
<a href="http://de.linkedin.com/in/hzarka">Hisham</a> for leading the
crazy family we enjoy on a daily basis!</p>

<p><em>All images courtesy of the <a href="http://www.flickr.com/photos/106891956@N06/">Namshi HR Flick stream</a></em></p>

<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>And a great remix can be found here: http://www.youtube.com/watch?v=Zx1_6F-nCaw <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>They say &#8216;sky is the limit&#8217;, but in our case I would say &#8216;your SSH key is the limit&#8217; <a href='#fnref:2' rev='footnote'>↩</a></li><li id='fn:3'>Albeit we had very crazy Christmas parties up there in Rome :) <a href='#fnref:3' rev='footnote'>↩</a></li><li id='fn:4'>When he doesn&#8217;t wear his Google Glasses <a href='#fnref:4' rev='footnote'>↩</a></li>
    </ol>
</div>

]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[If you love AngularJS, you should definitely join us...we're hiring!]]></title>
		
		<link href="http://odino.org/if-you-love-angularjs-you-should-definitely-join-us-dot-dot-dot-were-hiring/"/>
		<updated>2014-01-17T16:28:00-05:00</updated>
		<id>http://odino.org/if-you-love-angularjs-you-should-definitely-join-us-dot-dot-dot-were-hiring</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>In order to expand our team we are now looking for a
frontend JavaScript developer that loves Angular and wants to
drown under loads of <code>ng-*</code>, FPS optimizations and
building the frontends for our
<a href="http://odino.org/tips-and-tricks-for-you-service-oriented-architecture/">Service Oriented Architecture</a>.</p>

<!-- more -->


<p><img class="right" src="http://odino.org/images/namshi.png"></p>

<p>If you are also interested in helping on the whole stack, here&rsquo;s a
summary of the rest of the technologies we&rsquo;re using down here at
<a href="http://namshi.com">Namshi</a>:</p>

<ul>
<li><a href="http://symfony.com/">Symfony2</a></li>
<li><a href="http://nodejs.org/">NodeJS</a></li>
<li><a href="http://redis.io/">Redis</a></li>
<li><a href="http://www.saltstack.com/">SaltStack</a></li>
<li><a href="http://angularjs.org/">AngularJS</a></li>
</ul>


<p>I must admit that is has been pretty exciting to get our
hands dirty with all of these (and the less attractive ones
as well :-P).</p>

<p>Dubai is a pretty nice place and we are <strong>very</strong> open
to relocations: if I&rsquo;m writing this blog post it&rsquo;s because
I would like to reach everyone on the internet who wants
to give it a shot, and not only our connections here in
Dubai.</p>

<p>Namshi is a <a href="http://www.youtube.com/watch?v=NThxiu1HGgM">fun workplace</a>
and you&rsquo;re gonna be working with an
<a href="http://tech.namshi.com/portfolio/">highly skilled team</a>
with the goal of delivering the best customer experience in
the Middle East, through a website that should ideally
render in ~100ms, powered by lotsa APIs.</p>

<p>So yeah, what are you waiting for? <code>ng-apply</code> now!</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[How to make your JavaScript apps SEO-friendly]]></title>
		
		<link href="http://odino.org/how-to-make-your-javascript-apps-seo-friendly/"/>
		<updated>2014-01-17T14:15:00-05:00</updated>
		<id>http://odino.org/how-to-make-your-javascript-apps-seo-friendly</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>One of the challenges in moving your application logic
from the backend (Rails, Django or whatsoever) to the
new frontier of JS web frameworks like AngularJS and
EmberJS is how you can make them SEO-friendly, as these
JavaScript applications get sent to the browser by your
webserver as a <code>200 OK</code>, no matter if, once the app boots,
the page that its being represented is not found, or has
some specific metatags, like title and description.</p>

<!-- more -->


<p>This is, for example, how a tipical angular app&rsquo;s <code>HEAD</code>
section of the HTML looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>
</span><span class='line'>      {{ pageTitle }}
</span><span class='line'>    <span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;keywords&quot;</span> <span class="na">content=</span><span class="s">&quot;{{ metaKeywords }}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;description&quot;</span> <span class="na">content=</span><span class="s">&quot;{{ metaDescription }}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">type=</span><span class="s">&quot;image/x-icon&quot;</span> <span class="na">data-ng-href=</span><span class="s">&quot;https://example.org/favicon.ico&quot;</span> <span class="na">rel=</span><span class="s">&quot;shortcut icon&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;https://example.org/screen.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>As you see, the page title, which is what SE like Google use
as main text in your indexed pages, is a mere placeholder for
a variable that come after the JS framework has booted and
executed its own logic, eventually leading to SERP results
like this:</p>

<p><img class="center" src="http://odino.org/images/google-result-placeholders.png"></p>

<p>So, how will you make sure that search engines will actually
see the post-processed HTML and not the very first one that
gets sent from your server?</p>

<p>You have at least a couple different solutions that use the
same underlying tecnique.</p>

<h2>Once feared, Cloaking is your only way</h2>

<p>The practice of <a href="http://en.wikipedia.org/wiki/Cloaking">cloaking</a>
has been penalized by search engines for years but turned out to
be <a href="https://developers.google.com/webmasters/ajax-crawling/docs/html-snapshot">endorsed by Google</a>
when you have JS-based apps.</p>

<p>It basically consist in serving to the search engine a different
version of the webpage, already rendered, instead of the one
that you would serve to a normal visitor, which has to run
the JS framework on the browser.</p>

<p>The workflow is very simple: instead of serving, from the webserver,
your traditional app that you would serve to a normal user, in case
of a bot you simply <strong>forward the request to another application</strong>,
which will request the original page, wait for it to render through
an headless browser like <a href="http://phantomjs.org/">PhantomJS</a> and then
<strong>serve back the fully rendered content</strong> to the bot:</p>

<p><img class="center" src="http://odino.org/images/prerender-seo.svg"></p>

<p>This is a very straightforward way to effectively implement SEO in
JS apps, and it can be achieved with a couple tools instead of
having to write the whole thing on your own.</p>

<h2>BromBone</h2>

<p><a href="http://www.brombone.com/">BromBone</a> is a service that crawls your
sitemap, generates a snapshot of the rendered HTML, stores it on
Amazon (presumably <a href="http://aws.amazon.com/s3/">S3</a>) and relieves you
from the pain of setting up the middleware SEO app on your own.</p>

<p>It basically acts as the SEO app seen in the picture, but instead of
rendering pages on the fly it does it by looking at your sitemap: once
the bot hits the webserver, you can then proxy it to the BromBone page
so that it gets the actual response from the server.</p>

<p>Even though the service is <a href="http://www.brombone.com/#pricing">very affordable</a>
relying on the sitemap it&rsquo;s a bit tricky, because, well&hellip;what happens
if you have new pages that are not included in the sitemap?</p>

<p>After bumping into this requirement we, at Namshi, decided to opt for
something else.</p>

<h2>Prerender</h2>

<p><a href="https://prerender.io/">Prerender</a> is both a SaaS and an
<a href="https://github.com/collectiveip/prerender">open source library</a>
that prerendrs pages on the fly using PhantomJS and some other
nice tricks to <a href="https://prerender.io/server#http-headers">serve the correct status codes and HTTP headers</a>.</p>

<p>The only disadvantage with rendering on the fly is that the bot will
have to wait a bit longer in order to get the response, and this might
result in a penalization from search engines: the solution is very simple,
as you can simply warm up prerender&rsquo;s cache on your own by hitting the URLs
that you want to cache.
In order to refresh the cache, Prerender lets you do <code>POST</code> requests, so
that:</p>

<ul>
<li>a <code>GET</code> request to <code>http://prerender.example.org/http://example.org/foo.html</code>
will prerender the page on the fly, so that you can cache for future requests
by real bots</li>
<li>a <code>POST</code> request to <code>http://prerender.example.org/http://example.org/foo.html</code>
will refresh the prerendered content</li>
</ul>


<p>Prerender gives you a bit more freedom compared to Brombone but it requires you
to do some manual work, at least if you want to run it on your own servers
without using their solution as a SaaS; in any case, their pricing modes
is <a href="https://prerender.io/pricing">very affordable</a> as well.</p>

<h2>What shall I use?</h2>

<p><span class='pullquote-right' data-pullquote='making SEO-friendly JavaScript apps is not a hassle anymore'>
It really depends, as both are very interesting tools: given our confidence
with NodeJS and the will of developing some of the SEO-related stuff in-house,
so that we have a bit more control over these things, we opted to give
Prerender a go, but if you feel the sitemap solution proposed by BromBone
is good enough for you, I&rsquo;d recommend you that service, as it&rsquo;s easier to
run and requires very less configuration / manual work.</p>

<p>All in all, the good thing is that, in 2014, we can finally say that
making SEO-friendly JavaScript apps is not a hassle anymore!
</span></p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Frontend web development is not as fun as it could be]]></title>
		
		<link href="http://odino.org/frontend-web-development-is-not-as-fun-as-it-should-be/"/>
		<updated>2013-11-10T19:53:00-05:00</updated>
		<id>http://odino.org/frontend-web-development-is-not-as-fun-as-it-should-be</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>I am writing this post in the middle of revamping
<a href="http://en-ae.namshi.com">Namshi&rsquo;s architecture</a>
with AngularJS, reverse proxies,
SPDY and HTTP APIs, because I
strongly believe in the future of these technologies and
that they are the de-facto cutting-edge solution for
most of the antipatterns that we&rsquo;ve seen so far:
monolithic applications, unscalable frontends,
limited protocols.</p>

<!-- more -->


<p><img class="right" src="http://odino.org/images/browsers.jpg"></p>

<p>So why would I rant about it? Well, this is not a real
rant but it&rsquo;s more of a retrospective on the <em>gotchas</em>
that we faced over the past months: I do <strong>really</strong>
enjoy all of this techs, but also
recognize that most of them are at a
very early stage and have their pitfalls when it comes
to develop real-world, scalable architectures.</p>

<p>The boring part&rsquo;s over, let&rsquo;s get into the real mess ;&ndash;)</p>

<h2>Reducing redirects?</h2>

<p>Suppose that you have a frontend, maybe built with AngularJS,
that proxies all the requests to an API, so if you request
<code>example.org/about</code>, your frontend actually gets the content
from <code>api.example.org/about</code>.</p>

<p>One of the things that you can start optimizing are the
round trips between the client and the server (very important
for mobile connections): for example,
instead of sending simple redirects from your API to the
frontend, you can return a <code>30X</code> and include the actual body
in the response; in this way, the client can:</p>

<ul>
<li>read the body of the response and work with it (output or whatever)</li>
<li>update the browser URL according to the <code>Location</code> header provided in the response with the <a href="http://diveintohtml5.info/history.html">browsers&#8217; history API</a></li>
</ul>


<p>NOT. SO. FAST.</p>

<p>Turns out that modern browsers intercept redirects and make an
additional HTTP request to the <code>Location</code> provided by the response.</p>

<p>This behavior is pretty useful in 98% of your use-cases, as
you dont have to take care of handling AJAX redirects on
your own and you have a pretty simple solution, using a
custom HTTP status
code, like <a href="http://stackoverflow.com/questions/199099/how-to-manage-a-redirect-request-after-a-jquery-ajax-call">278</a>, for the remaining 2% of scenarios.</p>

<p>NOT. SO. FAST. 2.</p>

<p>Of course, the magnificent <a href="http://www.zdnet.com/blog/networking/the-number-one-mobile-web-browser-googles-native-android-browser/2091">Android native browser</a>
will mess this up, thinking that <code>278</code> is an error code: so if, for
your HTTP request, you have a callback in case of success and
one in case of an error, the latter will be triggered.</p>

<p>How to deal with this?</p>

<p>Well, we decided to return straight <code>200 Ok</code> codes and include
2 custom headers, <code>X-Location</code> and <code>X-Status-Code</code>, that our
clients will parse to find out if they need to update the
browser&rsquo;s URL.</p>

<p>In pseudo-code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>res = http.get('api.example.org?search=BMW')
</span><span class='line'>
</span><span class='line'>if (res.status_code === 200 && res.headers.x-location) {
</span><span class='line'>  browser.url = res.headers.x-location
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>In any case, with the growing amount of mobile clients, I think
it might make sense to start thinking of an appropriate process
to handle redirects, within the HTTP protocol, so that browsers
can just follow the spec: in my opinion we could use something
like <code>308 Transparent redirect</code> for this.</p>

<h2>Reverse proxies and HTTP cache</h2>

<p><img class="left" src="http://odino.org/images/varnish-cache.jpg"></p>

<p>Two of the most <a href="http://www.mnot.net/blog/2007/12/12/stale">important directives</a>
that you can use while taking advantage of the HTTP cache
are <code>stale-while-revalidate</code> and <code>stale-if-error</code>:
the former lets you return stale responses
while you revalidate the cache while the latter lets you serve
cached responses if your backend is down (<code>50X</code> errors).</p>

<p>Of course, you will need a reverse proxy in front
of your webserver in order to really take advantage of
these directives: <a href="http://www.squid-cache.org/">Squid</a> natively implements
both of them but, in our case, it was too much of a hassle to setup,
as it&rsquo;s bloated compared to its cousin <a href="https://www.varnish-cache.org/">Varnish</a>,
which doesn&rsquo;t natively implement <code>stale-*</code> directives instead.</p>

<p>Setting up Varnish to support those 2 directives it&rsquo;s a matter
of a few tries anyhow, as you can mimic the (almost) same
behaviors with Varnish&rsquo;s <a href="https://www.varnish-software.com/static/book/Saving_a_request.html#core-grace-mechanisms">grace and saint modes</a>.</p>

<h2>Android&rsquo;s native browser</h2>

<p><img class="right" src="http://odino.org/images/android.jpg"></p>

<p>Android, oh Android!</p>

<p>As we already saw, its native browser doesn&rsquo;t let you play around
with unconventional HTTP status codes<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup> and, on top of that,
<strong>it breaks the HTTP cache</strong>.</p>

<p>If you have a cacheable resource that you retrieve via AJAX,
the first request to retrieve will work, but as soon as you reload
the page and retrieve it a second time, the browser messes things up,
things that the request returned an invalid HTTP status code (<code>0</code>)
and aborts the process.</p>

<p>And yes, it&rsquo;s a <a href="http://opensourcehacker.com/2011/03/20/android-webkit-xhr-status-code-0-and-expires-headers/">known bug</a>.</p>

<h2>Performances on old devices</h2>

<p>And when I say old I mean stuff like the Galaxy S2 or S3, which are not <strong>that</strong> old
to be honest.</p>

<p>Performances are anyhow a huge concern when you start moving the logic into
the clients, as resources might be very limited: let&rsquo;s not forget that the
first generation of Galaxy &ndash; or even the iPhone 4 &ndash; were shipped out with
just 512mb of RAM; think of a JS-heavy app, which sucks up to 40/50mb of RAM:
how would that perform on those devices?</p>

<p>Let me tell you that: it&rsquo;d be very slow, and would even feel slower when CPUs
comes into the mix as &ndash; we&rsquo;ve witnessed it &ndash; to build DOM elements<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>
it could take up to 4s. Of course, you can optimize it, but a brand new smartphone
wouldn&rsquo;t let you feel such <em>lag</em>: truth is that when you decide to go for a JS app
you need to take into account the time spent in optimizations for old devices,
as you&rsquo;ll surely need to invest on it.</p>

<h2>What a hard time debugging browser events</h2>

<p><img class="left" src="http://odino.org/images/chrome-devtools.png"></p>

<p>If you&rsquo;ve ever dug deep into optimizing browser events (HTML parsing, repainting and so on)
you probably know what I&rsquo;m talking about: the devtools are still at an early stage and
it becomes really tricky to be able to nail issues down or at least to efficiently
reverse engineer them; even though you have a breakdown of every browser event it&rsquo;s
actually pretty difficult to trace events back to their &ldquo;cause&rdquo;<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>.</p>

<p>Chrome provides profiles and the timeline which are very useful resources, but you can&rsquo;t
really inspect that much as at a certain point you&rsquo;ll end up with <strong>a lot</strong> of events
like <em>HTML parsing</em> or <em>Function call</em> and only God knows where they exactly came from.</p>

<h2>Persistent sessions and credentials</h2>

<p><img class="right" src="http://odino.org/images/security.jpg"></p>

<p>Authenticating users might be tricky for frontend apps: you don&rsquo;t have the good old
(and heavy) PHP sessions that you can just fill up on you server, but you &ndash; at least
initially &ndash; can try to persist sessions on cookies or <a href="http://diveintohtml5.info/storage.html">localStorage</a>.</p>

<p>But even before thinking of storing sessions you have to deal with authenticating each
of your user from the app: granted that the HTTP basic auth is not good as
<a href="http://en.wikipedia.org/wiki/Basic_access_authentication#Security">it&rsquo;s flawed</a> and that
the <a href="http://en.wikipedia.org/wiki/Digest_access_authentication">digest auth</a> might be too simple,
you should start looking at alternative methods to authenticate and authorize your users,
preferrably using tokens.</p>

<p>As you probably figured out, there is no real standard mechanism of doing this, as some
providers rely on oAuth (both 2-* and 3-legged) and some on OpenID. Even Mozilla, a while ago,
came out with its own protocol, <a href="http://www.mozilla.org/en-US/persona/">Persona</a>, to solve this
problem.</p>

<p>We actually found out another &ldquo;protocol&rdquo; to store and transmit credentials through HTTP
APIs, the <em>Javascript Object Signing and Encryption</em> specification (<a href="https://datatracker.ietf.org/wg/jose/">JOSE</a>).</p>

<h2>A note on AngularJS and the Grunt ecosystem</h2>

<p>A glimpse of our <code>package.json</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;devDependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;grunt&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.4.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;grunt-contrib-copy&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.4.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;grunt-contrib-concat&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.3.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;grunt-contrib-coffee&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.7.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;grunt-contrib-uglify&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.2.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;grunt-contrib-compass&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.3.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;grunt-contrib-jshint&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.6.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;grunt-contrib-cssmin&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.6.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;grunt-contrib-connect&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.4.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;grunt-contrib-clean&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.4.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;grunt-contrib-htmlmin&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.1.3&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;grunt-contrib-imagemin&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.1.4&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;grunt-contrib-watch&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.5.3&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;grunt-usemin&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.1.11&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;grunt-rev&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.1.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;grunt-karma&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.4.3&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;grunt-open&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.2.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;matchdep&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.1.2&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you see, the bower/node/grunt/angular ecosystem is still very young and,
from certain points of view, very immature (for example, <a href="https://github.com/gruntjs/grunt-contrib-connect/issues/9">SSL support in Grunt</a>
was added just 2 months ago).</p>

<p>So if you want to use these kind of technologies you must accept that, sometimes,
doing an <code>npm install</code> might break something, or that you will need to keep your deps
updated to the latest releases: it&rsquo;s all about <strong>go big or go home</strong>.</p>

<h2>Internet Explorer. As always.</h2>

<p><img class="right" src="http://odino.org/images/ie.png"></p>

<p>Eheh, there could not be a post about <em>web gotchas</em> without mentioning IE:
the lack of support for <a href="http://en.wikipedia.org/wiki/Cross-origin_resource_sharing">CORS</a>
in IE8 and IE9 is actually a real kicker for
efficiently implementing frontend apps that rely on a remote API
(<code>example.org</code> &ndash;> <code>api.example.org</code>), since CORS considers as cross-domain
even a request on a subdomain<sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup>.</p>

<p>And no, there is no native escape strategy for this: you <strong>must</strong> extend the
<a href="http://www.w3.org/TR/XMLHttpRequest/">XHR</a> in order to make it capable of doing
cross-domain communication through Iframes, a strategy that even Google and Facebook
have implemented in the past; luckily there is some stuff already written for us,
so we can use the good <a href="https://github.com/jpillora/xdomain">xDomain</a> and
include it with the IE conditional comments.</p>

<p>But then, you would think, why not using xDomain for everything, and simply drop
CORS?</p>

<p>Well, there are a few things to consider:</p>

<ul>
<li>even though Google and Facebook are known to be using some trick like xDomain, it&rsquo;s
pretty strange that they havent released anything yet (might be that they don&rsquo;t consider
it a long-term option)</li>
<li>the native Android browser was known to have <a href="https://github.com/jpillora/xdomain/issues/19">issues with this library</a></li>
<li>CORS is a growing standard that has been widely adopted by the community</li>
<li>the <a href="https://github.com/jpillora/xdomain/blob/gh-pages/dist/xdomain.js">code</a> looks kind of cryptic</li>
</ul>


<p>All in all, we didnt feel like using xDomain for everything, as we are just using
it for IE8/9<sup id='fnref:5'><a href='#fn:5' rel='footnote'>5</a></sup>: <a href="https://github.com/jpillora">Jaime</a> did a great job
implementing it but I personally feel that it might be <strong>too much</strong> to just blindly
rely on it for cross-domain communications.</p>

<h2>CORS and HTTP headers</h2>

<p>Deciding to go with CORS it&rsquo;s just half of it, as the other half consists
into actually implementing CORS on both your clients and servers (APIs): it&rsquo;s
worth mentioning that the specification is really strict when it comes to
<strong>send and manipulate custom HTTP headers</strong> (like the <code>X-Location</code> that we
saw at the beginning of this post).</p>

<p>If you wanna send a custom header you will need to specify it in the
<code>Access-Control-Request-Headers</code> header:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">Access-Control-Request-Headers:</span> <span class="err">X-My-Custom-Header</span>
</span></code></pre></td></tr></table></div></figure>


<p>and if you want your clients to be able to access some of the response&rsquo;s headers you will
need to declare them as &ldquo;accessible&rdquo;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">Access-Control-Expose-Headers:</span> <span class="err">X-My-Other-Header,</span> <span class="err">X-...</span>
</span></code></pre></td></tr></table></div></figure>


<h2>How to do RUM?</h2>

<p>Another good question (and I don&rsquo;t have an answer so far) is how to measure
performances as felt by the end-user (<a href="http://en.wikipedia.org/wiki/Real_user_monitoring">Real User Monitoring</a>),
since AngularJS loads once and then never triggers server-side measurable events
other than HTTP requests to your APIs: the API&rsquo;s response times cannot be taken
into account as you wouldn&rsquo;t measure the
performance perceived by the end user &ndash; remember, JS frameworks add HTML parsing,
data-binding and so on on top of the cake.</p>

<p>We still have to figure out how we will implement RUM in our apps,
if you have any suggestion it would be highly appreciated!</p>

<h2>All in all&hellip;</h2>

<p>Developing on the frontend is an amazing experience that has some drawbacks, like on
any platform: beware of the specs (like CORS) and gotchas (IE, Android&rsquo;s native browser) and you will
enjoy it to the max!</p>

<hr />

<p><em>P.S. Thanks to <a href="https://github.com/hzarka">HZ</a> and <a href="https://github.com/AdamQuadmon">AdamQuadmon</a>
for passively contributing to this post, sharing with me and the rest of our team this amazing
and tortuous experience</em></p>

<hr />

<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>Which might be fair, as even Chrome has some funny behaviors <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>Not so many DOM elements! <a href='#fnref:2' rev='footnote'>↩</a></li><li id='fn:3'>Chrome&#8217;s Devtools &#8220;Profiles&#8221; are probably the best resource you can use to backtrace stuff <a href='#fnref:3' rev='footnote'>↩</a></li><li id='fn:4'>Which makes sense when you have platforms like Tumblr <a href='#fnref:4' rev='footnote'>↩</a></li><li id='fn:5'>BTW IE11 is out, so there&#8217;s even more hope <a href='#fnref:5' rev='footnote'>↩</a></li>
    </ol>
</div>

]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Drop OpenJDK and upgrade Java to the Oracle packages]]></title>
		
		<link href="http://odino.org/drop-openjdk-and-upgrade-java-to-the-oracle-packages/"/>
		<updated>2013-11-10T08:59:00-05:00</updated>
		<id>http://odino.org/drop-openjdk-and-upgrade-java-to-the-oracle-packages</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>A few weeks back I started noticing some performance
issues on my <a href="http://www.jetbrains.com/phpstorm/">IDE</a> and decided to investigate a bit more
on it: turns out that they recommended to 1) upgrade to
the latest JDK (7) and stop using <a href="http://openjdk.java.net/">OpenJDK</a>, as it has
some performance gotchas.</p>

<!-- more -->


<p><img class="left" src="http://odino.org/images/java.png"></p>

<p>Turns out to be a no-brainer thanks to the <a href="https://github.com/flexiondotorg/oab-java6">apt repository manager provided by flexiondotorg</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ~/
</span><span class='line'>wget https://github.com/flexiondotorg/oab-java6/raw/0.3.0/oab-java.sh -O oab-java.sh
</span><span class='line'>chmod +x oab-java.sh
</span><span class='line'>sudo ./oab-java.sh</span></code></pre></td></tr></table></div></figure>


<p>After running it you just need to re-install all the packages:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install oracle-java7-jdk oracle-java7-jre oracle-java7-plugin</span></code></pre></td></tr></table></div></figure>


<p>and tell ubuntu that the JDK version and location has changed:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo update-alternatives --config java</span></code></pre></td></tr></table></div></figure>


<p>A quick check with <code>java -version</code> and then enjoy it!</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Speaking about AngularJS, SOA and OrientDB in Montreal at the Confoo 2014]]></title>
		
		<link href="http://odino.org/speaking-about-angularjs-soa-and-orientdb-in-montreal-at-the-confoo-2014/"/>
		<updated>2013-10-20T11:00:00-04:00</updated>
		<id>http://odino.org/speaking-about-angularjs-soa-and-orientdb-in-montreal-at-the-confoo-2014</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>I am very happy to announce that next February I will
be attending the <a href="http://confoo.ca/">Confoo 2014</a> and <a href="http://confoo.ca/en/speaker/alessandro-nadalin">speaking as well</a>,
with a good lineup of talks:</p>

<ul>
<li><a href="http://confoo.ca/en/2014/session/orientdb-the-fastest-document-based-graphdb">OrientDB, the fastest NoSQL graph database</a></li>
<li>building a <a href="http://confoo.ca/en/2014/session/soa-with-symfony2">SOA with Symfony2</a></li>
<li><a href="http://confoo.ca/en/2014/session/angularjs-is-the-future-maybe">is AngularJS the future?</a></li>
</ul>


<!-- more -->


<p>For the first time ever, I have to admit it, I will be
presenting <strong>3 topics that have very different backgrounds</strong>,
and, as the days go by, I realize that working at <a href="http://en-ae.namshi.com">Namshi</a>
has been terrific under this point of view: we have the ability of
experimenting with different technologies and use the best out on the
market, something that gets translated into the ability of having a
360° overview of the market.</p>

<p><img class="right" src="http://odino.org/images/montreal.jpg"></p>

<p>For me it will be the first time in the cold lands of Canada, and
I can&rsquo;t wait to make the most out of this trip: I always had a <strong>very</strong>
good opinion about canadians in general, hope this trip will
confirm my random thoughts.</p>

<p>If you have the chance to join, don&rsquo;t miss this amazing event:
<a href="http://confoo.ca/en/2014/sessions">the schedule</a> speaks for itself
and I am thrilled to be part of such an amazing speakers&#8217; lineup
&mdash; which I obviously ruin :&ndash;) !</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Space to the youngsters...]]></title>
		
		<link href="http://odino.org/space-to-the-youngsters-dot-dot-dot/"/>
		<updated>2013-09-23T18:26:00-04:00</updated>
		<id>http://odino.org/space-to-the-youngsters-dot-dot-dot</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>One of the best feeling ever, while heading
a team of (web) engineers, is when you lead
them to one particular thing: do <strong>not make the
same mistakes you made</strong> back at the time.</p>

<!-- more -->


<p><img class="center" src="http://odino.org/images/namshi-team.jpg"></p>

<p>For our people it&rsquo;s pretty interesting, since
most of them didn&rsquo;t work with automated tests
and enterprise framework before we decided to
go <a href="http://odino.org/tips-and-tricks-for-you-service-oriented-architecture/">SOA</a>,
and the <strong>coolest thing</strong> is to see how juniors
pick things up better, faster than you did back
at the time.</p>

<p>Today I want to introduce you to <a href="http://mohdhallal.github.io/">Mohammad Hallal</a>,
who joined us around 3 months ago, fresh from
university.</p>

<p>His dedication and will led him to be a very
valuable element of a team full of seniors,
and he decided to make the big step,
starting to <strong>share his experience</strong>
with a technical blog.</p>

<p>Kudos to Hallal, and don&rsquo;t miss his first post,
an introduction about <a href="http://mohdhallal.github.io/blog/2013/09/22/behat-mink-and-parallel-runner-a-recipe-for-automated-web-testing/">BDD, Behat and automated testing</a>!</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[CakeFest 2013 wrap-up]]></title>
		
		<link href="http://odino.org/cakefest-2013-wrap-up/"/>
		<updated>2013-09-21T16:58:00-04:00</updated>
		<id>http://odino.org/cakefest-2013-wrap-up</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>I am taking some time off to describe my last trip between
Burlingame and San Francisco for the CakeFest 2013.</p>

<!-- more -->


<h2>First-timer in the States</h2>

<p><img class="right" src="http://odino.org/images/usa-flag.jpg"></p>

<p>It was actually &ndash; what a shame! &ndash; my first time in the States: given
that I find exotic cultures (SEA, Desi) a bit more attractive, I never took
the time to fly all the way west to visit the probably most discussed
country in the globe.</p>

<p>The flight, around 15 hours in total, was pretty stressful, at least for me, and
the visit VISA process at SFO took way longer than initially expected:
luckily, Italy is part of the VISA waiver program, and at least I didn&rsquo;t get
questioned too much by the federal agents at the airport.</p>

<p>In a couple of hours I am outside of the airport: without any accomodation, I head
towards the <a href="http://en.wikipedia.org/wiki/Tenderloin,_San_Francisco">tenderloin</a>,
probably not a wise choice :&ndash;)</p>

<p>I spent the first 2 days between Market and 7th, a pretty creepy location at night,
but very enjoyable during the day: from there it&rsquo;s very easy to take a cab or the tram
and get immersed in the tourist&rsquo;s life, visiting places like the Fisherman&rsquo;s Wharf,
Pier 39 or the Embarcadero.</p>

<p>Note to self: I should have checked about the America&rsquo;s cup before: since atteding
one of the races could have been pretty damn awesome!</p>

<h2>Location</h2>

<p><img class="right" src="http://odino.org/images/cali-bike.jpg"></p>

<p>The conference was held right next to the airport, in
<a href="https://www.google.com/maps/preview#!q=burlingame+san+francisco&amp;data=!4m10!1m9!4m8!1m3!1d32160518!2d-95.677068!3d37.0625!3m2!1i1855!2i947!4f13.1">Burlingame</a>, inside
the Crowne Plaza hotel: the location was easily reachable by BART
and the airport shuttle, if you were staying in the city in those days.</p>

<p>After spending a couple days inside the city itself, I decided to
move to the CP for the rest of my vacation, as it was very comfortable
and convenient &ndash; by taking the BART you could get in SF in ~40
minutes.</p>

<p>All in all the Crowne Plaza was a pretty expensive place, but if you,
like me, are lazy and go for the easy choice, you will
find yourself pretty well there: every day (after the conference) I used to
take the shuttle to SFO and the BART there: with less than 20$
per day you would be able to move around San Francisco even though
you are actually sleeping 25km away from downtown.</p>

<h2>Welcome!</h2>

<p>The guys from the organization, especially <a href="https://github.com/jameswatts">James</a>,
did a nice job in welcoming people and making them feel at a reunion party
rather than at a formal conference: the atmosphere was very enjoyable and
having people coming from all over the world (Japan, Germany, Dubai, UK, &hellip;)
just gave it that international vibe that only these kind of events
can give you.</p>

<h2>The community</h2>

<p>I was actually surprised to see that CakePHP&rsquo;s &ldquo;official&rdquo; annual
event was a bit short in terms of numbers: I can&rsquo;t really compare it
to the <a href="http://www.zendcon.com/">ZendCon</a> or the
<a href="http://live.symfony.com/">Symfony Live</a> since I&rsquo;ve never been at the former
and my last visit to the latter was in 2011, but I am sure they get together
a few more nerds.</p>

<p>I think I could count up to 80 people in the main hall during the <strong>hot talks</strong>:
nothing bad, but I was expecting other numbers; for sure, having less people
let everyone talk to each other, as the atmosphere there was very collaborative
and group-oriented: personally, I would like to thank some of the guys for providing
much fun between talks &ndash; especially <a href="https://twitter.com/angelxmoreno">Angel</a> and
<a href="http://www.linkedin.com/profile/view?id=104354&amp;authType=NAME_SEARCH&amp;authToken=9zAl&amp;locale=en_US&amp;srchid=277650061379771493631&amp;srchindex=1&amp;srchtotal=90&amp;trk=vsrp_people_res_name&amp;trkInfo=VSRPsearchId%3A277650061379771493631%2CVSRPtargetId%3A104354%2CVSRPcmpt%3Aprimary">Gary</a>.</p>

<p><img class="right" src="http://odino.org/images/sea-lion.jpg"></p>

<h2>Conference</h2>

<p>Technically, the conference went way beyond my expectations: I didn&rsquo;t follow
all the talks (I know, I know) as I was also working during those 2 days, but what
I&rsquo;ve seen was very interesting.</p>

<p>There were talk about <a href="http://www.vagrantup.com/">Vagrant</a>, scaling/autoscaling and
Ember.JS: for me they were very valuable since
<a href="http://www.slideshare.net/odino/tips-and-tricks-for-your-service-oriented-architecture-cakefest-2013-in-san-francisco/3">I&rsquo;ve never used Cake</a>
and I was actually pretty scared of not finding talks that would inspire me
in my day-to-day job.</p>

<p>Kudos for making the CakeFest an event that a Symfonian can enjoy ;&ndash;)</p>

<h2>Aftermath</h2>

<p>Last but not least, thank you very much to the crazy guys working
at <a href="http://www.loadsys.com/">LoadSys</a>: it was so much fun to hang
with this crew from Illinois, even though they promised some pool
and we didn&rsquo;t manage to find a place with tables &ndash; what a pity!</p>

<p>Besides the fun and the jokes that evening/night was also very
interesting since <a href="https://twitter.com/joeytrapp">Joey</a>
caught me to discuss the latest developments in the JS
ecosystem, from EmberJS to AngularJS: I must admit that it
was a very inspiring exchange of ideas, and that we both share
the same doubts about long-term, <strong>maintainable NodeJS
architectures</strong>.</p>

<p> #sob</p>

<h2>See you next year?</h2>

<p><img class="right" src="http://odino.org/images/sf.jpg"></p>

<p>The city was pretty good, the conference better than anything
I could expect and full of friendly nerds craving for new
concepts, ideas and patterns: all in all, I must admit that
the CakeFest is an event I would definitely like to join
again in the future.</p>

<p>Who knows where the <a href="http://bakery.cakephp.org/articles/predominant/2013/03/20/cakefest_2013_-_vote_for_the_location">crazy band is heading next year!</a></p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[See you in Paris at the 2013 edition of the PHP Forum]]></title>
		
		<link href="http://odino.org/see-you-in-paris-at-the-2013-edition-of-the-php-forum/"/>
		<updated>2013-09-21T16:04:00-04:00</updated>
		<id>http://odino.org/see-you-in-paris-at-the-2013-edition-of-the-php-forum</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>In late november I will be for a few days in Paris,
attending and speaking at the 2013 edition of the
<a href="http://afup.org/pages/forumphp2013/sessions.php">Forum PHP Paris</a>:
funny enough, I&rsquo;ve only been to Paris for conferences so far,
as my <em>first-timer</em> there was during the
<a href="http://odino.org/symfony-live-2011-my-pov/">2011 edition of the Symfony Live</a>.</p>

<!-- more -->


<p><img class="right" src="http://odino.org/images/paris.jpg"></p>

<p>Topic of my talk will be what we&rsquo;ve witnessed
at <a href="http://afup.org/pages/forumphp2013/sessions.php#894">Namshi building our team and stack</a>:
from recruiting talents to automated testing, from
SOA&rsquo;s rules to deciding to use cutting-edge technologies
like <a href="http://angularjs.org/">AngularJS</a>: don&rsquo;t miss the
opportunity to
<a href="http://afup.org/pages/forumphp2013/inscription.php">reserve your seat for the event</a>,
since there will be amazing speakers, like
Igor Wiedler talking about <a href="http://afup.org/pages/forumphp2013/sessions.php#967">Stack</a>,
PHP&rsquo;s rack, and
Dustin Whittle who will give his insights about
<a href="http://afup.org/pages/forumphp2013/sessions.php#964">scaling PHP apps</a>.</p>

<p>See you in the core of europe!</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[HTTP/1.1, SPDY and HTTP/2.0, again]]></title>
		
		<link href="http://odino.org/http-slash-1-dot-1-spdy-and-http-slash-2-dot-0-again/"/>
		<updated>2013-09-01T17:48:00-04:00</updated>
		<id>http://odino.org/http-slash-1-dot-1-spdy-and-http-slash-2-dot-0-again</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>Today, tired like hell due to an almost sleepless night,
I gave my second (and last) talk at the <a href="http://cakefest.org">CakeFest</a>
in San Francisco.</p>

<!-- more -->


<p>It was a slightly remixed version of the same talk I gave at the
IPC in Germany last year, with a few addition and changes: I hope the
attendees have enjoyed the conference as well as my 2 <strong>small</strong>
contributions as much as I did.</p>

<p>As usual, the presentation is on <a href="http://www.slideshare.net/odino/http-colon-slash-slash-end-of-the-road-cakefest-2013-in-san-francisco">slideshare</a>:
here are the slides for the lazy ones :)</p>

<div class="slideshare" id="__ss_25801971"><iframe src="http://www.slideshare.net/slideshow/embed_code/25801971 " width="850" height="730" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe></div>


<p>Cheers!</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Tips and Tricks for you Service-Oriented Architecture]]></title>
		
		<link href="http://odino.org/tips-and-tricks-for-you-service-oriented-architecture/"/>
		<updated>2013-08-31T19:05:00-04:00</updated>
		<id>http://odino.org/tips-and-tricks-for-you-service-oriented-architecture</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>Today I gave the first of my 2 presentations scheduled for the
<a href="http://cakefest.org">CakeFest</a> here in San Francisco,
&ldquo;<a href="http://www.slideshare.net/odino/tips-and-tricks-for-your-service-oriented-architecture-cakefest-2013-in-san-francisco">Tips and Tricks for your SOA</a>&rdquo;.</p>

<!-- more -->


<p>It basically contains a few tips derived from our experience at
<a href="http://en-ae.namshi.com">Namshi</a> while building our own service-oriented
architecture, and I hope, since there&rsquo;s not <em>that</em> much material
about SOA out there, that this can serve as a good feedback from who
is actually embracing this architectural style.</p>

<p>As always, the slides are on <a href="http://www.slideshare.net/odino/tips-and-tricks-for-your-service-oriented-architecture-cakefest-2013-in-san-francisco">slideshare</a>,
and I&rsquo;m embedding the presentation
here for those who immediately want to have a look at it:</p>

<div class="slideshare" id="__ss_25786089"><iframe src="http://www.slideshare.net/slideshow/embed_code/25786089 " width="850" height="730" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe></div>


<p>Tomorrow, as per the conference&rsquo;s schedule, I will be giving my other talk,
&ldquo;HTTP colon slash slash: end of the road?&rdquo;, a remake of what I
presented at the <a href="http://www.slideshare.net/odino/http-colon-slash-slash-the-end-of-the-road">IPC in Mainz last year</a>,
with some more contents and &ndash; hopefully &ndash; fancier slides :-P</p>

<p>Cheers!</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[WiFi not connecting or being wonky on a Dell XPS in Ubuntu 13.04]]></title>
		
		<link href="http://odino.org/wifi-not-connecting-or-being-wonky-on-a-dell-xps-in-ubuntu-13-dot-04/"/>
		<updated>2013-08-18T23:51:00-04:00</updated>
		<id>http://odino.org/wifi-not-connecting-or-being-wonky-on-a-dell-xps-in-ubuntu-13-dot-04</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>Today, even though I come from a weekend
of barely sleeping, I decided, after an entire
day unable to connect to the WiFi of the office,
to try to fix this issue that seems to be affecting
the Dell XPS harder than other laptops.</p>

<!-- more -->


<p>After googling for a while and realizing that
even at home I got no luck with my wireless,
I decided to go on with my own usual solution,
which means <strong>downgrading the kernel or grub</strong>.</p>

<p>You can get a list of the <em>installables</em> from
any terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> dpkg -l 'linux-*' | sed '/^ii/!d;/'"$(uname -r | sed "s/\(.*\)-\([^0-9]\+\)/\1/")"'/d;s/^[^ ]* [^ ]* \([^ ]*\).*/\1/;/[0-9]/!d'</span></code></pre></td></tr></table></div></figure>


<p>And since I&rsquo;m currently using <code>3.8.0-27-generic</code>
I decided to give a slightly previous one a try;
let&rsquo;s edit grub:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo /etc/kernel/postrm.d/zz-update-grub 3.8.0-19-generic /boot/vmlinuz-3.8.0-19-generic</span></code></pre></td></tr></table></div></figure>


<p>This solved the issue, at least for me ;&ndash;)</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Hello US, I'm coming to San Francisco]]></title>
		
		<link href="http://odino.org/hello-us-im-coming-to-san-francisco/"/>
		<updated>2013-08-01T05:24:00-04:00</updated>
		<id>http://odino.org/hello-us-im-coming-to-san-francisco</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>At the end of August I will
be travelling to reach SF and
the <a href="http://cakefest.org/">CakeFest</a>, the annual
conference about
<a href="http://cakephp.org/">CakePHP</a>.</p>

<!-- more -->


<p>Funny thing is, I have two talks
and none of them deals with Cake, <strong>at all</strong> :)</p>

<p>I will be talking about the
evolution of Web Protocols, in
particular HTTP/2.0 and SPDY, in a
remake of the <a href="http://www.slideshare.net/odino/http-colon-slash-slash-the-end-of-the-road">talk I gave the IPC</a>,
in Mainz, last year.</p>

<p>My second talk will be a <em>new entry</em>, a
collection of tips, advices and tricks
in order to manage a SOA, learnt <strong>the hard
way</strong>.</p>

<p>If you are going to be around San Francisco
in the first days of Semptember, feel free to
ping me!</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Sending HipChat notifications in PHP]]></title>
		
		<link href="http://odino.org/sending-hipchat-notifications-in-php/"/>
		<updated>2013-07-19T14:20:00-04:00</updated>
		<id>http://odino.org/sending-hipchat-notifications-in-php</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>This morning I added a couple handlers to
<a href="https://github.com/namshi/notificator">Notificator</a>, one for
RabbitMQ and another for <a href="https://hipchat.com">HipChat</a>: in
this post I would like to show you how easy is to integrate
HipChat within your systems.</p>

<!-- more -->


<p>The handler takes advantage of the
<a href="https://github.com/hipchat/hipchat-php">PHP SDK</a> that the HipChat
team built, which is very, very good and
<a href="https://packagist.org/packages/hipchat/hipchat-php">available through packagist</a>.</p>

<p>First thing you will need to do, is to create an instance of a
notification manager and adding the handler to it, with
an HipChat client and the API token you can generate from the HipChat
admin interface:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Namshi\Notificator\Manager</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Namshi\Notificator\Notification\Handler\HipChat</span> <span class="k">as</span> <span class="nx">HipChatHandler</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">HipChat\HipChat</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Namshi\Notificator\Notification\HipChat\HipChatNotification</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$hipChatClient</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">HipChat</span><span class="p">(</span><span class="s1">&#39;YOUR_API_TOKEN_HERE&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$hipChatHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">HipChatHandler</span><span class="p">(</span><span class="o">%</span><span class="nx">hipChatClient</span><span class="p">);</span>
</span><span class='line'><span class="nv">$manager</span>      <span class="o">=</span> <span class="k">new</span> <span class="nx">Manager</span><span class="p">();</span>
</span><span class='line'><span class="nv">$manager</span><span class="o">-&gt;</span><span class="na">addHandler</span><span class="p">(</span><span class="nv">$hipChatHandler</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you only need to define a notification with a few, HipChat-specific,
properties and trigger it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$notification</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">HipChatNotification</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;YOLO!&#39;</span><span class="p">,</span> <span class="c1">// message</span>
</span><span class='line'>  <span class="s1">&#39;Alex&#39;</span><span class="p">,</span>  <span class="c1">// sender</span>
</span><span class='line'>  <span class="s1">&#39;room1&#39;</span><span class="p">,</span> <span class="c1">// name of the room you want this message to appear</span>
</span><span class='line'>  <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;hipchat_notify&#39;</span>            <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span> <span class="c1">// optional: should send notifications to everyone?</span>
</span><span class='line'>      <span class="s1">&#39;hipchat_color&#39;</span>             <span class="o">=&gt;</span> <span class="nx">HipChat</span><span class="o">::</span><span class="na">COLOR_GREEN</span><span class="p">,</span> <span class="c1">// optional: background color of the notification</span>
</span><span class='line'>      <span class="s1">&#39;hipchat_message_format&#39;</span>    <span class="o">=&gt;</span> <span class="nx">HipChat</span><span class="o">::</span><span class="na">FORMAT_TEXT</span><span class="p">,</span> <span class="c1">// optional: text or html</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$manager</span><span class="o">-&gt;</span><span class="na">trigger</span><span class="p">(</span><span class="nv">$notification</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The result is pretty self-explanatory:</p>

<p><img class="center" src="http://odino.org/images/hipchat-php.png"></p>

<p>Kind of the <a href="https://github.com/namshi/notificator/blob/master/examples/hipchat.php">same code</a>
is also available, as an example,
on the <a href="https://github.com/namshi/notificator">notificator repository</a>,
under the <a href="https://github.com/namshi/notificator/tree/master/examples">examples</a> folder.</p>

<p>The greatness of Notificator are its handlers, so if you feel
we should add another, useful handler, just shout out!
Even better, you can contribute to the project by sending
a <a href="https://github.com/namshi/notificator/pulls?direction=desc&amp;page=1&amp;sort=created&amp;state=closed">pull request</a>
like <a href="https://twitter.com/cirpo">Alessandro</a>,
<a href="https://twitter.com/pborreli">Pascal</a> and
<a href="https://twitter.com/cordoval">Luis</a> already did!</p>

<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>The sad truth is that capistrano has an hipchat gem/extension, but you cant really plug it the way you want (at least this happens to non-rubiers) <a href='#fnref:1' rev='footnote'>↩</a></li>
    </ol>
</div>

]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[AB testing in PHP with namshi/ab]]></title>
		
		<link href="http://odino.org/ab-testing-in-php-with-namshi-slash-ab/"/>
		<updated>2013-07-13T14:27:00-04:00</updated>
		<id>http://odino.org/ab-testing-in-php-with-namshi-slash-ab</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>AB testing is a powerful tecnique that
lets you gather metrics about different
versions of a feature: it basically
consist into displaying a number of
different variations of it to your
users and tracking the results to see
which variation performed better.</p>

<p><img class="right" src="http://odino.org/images/ab-testing.jpg"></p>

<p>An example? In an e-commerce system,
you usually have an &ldquo;Add to cart&rdquo; button:
have you ever though about the impact that
single sentence has on your customers?
What would sound better, between &ldquo;Add to cart&rdquo;
and &ldquo;Buy now&rdquo;, for example? Copywriters
away, you want <strong>data</strong> to tell you that!</p>

<p>This is why AB testing is important:
you serve different versions of something,
and track the results to improve the
experience users have while using your
application: for example, Google benchmarked
<a href="http://gigaom.com/2009/07/09/when-it-comes-to-links-color-matters/">40 different shades of blue</a>
to find out how the rate of clickthrough
would be altered.</p>

<p>At <a href="http://en-ae.namshi.com">Namshi</a> we
decided to ease AB testing by creating a
very simple library that would let you generate
and manage tests in a very easy and practical
way: that&rsquo;s how <a href="https://github.com/namshi/ab">Namshi/AB</a>
was born.</p>

<!--   more -->


<h2>Installation</h2>

<p>You can install the library via composer,
as it&rsquo;s available on <a href="https://packagist.org/packages/namshi/ab">packagist</a>.</p>

<p>Then include it, specifying a major and
minor version, in your <code>composer.json</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"namshi/ab": "1.0.*"</span></code></pre></td></tr></table></div></figure>


<h2>Creating and running tests</h2>

<p>The library is very small, and it comes bundled with
2 classes, <code>Test</code> and <code>Container</code>: as you can probably
guess, the first is a representation of an AB test and
the 2nd serves as a convenient container for all of your
test instances.</p>

<p>Here&rsquo;s how you can create a test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Namshi\AB\Test</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Namshi\AB\Container</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$cssTest</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Test</span><span class="p">(</span><span class="s1">&#39;css&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;default.css&#39;</span>   <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;new.css&#39;</span>       <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$abContainer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Container</span><span class="p">(</span><span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="nv">$cssTest</span>
</span><span class='line'><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point, for example, you can start
AB testing your website by changing the CSS
in the view:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&lt;html&gt;</span>
</span><span class='line'><span class="x">  &lt;head&gt;</span>
</span><span class='line'><span class="x">      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$abContainer</span><span class="p">[</span><span class="s1">&#39;css&#39;</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">getVariation</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x">&quot;  /&gt;</span>
</span><span class='line'><span class="x">      ...</span>
</span><span class='line'><span class="x">      ...</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>getVariation()</code> will calculate the variation
(<code>default.css</code> or <code>new.css</code>) according to the
odds of each variation (66% for the first one,
33% for the second one) and will return a string
representing the variation.</p>

<h2>Persisting the variations through an entire session</h2>

<p>Of course, you want to display variations but be
consistent with each user, so that if a user gets
a variation, it will continue getting the same variation
throughout his entire session: to do so, just calculate
a random integer (seed), store it in session and pass it to
each test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="nb">session_start</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;seed_for_example_test&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;seed_for_example_test&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">mt_rand</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$test</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Test</span><span class="p">(</span><span class="s1">&#39;example&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;a&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;b&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$test</span><span class="o">-&gt;</span><span class="na">setSeed</span><span class="p">(</span><span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;seed_for_example_test&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// as long as the seed doesn&#39;t change</span>
</span><span class='line'><span class="c1">// getVariation() will always return the</span>
</span><span class='line'><span class="c1">// same variation</span>
</span><span class='line'><span class="nv">$test</span><span class="o">-&gt;</span><span class="na">getVariation</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Soon, you will realize that having a per-test seed
is <strong>not efficient at all</strong>, that&rsquo;s why you can create
a global seed and pass it to the container: from that
seed, the container will take care of generating a seed
for each test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="nb">session_start</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;seed&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;seed&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">mt_rand</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// pass the seed into the constructor</span>
</span><span class='line'><span class="nv">$abContainer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Container</span><span class="p">(</span><span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">Test</span><span class="p">(</span><span class="s1">&#39;greet&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;Hey dude!&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;Welcome&#39;</span>   <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)),</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">Test</span><span class="p">(</span><span class="s1">&#39;background-color&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;yellow&#39;</span>    <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;white&#39;</span>     <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)),</span>
</span><span class='line'><span class="p">),</span> <span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;seed&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// or with a setter</span>
</span><span class='line'><span class="nv">$abContainer</span><span class="o">-&gt;</span><span class="na">setSeed</span><span class="p">(</span><span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;seed&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Disabling the tests</h2>

<p>Sometimes you might want to disable tests
for different purposes, for example if
the user agent who is visiting the page is a bot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$test</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Test</span><span class="p">(</span><span class="s1">&#39;my_ab_test&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;a&#39;</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;b&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$test</span><span class="o">-&gt;</span><span class="na">disable</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$test</span><span class="o">-&gt;</span><span class="na">getVariation</span><span class="p">();</span> <span class="c1">// will return &#39;a&#39;!</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you disable the test and run it,
it will always return the first variation,
no matter what its odds are, even if it&rsquo;s zero.</p>

<h2>An example</h2>

<p>I would recommend you to have a look at the
<a href="https://github.com/namshi/AB/tree/master/examples">example provided</a> under the <code>examples</code> directory:
it&rsquo;s pretty silly, but it gives you an idea of
how easy is to create and run AB tests with
this library.</p>

<p><img class="center" src="http://odino.org/images/ab.png"></p>

<p>If you look at the code, you will soon realize that
it&rsquo;s very simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">require</span> <span class="nx">__DIR__</span> <span class="o">.</span> <span class="s1">&#39;/../vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Namshi\AB\Test</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Namshi\AB\Container</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">session_start</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;seed&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;seed&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">mt_rand</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$abt</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Container</span><span class="p">(</span><span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">Test</span><span class="p">(</span><span class="s1">&#39;greet&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;Hey dude!&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;Welcome&#39;</span>   <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)),</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">Test</span><span class="p">(</span><span class="s1">&#39;background-color&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;yellow&#39;</span>    <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;white&#39;</span>     <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)),</span>
</span><span class='line'><span class="p">),</span> <span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;seed&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;html&gt;</span>
</span><span class='line'><span class="x">    &lt;head&gt;</span>
</span><span class='line'><span class="x">        &lt;style&gt;</span>
</span><span class='line'><span class="x">            * {</span>
</span><span class='line'><span class="x">                background-color: </span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$abt</span><span class="p">[</span><span class="s1">&#39;background-color&#39;</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">getVariation</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x">;</span>
</span><span class='line'><span class="x">            }</span>
</span><span class='line'><span class="x">        &lt;/style&gt;</span>
</span><span class='line'><span class="x">    &lt;/head&gt;</span>
</span><span class='line'><span class="x">    &lt;body&gt;</span>
</span><span class='line'><span class="x">        &lt;h1&gt;</span>
</span><span class='line'><span class="x">            </span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$abt</span><span class="p">[</span><span class="s1">&#39;greet&#39;</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">getVariation</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">        &lt;/h1&gt;</span>
</span><span class='line'><span class="x">        </span>
</span><span class='line'><span class="x">        &lt;div&gt;</span>
</span><span class='line'><span class="x">            Your seed is </span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;seed&#39;</span><span class="p">];</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">        &lt;/div&gt;</span>
</span><span class='line'><span class="x">    &lt;/body&gt;</span>
</span><span class='line'><span class="x">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, never write an application like this ;&ndash;)
this serves just as an example.</p>

<h2>Additional features</h2>

<p>We tried to extensively cover the available features of
the library in its <a href="https://github.com/namshi/ab">README</a>,
so I will just sum them up here:</p>

<ul>
<li>the container implements the <code>ArrayAccess</code> interface, so you can
retrieve tests like if they were stored into an array (<code>$abContainer['my_test']</code>)</li>
<li>since AB tests are very useful only when you <strong>track</strong>
the results, we added a <strong>tracking name</strong> that you can specify
for each test: this is due to the fact that your test might be
called <code>add_to_cart_text</code> but in your tracking tool, you
have to reference the test with the tracking tool&rsquo;s ID, which
might be a very clueless string (ie. <code>test_id_4njktn4t4tjjnn4on</code>)</li>
<li>you can also add an array of parameters to each test and retrieve
them later on: this is due to the fact that once you track the test&rsquo;s
result, you might want to send additional data together with the
tracking name, the variation and the result</li>
</ul>


<h2>Why not choosing an existing library</h2>

<p>Of course we checked out what the market was
offering, but weren&rsquo;t able to find out a very
good, generic-purpose, library in order to
generate AB tests:</p>

<ul>
<li><a href="https://packagist.org/packages/jm/ab-bundle">jm/ab-bundle</a>
is unfortunately coupled with Symfony2 and Twig, so
you can&rsquo;t really call it a stack-free library: even though
we <strong>love</strong> Symfony2, not all of our services run with
it and we don&rsquo;t want to <strong>force a technology just to
have a functionality</strong></li>
<li><a href="http://phpabtest.com/index">phpabtest</a> is a full-stack
service, meaning that it provides a library to register and
handle tests but also tracks stuff via Google Analytics; moreover,
<a href="https://github.com/briancray/phpA-B/blob/master/phpab.php">we didn&rsquo;t like the code that much</a></li>
</ul>


<p>At the end of the day, <code>namshi/ab</code> is a <strong>1 man-day effort</strong>, so we
spiked for a bit and decided that it was worth it.</p>

<h2>Testing this library</h2>

<p>We added a few PHPUnit tests, so you just have to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">cd /path/to/namshi/ab</span>
</span><span class='line'>
</span><span class='line'><span class="x">phpunit</span>
</span></code></pre></td></tr></table></div></figure>


<p>The funny thing is that we also added some test to check that
the library correctly <a href="https://github.com/namshi/AB/blob/master/tests/Namshi/AB/Test/TestTest.php#L161">generates variations according to their odds</a>.</p>

<h2>FOSS</h2>

<p>The library is available on
<a href="https://github.com/namshi/AB">Github</a>: please let
<a href="https://github.com/namshi">us</a> know if you
would like to see something different, have a suggestion
or whatsoever: even better than that, <strong>feel free to open
a pull request</strong> if we screwed up with anything!</p>
]]>
		</content>
	</entry>
	
</feed>