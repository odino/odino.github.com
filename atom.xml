<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Alessandro Nadalin]]></title>
  <link href="http://odino.github.com/atom.xml" rel="self"/>
  <link href="http://odino.github.com/"/>
  <updated>2012-01-24T03:25:03+01:00</updated>
  <id>http://odino.github.com/</id>
  <author>
    <name><![CDATA[Alessandro Nadalin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Media types and hypermedia services: beyond REST architectures]]></title>
    <link href="http://odino.github.com/hypermedia-services-beyond-rest-architectures/"/>
    <updated>2012-01-24T03:22:00+01:00</updated>
    <id>http://odino.github.com/hypermedia-services-beyond-rest-architectures</id>
    <content type="html"><![CDATA[<p>RESTafarians should support the abandon of the
original term - REpresentational State Transfer -  in favour of
some fresh new words.</p>

<!-- more -->


<h2>RESTcalation</h2>

<p>REST became popular as an alternative to <a href="http://www.w3.org/TR/2000/NOTE-SOAP-20000508/">SOAP</a>
in writing webservices, while, in fact, they are different and some kind
of complementary in some ways: first of all, <strong>SOAP is not an architectural
style</strong>; this is pretty interesting since lot of people actually think that
<strong>REST <em>equals</em> some kind of API style</strong>.</p>

<p>It was pretty obvious that REST would have gained so much attention:</p>

<ul>
<li>sold as <strong>SOAP&#8217;s nemesis</strong>, while developers were starting to feel frustrated
with the WS-* stack</li>
<li>it seemed so simple: <code>GET</code>, <code>POST</code>, <code>404</code>, <code>200</code>, <code>Cache-Control</code> and you&#8217;re done</li>
<li>many RAD frameworks were using <strong>URI templates</strong>, so it seemed that using such
this kind of schemes was a <strong>really good standardization</strong> (while they
are coupling-prone<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>, one of the aspects that REST fights)</li>
</ul>


<p>REST has - basically - 5 constraints ( the sixth one is
<a href="http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm#sec_5_1_7">Code On Demand</a>,
but it&#8217;s not <em>that</em> important ):</p>

<ul>
<li>client/server communication</li>
<li>stateleness</li>
<li>caching</li>
<li>layering</li>
<li>uniform interface</li>
</ul>


<p>and, on the web, mainly with the HTTP protocol, people have been able to build:</p>

<ul>
<li>client/server models</li>
<li>stateless communications</li>
<li>cacheable resources</li>
<li>layered systems<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup></li>
</ul>


<p>What&#8217;s missing? The <strong>uniform interface</strong>.</p>

<h2>What is REST&#8217;s uniform interface?</h2>

<p>The greatest example of uniform interface is the <a href="http://my.safaribooksonline.com/9780596809140/1">HTTP protocol</a>:
something able to make 2 pieces of software talk an <a href="http://domaindrivendesign.org/node/132">ubiquitous language</a>.</p>

<p>Think about HTTP verbs, status codes and media types which are transported along the
network: without HTTP
<a href="http://tomayko.com/writings/rest-to-my-wife">it would be hard to face most of the real-world use-cases</a>
we need to model in our software with a universal way to communicate applications&#8217; workflows.</p>

<p>This<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup> wouldn&#8217;t be sensational omitting two things which explain
why the web has been able to tremendously benefit from its uniform interface:
<strong>media types</strong> and <strong>hyperlinks</strong>.</p>

<h2>Media types</h2>

<p>They are - basically - the contract<sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup> between a client and
a server, which defines how they should communicate and exchange resources: an
example is <code>application/xml</code>, another one is <code>text/plain</code>: never forget that
you can have <em>vendor-specific</em> media types (in <a href="http://www.dnsee.com">DNSEE</a> we have
used our own <code>application/vnd.dnsee.ses.+xml;v=1.0</code><sup id='fnref:5'><a href='#fn:5' rel='footnote'>5</a></sup>, an XML -
atom-based - dialect), if you are not ok with re-using existing types from the
<a href="http://www.iana.org/assignments/media-types/index.html">IANA registry</a>.</p>

<p>Media types are not only important for understanding HTTP responses&#8217; bodies,
since - before even parsing a response&#8217;s body - machines can agree on exchanging
informations in a specific format:</p>

<figure class='code'><figcaption><span>The Accept header of an HTTP request</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Accept: text/*, text/html
</span></code></pre></td></tr></table></div></figure>


<p>The <code>Accept</code> header seen above is an example of how a client tells a server
<strong>which media types it understands</strong>:</p>

<ul>
<li><code>text/*</code> tells the server that any kind of text-based media
type can be succesfully interpreted by the client</li>
<li>being a declination of <code>text/*</code>, <code>text/html</code> should be the preferred response
format</li>
</ul>


<p>Servers can behave in different ways based on the media-type requested or used by
clients: for example, if the client POSTs a new resource with a media type the
server doesn&#8217;t get, it will receive back a <code>406 Not Acceptable</code> status code.</p>

<p>All these practices have a name, <strong>content negotiation</strong>, which is applied not
only to media types but also to more human concepts, like responses&#8217; language:</p>

<figure class='code'><figcaption><span>Content negotation based on the language of the resource</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Accept-Language: en; <span class="nv">q</span><span class="o">=</span>1.0, it; <span class="nv">q</span><span class="o">=</span>0.7
</span></code></pre></td></tr></table></div></figure>


<p>Acceptance is not the only criteria used to instantiate a correct communication
at the protocol level: for example, if the server  - on a certain resource -
provides an <code>Allow: HEAD, GET</code> and the client PUTs at that resource it will
receive a <code>405 Method Not Allowed</code> back.</p>

<h2>Hypermedia</h2>

<blockquote><p>When I say hypertext, I mean the simultaneous presentation of information and<br/>controls such that the information becomes the affordance through which the user<br/>(or automaton) obtains choices and selects actions. Hypermedia is just an<br/>expansion on what text means to include temporal anchors within a media stream;<br/>most researchers have dropped the distinction.</p><footer><strong>Roy Fielding</strong> <cite><a href='http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven#comment-718'>REST API Must Be Hypertext-driven</a></cite></footer></blockquote>


<p>When talking about hypermedia on the web, we usually think about <strong>hyperlinks</strong>:</p>

<figure class='code'><figcaption><span>A simple example of web link</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://amazon.com&quot;</span> <span class="nt">&gt;</span>Cool stuff<span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>without considering that hyperlinks can be really complex data structures:</p>

<figure class='code'><figcaption><span>A more complex hyperlinking example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span>
</span><span class='line'>  <span class="na">href=</span><span class="s">&quot;http://amazon.com/payment/2068&quot;</span>
</span><span class='line'>  <span class="na">rel=</span><span class="s">&quot;payment&quot;</span>
</span><span class='line'>  <span class="na">hreflang=</span><span class="s">&quot;en&quot;</span>
</span><span class='line'>  <span class="na">type=</span><span class="s">&quot;text/html&quot;</span>
</span><span class='line'>  <span class="na">name=</span><span class="s">&quot;amazon-payment-2068&quot;</span>
</span><span class='line'><span class="nt">&gt;</span>Cool stuff<span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and that they are not bound to (X)HTML documents:</p>

<figure class='code'><figcaption><span>Atom link indicating how to edit a resource</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;/personas/100&quot;</span> <span class="na">rel=</span><span class="s">&quot;edit&quot;</span> <span class="na">type=</span><span class="s">&quot;application/json&quot;</span><span class="nt">&gt;</span>Modify this!<span class="nt">&lt;/link&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://ietfreport.isoc.org/idref/draft-nottingham-http-cache-channels/">Cache channels</a>
, which let you build more efficient, reliable and scalable services, are a good example
of leveraging the power of hyperlinks in a complex scenario:</p>

<figure class='code'><figcaption><span>A cache channel: reverse proxies take a loot at them in order to invalidate cached representations</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;feed</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.w3.org/2005/Atom&quot;</span>
</span><span class='line'>   <span class="na">xmlns:cc=</span><span class="s">&quot;http://purl.org/syndication/cache-channel&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>Invalidations for www.example.org<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;id&gt;</span>http://admin.example.org/events/<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;self&quot;</span>
</span><span class='line'>     <span class="na">href=</span><span class="s">&quot;http://admin.example.org/events/current&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;prev-archive&quot;</span>
</span><span class='line'>     <span class="na">href=</span><span class="s">&quot;http://admin.example.org/events/archive/1234&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;updated&gt;</span>2007-04-13T11:23:42Z<span class="nt">&lt;/updated&gt;</span>
</span><span class='line'>    <span class="nt">&lt;author&gt;</span>
</span><span class='line'>       <span class="nt">&lt;name&gt;</span>Administrator<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>       <span class="nt">&lt;email&gt;</span>web-admin@example.org<span class="nt">&lt;/email&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/author&gt;</span>
</span><span class='line'>    <span class="nt">&lt;cc:precision&gt;</span>60<span class="nt">&lt;/cc:precision&gt;</span>
</span><span class='line'>    <span class="nt">&lt;cc:lifetime&gt;</span>2592000<span class="nt">&lt;/cc:lifetime&gt;</span>
</span><span class='line'>    <span class="nt">&lt;entry&gt;</span>
</span><span class='line'>      <span class="nt">&lt;title&gt;</span>stale<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>      <span class="nt">&lt;id&gt;</span>http://admin.example.org/events/1125<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>      <span class="nt">&lt;updated&gt;</span>2007-04-13T10:31:01Z<span class="nt">&lt;/updated&gt;</span>
</span><span class='line'>      <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;http://www.example.org/img/123.gif&quot;</span> <span class="na">type=</span><span class="s">&quot;image/gif&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;http://www.example.org/img/123.png&quot;</span> <span class="na">type=</span><span class="s">&quot;image/png&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;cc:stale/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/entry&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/feed&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hyperlinks are used to connect resources and verify their freshness in a M2M scenario,
and not only rendered by a browser &#8220;just&#8221; to be clicked by a user.</p>

<h2>REST in the world</h2>

<p>Never talked about <a href="http://tools.ietf.org/html/rfc3023">media types</a> with your
colleagues?  <br/>
Ordinary.</p>

<p>Never heard about <a href="http://www.w3.org/TR/html4/struct/links.html#adef-hreflang">hreflang</a>
attributes in hyperlinking?  <br/>
Ordinary.</p>

<p>Don&#8217;t you know the difference between <code>text/xml</code> and <code>application/xml</code>?  <br/>
Ordinary.</p>

<p>Never thought that if you consume some data, when their URL changes you can still
fetch them without changing any line of code?  <br/>
Less ordinary, but I can&#8217;t judge you.</p>

<p>REST failed: most of the times we hear people talking about REST they discuss about
building <em>*plain-old-XML over HTTP webservices</em>, without even knowing the importance of
having an extensible infrastructure supporting updates and not breaking
retrocompatibility with your consumers.</p>

<h2>Enter hypermedia services</h2>

<blockquote><p>By applying the software engineering principle of generality to the component interface, the overall system architecture is simplified and the visibility of interactions is improved. Implementations are decoupled from the services they provide, which encourages independent evolvability.<br/>The trade-off, though, is that a uniform interface degrades efficiency, since information is transferred in a standardized form rather than one which is specific to an application&#8217;s needs.<br/>The REST interface is designed to be efficient for large-grain hypermedia data transfer, optimizing for the common case of the Web, but resulting in an interface that is not optimal for other forms of architectural interaction.</p><footer><strong>Roy Fielding</strong> <cite><a href='http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm#sec_5_1_5'>The Uniform Interface</a></cite></footer></blockquote>


<p>Hypermedia services are the ones that rely on hypermedia controls in order to efficiently
implement decoupling and avoid breaking retrocompatibility.</p>

<p>For instance, let&#8217;s look at the <em>URI templates coupling</em> problem:</p>

<figure class='code'><figcaption><span>When a resource is created, tell the client its address</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>201 Created
</span><span class='line'>Location: /personas/24
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>When a resource is moved, tell the client its new address</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>301 Moved Permanently
</span><span class='line'>Location: /api/personas/24
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Throw some semantic CRUD into the mix</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/products/5&quot;</span> <span class="na">rel=</span><span class="s">&quot;update&quot;</span> <span class="err">...</span> <span class="nt">&gt;</span>Product 1<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  ...
</span></code></pre></td></tr></table></div></figure>


<h2>Enter hypermedia-aware clients</h2>

<blockquote><p>When the client decides which URI to call and when, they run the risk of attempting to request state transitions<br/>that are not valid for the current state of the server side resource. <br/>An example from my problem domain &#8230; it&#8217;s not allowed to &#8220;start&#8221; a virtual machine (VM) until you have &#8220;deployed&#8221; it.<br/>The server knows about URIs to initiate each of the state changes (via a POST), but the<br/>representation of the VM lists only the URIs for state transitions that are valid from the current state.<br/>This makes it extremely easy for the client to understand that trying to start a VM that hasn&#8217;t been deployed yet is not legal, because there will be no corresponding URI in the VM representation.</p><footer><strong>Craing McClanahan</strong> <cite><a href='http://tech.groups.yahoo.com/group/rest-discuss/message/12358'>REST-discuss Mailing List</a></cite></footer></blockquote>


<p>Hypermedia-aware clients are those client able to detect, understand, process, ignore hypermedia
controls, making no assumption in consuming a resource.</p>

<p>People should really care about implementing HATEOAS<sup id='fnref:6'><a href='#fn:6' rel='footnote'>6</a></sup> and HATEOAS-detection,
since it has proven to be a winning factor in writing robust, fault-tolerant, balanced and
durable systems:</p>

<div class="slideshare" id="__ss_1547275"><iframe src="http://www.slideshare.net/slideshow/embed_code/1547275 " width="100%" height="550" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe></div>




<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>URI templates would not be a problem - per sè - if developers wouldn&#39;t forget about decoupling URIs with the application&#39;s flow <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>Layered system are now a big part of the web, not only of the enterprise world, thanks to social services and the social web: in order to face webscale problems we now need - more than ever - reverse proxies, gateway caches, the cloud&#8230; <a href='#fnref:2' rev='footnote'>↩</a></li><li id='fn:3'>Machine-To-Machine ubiquitous communication <a href='#fnref:3' rev='footnote'>↩</a></li><li id='fn:4'>As stated earlier in some of my posts or at some conferences, REST has contracts (called media types) just like SOAP has WSDLs <a href='#fnref:4' rev='footnote'>↩</a></li><li id='fn:5'>&#8220;ses&#8221; stands for Service Expression Synthax <a href='#fnref:5' rev='footnote'>↩</a></li><li id='fn:6'>Hypermedia As The Engine Of Application State <a href='#fnref:6' rev='footnote'>↩</a></li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Edge Side Includes, how to spare terabytes every day]]></title>
    <link href="http://odino.github.com/edge-side-includes-how-to-spare-terabytes-every-day/"/>
    <updated>2012-01-20T14:15:00+01:00</updated>
    <id>http://odino.github.com/edge-side-includes-how-to-spare-terabytes-every-day</id>
    <content type="html"><![CDATA[<p>I have an idea for an RFC that I would like to write, based on some thoughts I
had in the last months.</p>

<!-- more -->


<p>Lots of you probably know <a href="http://www.w3.org/TR/esi-lang">ESI</a>, the specification
written by <a href="http://www.akamai.com/">Akamai</a> and <a href="http://www.oracle.com/index.html">Oracle</a>
back in 2001.</p>

<p>It basically consists in a XML dialect which lets <a href="http://en.wikipedia.org/wiki/Reverse_proxy">reverse proxies</a>
(eg. <a href="https://www.varnish-cache.org/">Varnish</a>) cache fragments of your webpages
in order not to hit your application for output fragments that can be re-used
across many clients.</p>

<figure class='code'><figcaption><span>A webpage including an ESI tag</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    ...
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    ...
</span><span class='line'>
</span><span class='line'>    pile of HTML
</span><span class='line'>
</span><span class='line'>    ...
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;esi:include</span> <span class="na">src=</span><span class="s">&quot;http://example.com/footer.html&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>A <strong>really good presentation</strong> about ESI is <a href="http://www.slideshare.net/fabpot/caching-on-the-edge/99">Caching On The Edge</a>
, by <a href="http://fabien.potencier.org/">Fabien Potencier</a>.</p>

<h2>ESI&#8217;s context</h2>

<p>ESI is a really great technology that recently gained hype, in my ecosystem (PHP),
thanks to the Symfony2 architecture, fully embracing the HTTP specification:
consider that Symfony2 has <strong>no application-level caching layer</strong>, so everything
is done with the HTTP cache, and ESI is the solution for really dynamic webpages.</p>

<p>&#8230;but who&#8217;s responsible of processing ESI fragments? Digging some more, an esi
processor can be a <a href="http://rack.rubyforge.org/">middleware in your architecture</a>
, a reverse proxy or a <a href="http://symfony.com/doc/2.0/book/http_cache.html#using-edge-side-includes">software component</a>
; basically any kind of software implementing the ESI specification.</p>

<p>But hey, all this kind of things are softwares that lie on the server side.</p>

<h2>A different approch</h2>

<p>I was thinking about pushing ESI to the client side:</p>

<figure class='code'><figcaption><span>The response retrieved with the browser would generate lots of subrequests</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    ...
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;esi:include</span> <span class="na">src=</span><span class="s">&quot;http://example.com/header.html&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;esi:include</span> <span class="na">src=</span><span class="s">&quot;http://example.com/navigation.html&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;esi:include</span> <span class="na">src=</span><span class="s">&quot;http://example.com/foo.html&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;esi:include</span> <span class="na">src=</span><span class="s">&quot;http://example.com/bar.html&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;esi:include</span> <span class="na">src=</span><span class="s">&quot;http://example.com/footer.html&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Seems a bad idea, since, if the browser is capable to merge different fragments, retrieved
with different HTTP requests, for assembling a really simple webpage you would
need to hit your application much more times than with a single request, so there
is no real need to ask for ESI support in clients, in this scenario.</p>

<p>But there&#8217;s a <em>real-world</em> application of ESI on the client side that should
<strong>save lot of traffic</strong> over the internet and <strong>lot of bandwith</strong>.</p>

<p><strong>Rarely-changing output fragments</strong>.</p>

<p>A RCOF - sorry for this bad acronym - is everything that can be <strong>cached for
relatively long time</strong> (talking more about days than hours), like Facebook&#8217;s
footer or your google analytics JS code.</p>

<p><img class="center" src="http://odino.github.com/images/fb.footer.png"></p>

<h2>The use-case</h2>

<p>Why should we always transport Facebook&#8217;s footer over the network?</p>

<p>We don&#8217;t need it: once the user landed on his profile page, as he jumps
to other FB pages, <strong>the footer it&#8217;s always the same</strong>, and <strong>should be retrieved from
the client&#8217;s cache</strong> instead of being sent over the network.</p>

<p>This means that once you send your response</p>

<figure class='code'><figcaption><span>Your profile page</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>My Profile!<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'>    ...
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;esi:include</span> <span class="na">src=</span><span class="s">&quot;http://example.com/footer.html&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>the browser makes an additional request to retrieve the footer and then, on subsequent
requests, also <strong>on different webpages</strong>, it can use the cached fragment:</p>

<figure class='code'><figcaption><span>Facebook help center</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>Hi n00b, how can we help you?<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'>    ...
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;esi:include</span> <span class="na">src=</span><span class="s">&quot;http://example.com/footer.html&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>because it recognizes that fragment has been already retrieved once you requested
the &#8220;Your profile&#8221; page.</p>

<p>You probably don&#8217;t get the great aspect of ESI on the client side, so <strong>carefully
read the next chapter</strong>.</p>

<h2>A few numbers</h2>

<p>Facebook&#8217;s footer is about <code>1.4k</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;pageFooter&quot;</span> <span class="na">data-referrer=</span><span class="s">&quot;page_footer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;contentCurve&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;clearfix&quot;</span> <span class="na">id=</span><span class="s">&quot;footerContainer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;mrl lfloat&quot;</span> <span class="na">role=</span><span class="s">&quot;contentinfo&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;fsm fwn fcg&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;span&gt;</span> Facebook © 2012<span class="nt">&lt;/span&gt;</span> · <span class="nt">&lt;a</span> <span class="na">rel=</span><span class="s">&quot;dialog&quot;</span> <span class="na">href=</span><span class="s">&quot;/ajax/intl/language_dialog.php?uri=http%3A%2F%2Fwww.facebook.com%2Fpress%2Finfo.php%3Fstatistics&quot;</span> <span class="na">title=</span><span class="s">&quot;Use Facebook in another language.&quot;</span><span class="nt">&gt;</span>English (US)<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;navigation fsm fwn fcg&quot;</span> <span class="na">role=</span><span class="s">&quot;navigation&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.facebook.com/facebook&quot;</span> <span class="na">accesskey=</span><span class="s">&quot;8&quot;</span> <span class="na">title=</span><span class="s">&quot;Read our blog, discover the resource center, and find job opportunities.&quot;</span><span class="nt">&gt;</span>About<span class="nt">&lt;/a&gt;</span> · <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.facebook.com/campaign/landing.php?placement=pf&amp;amp;campaign_id=402047449186&amp;amp;extra_1=auto&quot;</span> <span class="na">title=</span><span class="s">&quot;Advertise on Facebook.&quot;</span><span class="nt">&gt;</span>Advertising<span class="nt">&lt;/a&gt;</span> · <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.facebook.com/pages/create.php?ref_type=sitefooter&quot;</span> <span class="na">title=</span><span class="s">&quot;Create a Page&quot;</span><span class="nt">&gt;</span>Create a Page<span class="nt">&lt;/a&gt;</span> · <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://developers.facebook.com/?ref=pf&quot;</span> <span class="na">title=</span><span class="s">&quot;Develop on our platform.&quot;</span><span class="nt">&gt;</span>Developers<span class="nt">&lt;/a&gt;</span> · <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.facebook.com/careers/?ref=pf&quot;</span> <span class="na">title=</span><span class="s">&quot;Make your next career move to our awesome company.&quot;</span><span class="nt">&gt;</span>Careers<span class="nt">&lt;/a&gt;</span> · <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.facebook.com/privacy/explanation&quot;</span> <span class="na">title=</span><span class="s">&quot;Learn about your privacy and Facebook.&quot;</span><span class="nt">&gt;</span>Privacy<span class="nt">&lt;/a&gt;</span> · <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.facebook.com/legal/terms?ref=pf&quot;</span> <span class="na">accesskey=</span><span class="s">&quot;9&quot;</span> <span class="na">title=</span><span class="s">&quot;Review our terms of service.&quot;</span><span class="nt">&gt;</span>Terms<span class="nt">&lt;/a&gt;</span> · <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.facebook.com/help/?ref=pf&quot;</span> <span class="na">accesskey=</span><span class="s">&quot;0&quot;</span> <span class="na">title=</span><span class="s">&quot;Visit our Help Center.&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                Help
</span><span class='line'>            <span class="nt">&lt;/a&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>while an ESI fragment is <code>0.5k</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;esi:include</span> <span class="na">src=</span><span class="s">&quot;http://facebook.com/footer&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Calculating how much traffic the internet needs to sustain with the 2
approaches, traditional and ESIsh, is trivial:</p>

<ul>
<li>Facebook has something more than <a href="http://www.facebook.com/press/info.php?statistics">400M daily users</a></li>
<li>it has <a href="http://www.alexa.com/siteinfo/facebook.com">12 pageviews per user</a></li>
<li>retrieving the footer the traditional way, we add <code>1.5k</code> of data each users&#8217; request</li>
<li>retrieving it with ESI, we add <code>1.5k</code> of data for the first users&#8217; request,
<code>0.5k</code> for the consequent ones</li>
</ul>


<p>Then we can extrapolate some data:</p>

<figure class='code'><figcaption><span>Facebook daily pageviews</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>daily users * avg pageviews
</span><span class='line'>
</span><span class='line'>400M * 12
</span><span class='line'>
</span><span class='line'>4800M
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Data traffic without client-side ESI</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>daily pageviews * footer fragment weight
</span><span class='line'>
</span><span class='line'>4800M * 1.4k
</span><span class='line'>
</span><span class='line'>~6.25 terabytes
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Data traffic with client-side ESI</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>(first requests * footer fragment weight) + ((daily pageviews - first pageviews) * ESI tag weight)
</span><span class='line'>
</span><span class='line'>(400M * 1.4k) + ((4800M - 400M) * 0.5k)
</span><span class='line'>
</span><span class='line'>~2.57 terabytes
</span></code></pre></td></tr></table></div></figure>


<p>So, just for the footer, <strong>facebook could decrease the internet traffic by 2 and a
half terabytes <em>per day</em></strong>, just looking at its footer.</p>

<p>It&#8217;s obvious that <strong>this approach rewards facebook</strong> (it processes less stuff on his
side, whether it uses a reverse proxy as gateway cache or not), ISPs and the final
user, who&#8217;s taking advantage of a (more) <strong>lean network</strong>.</p>

<p>If you enlarge your vision, think about sites like Google, LinkedIN, twitter and all
those web applications which send <strong>useless pieces of HTTP responses over the
internet</strong>.</p>

<h2>Client side ESI invalidation</h2>

<p>If you are scared about invalidating this kind of cache, the solution would be
really easy:</p>

<figure class='code'><figcaption><span>Facebook before updating the footer</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    ...
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    ...
</span><span class='line'>
</span><span class='line'>    pile of FB code
</span><span class='line'>
</span><span class='line'>    ...
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;esi:include</span> <span class="na">src=</span><span class="s">&quot;http://example.com/footer.html?v=1&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Facebook after updating the footer</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    ...
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    ...
</span><span class='line'>
</span><span class='line'>    pile of FB code
</span><span class='line'>
</span><span class='line'>    ...
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;esi:include</span> <span class="na">src=</span><span class="s">&quot;http://example.com/footer.html?v=2&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the <strong>revision change in the ESI tag</strong>, something we already, daily, use for
managing <a href="http://muffinresearch.co.uk/archives/2008/04/08/automatic-asset-versioning-in-django/">static assets&#8217; caching</a>.</p>

<h2>This is not a panacea</h2>

<p>I don&#8217;t wanna sound arrogant proposing this tecnique, but I would really like to
<strong>get feedbacks about such this kind of approach</strong>: as stated, this can be a
great plus for the global network but its <strong>limited to RCOF</strong>.</p>

<p>The only aspect I haven&#8217;t considered yet is the second HTTP request the browser
needs to do to retrieve the fragment, once, parsing the response, it finds an ESI
tag: since I really don&#8217;t know how to calculate how it affects the network,
so any kind of help would be appreciated.</p>

<p>The aim of this post is to consider if <strong>browser vendors should really start thinking
about implementing ESI processors</strong> directly in their products, for a better, faster
and leaner web.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting back on OrientDB]]></title>
    <link href="http://odino.github.com/getting-back-on-orientdb/"/>
    <updated>2012-01-03T17:16:00+01:00</updated>
    <id>http://odino.github.com/getting-back-on-orientdb</id>
    <content type="html"><![CDATA[<p>It&#8217;s been a while since I don&#8217;t give any update about
<a href="https://github.com/congow/Orient">Orient</a>,
the library we are developing to work with
<a href="http://www.orientechnologies.com/orient-db.htm">OrientDB</a>
in PHP&#8230;</p>

<!-- more -->


<p>&#8230;so here&#8217;s a brief recap:</p>

<ul>
<li><a href="https://twitter.com/#!/jol1hahn">Daniele</a> has joined the team, with some great
brand new ideas ( the adoption, for example, of
<a href="https://github.com/composer/composer">Composer</a>; I will blog later on this )</li>
<li>I am personally taking care of finishing the open issues ( mostly integration tests )
for the <code>beta-5</code> release, the one introducing <strong>objects hydration</strong></li>
<li><a href="http://davidfunaro.com/">David</a> is leading the moves for the <code>beta-6</code> release,
which is the last one before going RC, introducing <strong>persistence</strong> into the
<a href="https://github.com/congow/Orient/tree/master/src/Congow/Orient/ODM">data mapper</a></li>
</ul>


<p>Uh, well, <a href="http://code.google.com/p/orient/wiki/Y2011">happy 2012</a>: this year we
 will see some great things from OrientDB and its ecosystem!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating your own services for the Symfony2 DIC]]></title>
    <link href="http://odino.github.com/creating-your-own-services-for-the-symfony2-dic/"/>
    <updated>2011-01-08T19:50:00+01:00</updated>
    <id>http://odino.github.com/creating-your-own-services-for-the-symfony2-dic</id>
    <content type="html"><![CDATA[<p>I want you to know how to write a service and let the container handle it for you.</p>

<!-- more -->


<p>This post comes from a very cool evening with <a href="http://agiledevelopment.it">Jacopo Romei</a>
and <a href="http://davidfunaro.com">David Funaro</a>, two friends of mine, developers too.</p>

<h2>A container?</h2>

<p>Yes, a container: Symfony2 implements a <a href="http://fabien.potencier.org/article/12/do-you-need-a-dependency-injection-container">dependency injection container</a>
able to load any service you need ( a service can be the <strong>DB connection</strong>, a
<strong>Twitter WS</strong>, a <strong>mailer</strong> ) in the way you prefer.</p>

<p>Ever thought the <code>factories.yml</code> of symfony 1.4 was evil? The DIC basically does
the same thing. But, the right way.</p>

<h2>Why does a container is that great?</h2>

<p>Because it lets you decide the <em>behaviour</em> of the framework.</p>

<p>Ever thought the <code>sfActions</code> were crap and wanted to build <strong>your own C of the MVC</strong>
with symfony 1.4 in a simple way? A pain in the mess :)</p>

<p>With the DIC you are able to <strong>configure Symfony&#8217;s architecture</strong>.</p>

<h2>Building your own service</h2>

<p>I&#8217;ll show a really simple example.</p>

<p>To let the container manage your extension you simply need:</p>

<ul>
<li>a bundle</li>
<li>an extension, able to load the cascading configuration of your service</li>
<li>your service class(es)</li>
</ul>


<p>If you are familiar with the Sf2 sandbox you know it comes bundled with a simple
application bundle, <code>HelloBundle</code>, which exposes the route:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/hello/:name</span></code></pre></td></tr></table></div></figure>


<p>and renders a template saying <code>hello</code> to the name:</p>

<p><img class="center" src="http://odino.github.com/images/hello.sf2.png"></p>

<p>We will add the mood of our application to that page ;-)</p>

<p>First of all we need to tell Sf2 that we want to enable our service:</p>

<figure class='code'><figcaption><span>app/config/config_dev.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">hello.service</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">~</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we have to build an extension able to load the configuration for our service.</p>

<p>Inside <code>src/Application/HelloBundle</code> we create a directory <code>DependencyInjection</code>
and create the <code>HelloExtension</code> class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Application\HelloBundle\DependencyInjection</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\Extension\Extension</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\XmlFileLoader</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\ContainerBuilder</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\Definition</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\Reference</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\Resource\FileResource</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">HelloExtension</span> <span class="k">extends</span> <span class="nx">Extension</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">serviceLoad</span><span class="p">(</span><span class="nv">$config</span><span class="p">,</span> <span class="nx">ContainerBuilder</span> <span class="nv">$container</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$loader</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XmlFileLoader</span><span class="p">(</span><span class="nv">$container</span><span class="p">,</span> <span class="nx">__DIR__</span><span class="o">.</span><span class="s1">&#39;/../Resources/config&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$loader</span><span class="o">-&gt;</span><span class="na">load</span><span class="p">(</span><span class="s1">&#39;hello.xml&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$container</span><span class="o">-&gt;</span><span class="na">setParameter</span><span class="p">(</span><span class="s1">&#39;hello.service.mood&#39;</span><span class="p">,</span> <span class="nb">isset</span><span class="p">(</span><span class="nv">$config</span><span class="p">[</span><span class="s1">&#39;mood&#39;</span><span class="p">]));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getAlias</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s1">&#39;hello&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getXsdValidationBasePath</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">__DIR__</span><span class="o">.</span><span class="s1">&#39;/../Resources/config/schema&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getNamespace</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s1">&#39;http://www.symfony-project.org/schema/dic/doctrine&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you take a closer look to the <code>serviceLoad</code> method</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">serviceLoad</span><span class="p">(</span><span class="nv">$config</span><span class="p">,</span> <span class="nx">ContainerBuilder</span> <span class="nv">$container</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$loader</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XmlFileLoader</span><span class="p">(</span><span class="nv">$container</span><span class="p">,</span> <span class="nx">__DIR__</span><span class="o">.</span><span class="s1">&#39;/../Resources/config&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$loader</span><span class="o">-&gt;</span><span class="na">load</span><span class="p">(</span><span class="s1">&#39;hello.xml&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$container</span><span class="o">-&gt;</span><span class="na">setParameter</span><span class="p">(</span><span class="s1">&#39;hello.service.mood&#39;</span><span class="p">,</span> <span class="nb">isset</span><span class="p">(</span><span class="nv">$config</span><span class="p">[</span><span class="s1">&#39;mood&#39;</span><span class="p">]));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>you&#8217;ll notice that it accepts, as parameters, the configuration ( yes, the YML
configuration, the one we left untouched with the <code>~</code> symbol ) and the container.</p>

<p>Why does our extension calls the <code>serviceLoad</code> method? That comes from the YAML
configuration done before:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">hello.service</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">~</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remember? If we wrote <code>hello.obama</code>, we should have defined a <code>obamaLoad</code> method
in our extension.</p>

<p>Then it creates an <code>XMLFileLoader</code> and loads the configuration of our services,
which lies in the <code>Resources/config</code> folder, an XML file called <code>hello.xml</code>.</p>

<p>Then, it sets a parameter, for the service: it sets <code>hello.service.mood</code>; <code>true</code>
if we have defined it in the configuration, false otherwise ( our situation ).</p>

<p>Ok, things will become clear watching at the <code>hello.xml</code>, located in
<code>src/Application/HelloBundle/Resources/config/hello.xml</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; ?&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.symfony-project.org/schema/dic/services&quot;</span>
</span><span class='line'>    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.symfony-project.org/schema/dic/services http://www.symfony-project.org/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;parameters&gt;</span>
</span><span class='line'>        <span class="nt">&lt;parameter</span> <span class="na">key=</span><span class="s">&quot;hello.service.class&quot;</span><span class="nt">&gt;</span>Application\HelloBundle\Service\Hello<span class="nt">&lt;/parameter&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/parameters&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;services&gt;</span>
</span><span class='line'>        <span class="c">&lt;!--- Annotation Metadata Driver Service --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;hello_service&quot;</span> <span class="na">class=</span><span class="s">&quot;%hello.service.class%&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;argument&gt;</span>%hello.service.mood%<span class="nt">&lt;/argument&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/service&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/services&gt;</span>
</span><span class='line'><span class="nt">&lt;/container&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you see, it defines a service ( <code>hello_service</code> ), which istantiates the class
<code>%hello.service.class%</code>, a parameter defined some lines above, with the argument
<code>%hello.service.mood%</code>.</p>

<p>Yes, that parameter comes from the <code>HelloExtension</code>!</p>

<p>Remember?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$container</span><span class="o">-&gt;</span><span class="na">setParameter</span><span class="p">(</span><span class="s1">&#39;hello.service.mood&#39;</span><span class="p">,</span> <span class="nb">isset</span><span class="p">(</span><span class="nv">$config</span><span class="p">[</span><span class="s1">&#39;mood&#39;</span><span class="p">]));</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, here we are passing to the XML the parameter <code>%hello.service.mood%</code> with
<code>false</code> value.</p>

<p>Ok, we are close to the end, what&#8217;s missing there? Oh, our service!</p>

<p>In the XML we stated that the class of the <code>hello_service</code> service should be
<code>Application\HelloBundle\Service\Hello</code>, so we only need to create it under
<code>src/Application/HelloBundle/Service/Hello.php</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Application\HelloBundle\Service</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Hello</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$mood</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mood</span> <span class="o">=</span> <span class="nv">$mood</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">__toString</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mood</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s2">&quot;sunshine reggae!&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;Oh no&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>as you see, <strong>the mood is passed by the DIC in the constructor</strong>*, and we have
defined a <code>__toString</code> returning 2 different strings based on the value of the mood.</p>

<p>Ok, we&#8217;re done.</p>

<p>Open the dummy front controller bundled with the sandbox and pass a second
argument to the template:</p>

<figure class='code'><figcaption><span>src/Application/HelloBundle/Controller/HelloController.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">indexAction</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$hello</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;hello_service&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="s1">&#39;HelloBundle:Hello:index.twig&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="nv">$name</span><span class="p">,</span> <span class="s1">&#39;mood&#39;</span> <span class="o">=&gt;</span> <span class="nv">$hello</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>then edit the twig template:</p>

<figure class='code'><figcaption><span>[src/Application/HelloBundle/Resource/views/Hello/index.twig] [] (dic.twig)</span> <a href='http://odino.github.com/downloads/code/dic.twig'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% extends &quot;HelloBundle::layout.twig&quot; %}
</span><span class='line'>
</span><span class='line'>{% block content %}
</span><span class='line'>
</span><span class='line'>    Hello {{ name }}!
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    I feel like &quot;{{ mood }}&quot;!
</span><span class='line'>{% endblock %}
</span></code></pre></td></tr></table></div></figure>


<p>So, let&#8217;s see it in action:</p>

<p><img class="center" src="http://odino.github.com/images/on-no-sf2.png"></p>

<p>Now we can edit the service configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">hello.service</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">mood</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>and see what happens:</p>

<p><img class="center" src="http://odino.github.com/images/sf2-sunshine.png"></p>

<h2>&#8220;Oh shit&#8221;&#8230; A bit lost? Here&#8217;s a recap!</h2>

<p>Ok, let&#8217;s try to explain things again!</p>

<p>In the configuration of you application ( <code>app/config/config_dev.yml</code> ) you add
to your application a new service ( <code>hello.service</code> ), with no parameters.</p>

<p>Then, when in the application you call the service <code>hello_service</code>, the DIC
looks for an extension able to load the service, which is <code>HelloExtension</code>.
It runs the method serviceLoad, which looks to an XML describing the service
passing it the parameters you defined in the YAML configuration ( none ).</p>

<p>Then the DIC instantiate the service class with the parameters mapped in the XML
( <code>$mood = false</code> ).</p>

<p>The second time, we have defined <code>$mood</code> as <code>true</code>, so the container instantiates
the class with a really simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$service</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Hello</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>the result is that you get an instance of your service configured as you want.</p>
]]></content>
  </entry>
  
</feed>
