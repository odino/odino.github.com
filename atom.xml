<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title><![CDATA[Alessandro Nadalin]]></title>
	<link href="http://odino.org/atom.xml" rel="self"/>
	<link href="http://odino.org/"/>
	<updated>2014-07-11T18:08:56+04:00</updated>
	<id>http://odino.org/</id>
	<author>
		<name><![CDATA[Alessandro Nadalin]]></name>
		
	</author>
	<generator uri="http://octopress.org/">Octopress</generator>
	
	<entry>
		
			<title type="html"><![CDATA[Nikki 0.25.1: let's play with the filesystem!]]></title>
		
		<link href="http://odino.org/nikki-0-dot-25-dot-1-lets-play-with-the-filesystem/"/>
		<updated>2014-07-11T17:40:00+04:00</updated>
		<id>http://odino.org/nikki-0-dot-25-dot-1-lets-play-with-the-filesystem</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>In the last 24 hours I rolled out some changes
I actually personally needed to get way more
productive than ever on nikki, and leave my old-school
IDE turned off.</p>

<!-- more -->


<blockquote><p>If you are new to nikki, you might want to read
<a href="http://odino.org/last-weekend-i-wrote-an-ide-in-javascript/">this introductory post</a> I wrote a while ago.</p></blockquote>

<h2>What&rsquo;s new?</h2>

<p>Probably the most needed feature, at least by me,
is to be able to look for a text in files, and
it has been <a href="https://github.com/odino/nikki/commit/6e6540147d6c0d165ab0aad3d4ed7bd267eb9f5f">rudimentally implemented</a>
while  I will focus, in the next days, on how to
make this much more user-friendly: in any case,
by activating the search bar through <code>ctrl + shift + g</code>
you are going to search in <code>grep</code> mode, which means
that instead of looking by file name we are gonna
grep the content of those files.</p>

<p><img class="center" src="http://odino.org/images/nikki-0.25.1.png"></p>

<p>As you see in the screenshot above, Nikki then
returns you a list of files and highlights the matches:
what I  want to work on, then, is to be able to
click on those matches and open that file
at that specific line.</p>

<p>How about other changes?</p>

<ul>
<li>we are <a href="https://github.com/odino/nikki/commit/704927c369ef156d3d03d90af68853657328c5f4">watching the FS now</a>, so if you touch a file
from your terminal you&rsquo;ll magically see it appear in nikki!</li>
<li>when searching for files with <code>ctrl + shift +f</code> you are now gonna be able to also <a href="https://github.com/odino/nikki/commit/bae2c1b51617551bf814869e815a2eea1246a8cb">look for directories</a></li>
<li>generally improved the search: now <code>proj gu .js</code> will match <code>/path/to/projects/test/gulpfile.js</code></li>
<li>nikki will now show the current focus (filesystem / search / editor) right <a href="https://github.com/odino/nikki/commit/fb1d05f2eac3370348d41158a2e55c337d28a874">above the editor</a></li>
<li>added the <a href="https://github.com/odino/nikki/commit/17a4dd7a7c53a7fa5a6c360818857e35eb246143">awesome nikki logo</a></li>
<li>you can configure the <a href="https://github.com/odino/nikki/commit/5f2b680750bccac228e471fdb7b81762df8bde0c">keyboard shortcuts</a></li>
<li>you can now <a href="https://github.com/odino/nikki/commit/79f37e158417a9ea6b6dfa7a50f06b25a046cf4f">delete files and directories</a>: simply hover on a file and press <code>delete</code></li>
</ul>


<h2>What&rsquo;s fixed?</h2>

<ul>
<li>when you move between tabs, now nikki will <a href="https://github.com/odino/nikki/commit/d294446cc089207db143324a192827bcb636b65c">remember the position of the cursor</a> on each tab</li>
<li>issues while <a href="https://github.com/odino/nikki/commit/a38be0e0c14cab6036d52a585c165bcd34baf4dd">focusing on the filesystem</a></li>
<li>nikki <a href="https://github.com/odino/nikki/commit/36a820025db61a30e55735e733888d25fa2fe2c1">would epically crash</a> if you have an open tab that points to a file, you delete it, and then refresh nikki, as it couldn&rsquo;t  find the file</li>
<li>fixed <a href="https://github.com/odino/nikki/commit/1bce21bb0b60d7bbca1a3993d0b652cfff27178f">a crash</a> when re-opening a tab after closing all tabs</li>
<li>small, informative <a href="https://github.com/odino/nikki/commit/81c197f655cf4d06402ab5c930fc0bdb08e0bbd0">fixes</a></li>
</ul>


<h2>How do I get all this awesomeness?</h2>

<p>As simple as running an <code>npm install -g nikki</code> if this is the first time
you hear about it: for the ones who already have it installed on their
systems simply run a <code>npm update -g nikki</code>.</p>

<p>Then open a terminal, type <code>nikki</code> and let the show begin!</p>

<h2>What&rsquo;s  next?</h2>

<p>I&rsquo;m giving 100% priority to bugs before implementing new features:
given I&rsquo;m using nikki on a daily basis I usually find <a href="https://github.com/odino/nikki/issues?direction=desc&amp;labels=bug&amp;page=1&amp;sort=updated&amp;state=open">gotchas</a>
and fix them straight away.</p>

<p>If there are not gonna be too many fixes to do I will focus
on making the editor &ldquo;smarter&rdquo;, by improving the search in files
and adding find / find &amp; replace functionalities (the ACE editor
has built-in support for them, so shouldn&rsquo;t be that much of
a problem).</p>

<p>Keep an eye on the <a href="https://github.com/odino/nikki">github project</a> and let me know your feedback!</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Nikki 0.19.1: awesomeness won't stop]]></title>
		
		<link href="http://odino.org/nikki-0-dot-19-dot-1-awesomeness-wont-stop/"/>
		<updated>2014-07-07T17:30:00+04:00</updated>
		<id>http://odino.org/nikki-0-dot-19-dot-1-awesomeness-wont-stop</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>Given it&rsquo;s Ramadan and we have some spare time at the
end of the day, I&rsquo;m getting the chance to be
<a href="https://github.com/odino/nikki/commits/master">quite active</a>
with the development of <a href="https://github.com/odino/nikki">Nikki</a>.</p>

<!-- more -->


<blockquote><p>If you are new to nikki, you might want to read
<a href="http://odino.org/last-weekend-i-wrote-an-ide-in-javascript/">this introductory post</a> I wrote a while ago.</p></blockquote>

<p>I figured out the best way to document these changes, besides
writing a blog post, would be to document them with
<a href="https://github.com/odino/nikki/issues?direction=desc&amp;page=1&amp;sort=updated&amp;state=closed">Github issues</a>
and by beefing up the <a href="https://github.com/odino/nikki/">README</a> &mdash; so
you should definitely have a look there.</p>

<h2>What&rsquo;s new?</h2>

<p><img class="center" src="http://odino.org/images/nikki-0.19.1.png"></p>

<p>The biggest change is that you are now gonna be running nikki
as a <a href="https://github.com/odino/nikki/commit/efecd05ab8a02406d63011e465850f2931ecef07">detached process</a>:
once you start nikki you will see it running on port <code>9123</code> (by default)
and you will be able to stop it with a simple <code>nikki --stop</code>; to
check whether nikki is running simply run a <code>nikki --status</code>.</p>

<p>This change was made possible using node&rsquo;s spawning capabilities
and <a href="https://github.com/substack/dnode">dnode</a>, which lets you
implement <a href="http://en.wikipedia.org/wiki/Remote_procedure_call">RPC</a>
in NodeJS: once you start nikki the main process spawns itself,
the spawned one listens on <code>9124</code> for signals and the main process
ends; when we issue <code>nikki --stop</code> we will just be sending a
<code>shutdown</code> signal to the spawned nikki
process through an RPC call.</p>

<p>Other changes?</p>

<ul>
<li>added the <code>ctrl + shift + l</code> shortcut to <a href="https://github.com/odino/nikki/commit/40899aaeecb70c02c1c1a00e566335d190508c2f">close editor tabs</a></li>
<li>once you re-open nikki, tabs that were open at the time you closed <a href="https://github.com/odino/nikki/commit/daa95c0efd3022b744016830e2f7995cea138a52">will be open again</a></li>
<li>using <a href="https://github.com/odino/nikki/commit/7e2f2baec4eb2aec7ba2980de2a82d8ab2b1bff5">jQuery 2.X</a></li>
<li>&ldquo;<a href="https://github.com/odino/nikki/commit/1a3fd2605ed6f325409fd8d489bd624a72d8a7af">open in github</a>&rdquo; you can now configure nikki so that
once you use the <code>ctrl + g</code> shortcut in a file it will open it, in github, in a new broser tab</li>
<li>added <a href="https://github.com/odino/nikki/commit/46e5c1881b6ca331b64cc470086f7af7936af69e">filesystem icons from fontawesome</a></li>
<li>when you search for files, now, the <a href="https://github.com/odino/nikki/commit/649106f5d491165b3e1c982cbb76e9967cb81c0d">file path will be shown next to the filename</a> (so if you have 3 <code>index.js</code> in your codebase&hellip;   &hellip;no worries anymore!)</li>
<li><a href="https://github.com/odino/nikki/commit/7db31f927b3027dfa1408e2af84b6806a6b91d12">debug mode</a>, so that you can troubleshoot problems in an easier way</li>
</ul>


<h2>What&rsquo;s fixed?</h2>

<ul>
<li>navigation used to show <a href="https://github.com/odino/nikki/commit/d829129992e5e42eed54f7f13492254f3b3df08d">incorrect</a> <a href="https://github.com/odino/nikki/commit/b463eab67816c8fa1c02d30af019e2a9628be458">paths</a></li>
<li>inconsistencies with the <a href="https://github.com/odino/nikki/commit/4450b27ea477f119b3d7a32a27a37606687ccae0">file search</a></li>
<li><a href="https://github.com/odino/nikki/commit/041397e71198599cc6c4a2ec06a706aff0c72623">shortcuts conflicts</a> with the ACE editor</li>
</ul>


<h2>How to get all these changes?</h2>

<p>As simple as running an <code>npm install -g nikki</code> if this is the first time
you hear about it: for the ones who already have it installed on their
systems simply run a <code>npm update -g nikki</code>.</p>

<p>Then open a terminal, type <code>nikki</code> and let the show begin!</p>

<h2>What&rsquo;s next?</h2>

<p>I will be implementing filesystem operations in these days (delete / create
files and folders) and probably refactor some of the key frontend components, like
the keyboard shortcuts.</p>

<p>Keep an eye on the <a href="https://github.com/odino/nikki">github project</a> and let me know your feedback!</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[History of HTTP, SPDY and HTTP/2.0 - Video]]></title>
		
		<link href="http://odino.org/history-of-http-spdy-and-http-slash-2-dot-0-video/"/>
		<updated>2014-07-07T17:22:00+04:00</updated>
		<id>http://odino.org/history-of-http-spdy-and-http-slash-2-dot-0-video</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>&hellip;and the folks from the <a href="http://cakefest.org/">CakeFest</a> ended up
uploading my <a href="http://www.slideshare.net/odino/http-colon-slash-slash-end-of-the-road-cakefest-2013-in-san-francisco">2nd talk at the conference</a>
as well.</p>

<!-- more -->


<p>It was surely more difficult than my first talk (I was half sick that day)
but I hope you will be able to enjoy this as well:</p>

<iframe width="100%" height="600px" src="http://odino.org//www.youtube.com/embed/PdClg5bMcow" frameborder="0" allowfullscreen></iframe>


<p>Cheers!</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Tips and tricks for your Service Oriented Architecture - Video]]></title>
		
		<link href="http://odino.org/tips-and-tricks-for-your-service-oriented-architecture-video/"/>
		<updated>2014-07-06T00:05:00+04:00</updated>
		<id>http://odino.org/tips-and-tricks-for-your-service-oriented-architecture-video</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>The folks from the <a href="http://cakefest.org/">CakeFest</a> got to upload the video of my
<a href="http://www.slideshare.net/odino/tips-and-tricks-for-your-service-oriented-architecture-cakefest-2013-in-san-francisco">first talk</a>
at the 2013 edition of their conference online.</p>

<!-- more -->


<p>It was my first trip to the States and got the chance to discuss
with the guys pitfalls and advantages of going SOA:</p>

<iframe width="100%" height="600px" src="http://odino.org//www.youtube.com/embed/PdClg5bMcow" frameborder="0" allowfullscreen></iframe>

]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Planning to write long-term APIs? @cirpo and me shared our experience]]></title>
		
		<link href="http://odino.org/planning-to-write-long-term-apis-at-cirpo-and-me-shared-our-experience/"/>
		<updated>2014-07-05T23:34:00+04:00</updated>
		<id>http://odino.org/planning-to-write-long-term-apis-at-cirpo-and-me-shared-our-experience</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>A few weeks ago <a href="https://twitter.com/cirpo">@cirpo</a> and me
flew back to Italy to partecipate to the 2014 edition of the
<a href="http://2014.phpday.it/">PHPDay</a> in Verona, sharing our
experience building APIs.</p>

<!-- more -->


<p>It was really a great time, especially since I missed the
event in the past couple of years, so it was a blast to see
those good&#8217;old tech-friends again.</p>

<p>Our presentation, titled &ldquo;<a href="http://www.slideshare.net/odino/dont-screw-it-up-how-to-build-durable-web-apis-phpday-2014-in-verona-ita">Don&rsquo;t screw it up: how to build durable
web APIs</a>&rdquo;, went <a href="https://joind.in/talk/view/11310">pretty well</a>: have a look below and let me know
if you have any feedback!</p>

<div class="slideshare" id="__ss_34940481"><iframe src="http://www.slideshare.net/slideshow/embed_code/34940481 " width="100%" height="550" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe></div>

]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[The 5 golden rules when writing open source software]]></title>
		
		<link href="http://odino.org/the-5-golden-rules-when-writing-open-source-software/"/>
		<updated>2014-07-05T21:29:00+04:00</updated>
		<id>http://odino.org/the-5-golden-rules-when-writing-open-source-software</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>There you are, you just opened your laptop
and got the inspiration to write a bunch of
code and release it open-source: sounds quite
simple and easy, but you should always keep
in mind a few rules that are going to boost
your &ldquo;creature&rdquo; before releasing it to the
public.</p>

<!-- more -->


<h2>Documentation</h2>

<blockquote><p>If it&rsquo;s not documented, it doesn&rsquo;t exist</p></blockquote>

<p>That&rsquo;s probably the biggest truth of OSS: if you don&rsquo;t
provide a good <a href="https://github.com/visionmedia/express">README</a>
or some <a href="http://pypy.readthedocs.org/en/improve-docs/index.html">more complete docs</a>
it&rsquo;s gonna be hard for people to be able to understand
the value of your software, or to even give it a try and
get straight to the point.</p>

<p><a href="https://readthedocs.org/">ReadTheDocs</a> is an awesome project
that lets you create beautiful documentation for your projects
for free but, if you want to keep things simple, github&rsquo;s
<a href="https://pages.github.com/">pages</a> or <a href="https://help.github.com/articles/about-github-wikis">wiki</a>
might be what you were looking for.</p>

<h2>Packaging</h2>

<p><img class="left" src="http://odino.org/images/npm-logo.png" title="" ></p>

<p>Do never forget about shipping it in a way that makes it easy,
for others, to install your software in a matter of seconds:
a great example, in this sense, is <a href="https://www.npmjs.org/">NPM</a>
for NodeJS, which lets you install modules with a simple <code>npm install moduleName</code>.</p>

<p>This is possible with basically any platform out there: PHP has
<a href="https://getcomposer.org/">Composer</a>, Ruby has <a href="https://rubygems.org/">Gems</a>
and Python uses, if I&rsquo;m not wrong, <a href="https://pypi.python.org/pypi/pip">pip</a>
(there are many other examples, like CocoaPods and so on, but the ones
i mentioned seem to be most mature and stable nowadays<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>).</p>

<h2>Visibility</h2>

<p><img class="right" src="http://odino.org/images/github-logo.png" title="" ></p>

<p>I don&rsquo;t know about you, but I always have a strange feeling
when I open a link to a project and it&rsquo;s hosted somewhere like,
let&rsquo;s say, <a href="https://code.google.com/">GoogleCode</a>: I wouldn&rsquo;t
say that your choices are limited, but whenever you&rsquo;re
gonna pick a hosting solution for your library it&rsquo;s though to look
anywhere but <a href="https://github.com/">Github</a>, as they have:</p>

<ul>
<li>great user experience</li>
<li>good platform for engagement (pull requests, comments)</li>
<li><a href="https://github.com/github">love for the OSS world</a></li>
<li>awesome <a href="https://github.com/blog">vision and communication</a></li>
<li><a href="https://www.flickr.com/photos/ginatrapani/5016915048/">tricks</a> to make your experience fabolous</li>
</ul>


<p>If you want to look for widespread alternatives, though, you might
find Atlassian&rsquo;s <a href="https://bitbucket.org/">BitBucket</a> the most
serious competitor of GitHub.</p>

<h2>Coding standards</h2>

<p>Follow the coding standards that are <em>en vogue</em> in your community:
for example, in PHP you got the <a href="http://www.php-fig.org/">PSR</a>s,
which are guidelines for writing your code, created by the
PHP community itself (or &ndash; at least &ndash; its most prominent members).</p>

<p>Writing code with your own standard will just make it
harder for the ones interested in your project: you want them
to be able to focus on what you&rsquo;re offering and to discuss it,
not to spend too much time reading commas and brackets in weird
positions.</p>

<h2>Tests</h2>

<p><img class="left" src="http://odino.org/images/travis-logo.png" title="" ></p>

<p>Automated tests are probably a must if you plan to have
people relying on your software, especially if what it does
is not contained in very few lines of code (and in any case,
even there tests are so much helpful).</p>

<p>Tests will also help you evaluating contributions from the
community: other devs will get interested in your software,
find a glitch, fix it, add a test and send you a pull
request. At that point you only have to check the code,
because the tests are gonna take care of the build on their own.</p>

<p>Nowadays you don&rsquo;t even have to boot your own machine to run
the tests: hook your library with <a href="https://travis-ci.org/">travis-ci</a>
and you&rsquo;re done!</p>

<h2>Recap</h2>

<p>Before announcing your latest project to the world, I would:</p>

<ul>
<li>put it on github or bitbucket</li>
<li>write a decent <code>README.md</code></li>
<li>create the package on the most suitable package manager</li>
<li>review the code to check everything makes sense</li>
<li>add tests and let them run on Travis</li>
</ul>


<p>I&rsquo;m sure I might have missed something&hellip;   &hellip;so you tell me,
what are <strong>your</strong> golden rules?</p>

<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>Besides, probably, apt :) <a href='#fnref:1' rev='footnote'>↩</a></li>
    </ol>
</div>

]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Nikki v0.16.5: first issues ahead]]></title>
		
		<link href="http://odino.org/nikki-v0-dot-16-dot-5-first-issues-ahead/"/>
		<updated>2014-07-02T22:47:00+04:00</updated>
		<id>http://odino.org/nikki-v0-dot-16-dot-5-first-issues-ahead</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>Today I migrated all the possible issues I knew
from <a href="https://github.com/odino/nikki">nikki</a>&rsquo;s
README to <a href="https://github.com/odino/nikki/issues">github&rsquo;s issues</a>, and started
addressing the first few of them.</p>

<!-- more -->


<blockquote><p>If you are new to nikki, you might want to read
<a href="http://odino.org/last-weekend-i-wrote-an-ide-in-javascript/">this introductory post</a> I wrote a while ago.</p></blockquote>

<p>Among the things I&rsquo;ve been hacking on today:</p>

<ul>
<li>if you tried to open a non-existing directory the server
would crash, now it&rsquo;s simply telling you you&rsquo;re trying to do
something nasty</li>
<li>I added <a href="https://github.com/odino/nikki/blob/master/client/images/favicon.png">this awesome favicon</a> :)</li>
<li>I ported the keyboard shortcuts to the Mac:
whatever you were able to do with <code>ctrl</code> now is also available
with <code>⌘</code></li>
<li>when you boot nikki, now, you will be able to see it running
under the name <code>nikki</code> in the process&#8217; list (try a <code>ps -ef | grep nikki</code>)</li>
<li>you can customize the <a href="https://github.com/odino/nikki/blob/master/.nikki.yml#L9-L25">mappings for syntax highlighting</a> by adding
them in your <code>.nikki.yml</code></li>
</ul>


<p>Contextually, I released <code>v0.16.5</code>, so simply run an
<code>npm update -g nikki</code> and enjoy this bunch of new things!</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Last weekend I wrote an IDE. In JavaScript.]]></title>
		
		<link href="http://odino.org/last-weekend-i-wrote-an-ide-in-javascript/"/>
		<updated>2014-06-29T23:32:00+04:00</updated>
		<id>http://odino.org/last-weekend-i-wrote-an-ide-in-javascript</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>In the past days I&rsquo;ve been spending some hours on a project
I had in mind since a while, and finally got to roll out
something I am already using on a daily basis: a fast IDE
that runs within a browser.</p>

<!-- more -->


<h2>Nikki</h2>

<p>The idea is very simple: why booting a Java monster like
WebStorm / Eclipse / Netbeans when you can satisfy all
of your basic needs with a simple <code>&lt;div contenteditable /&gt;</code>?</p>

<p>Well, because a browser editor would still need to be able
to talk with your filesystem, and that&rsquo;s something a completely
&ldquo;frontend&rdquo; JS app wouldn&rsquo;t be able to do
(<a href="https://hacks.mozilla.org/2014/06/webide-lands-in-nightly/">but might be able to do soon</a>).</p>

<p>So, take JavaScript, put it on the frontend (browser), put
it on the backend (NodeJS), get them to talk (socket.io) and
use a pretty good web editor (ACE), add <code>ctrl + f</code> and <code>ctrl + s</code>
and we&rsquo;re done:</p>

<p><img class="center" src="https://raw.githubusercontent.com/odino/nikki/master/bin/images/nikki-ss.png?token=328420__eyJzY29wZSI6IlJhd0Jsb2I6b2Rpbm8vbmlra2kvbWFzdGVyL2Jpbi9pbWFnZXMvbmlra2kuZ2lmIiwiZXhwaXJlcyI6MTQwMzk4MDA4N30%3D--df43445fcfba173ae878bc6447c1169b61bc59cf"></p>

<h2>How to get started</h2>

<p>Simply install nikki with an <code>npm install -g nikki</code>, <code>cd</code>
into a project&rsquo;s directory and launch the editor with the <code>nikki</code>
command: the editor will launch a new browser window to let
you have fun with your project.</p>

<p>A <code>nikki --help</code> might get the confusion away, but if you
really want to give the project a closer look simply check
the <a href="https://github.com/odino/nikki">README on github</a>.</p>

<p>Of course, of course, of course, I need to clarify a few points:
first of all, nikki is not a &ldquo;real&rdquo; IDE, it&rsquo;s  more a text editor
(the marketer in me!), and it didn&rsquo;t really come out in a single weekend
(even though  the basics were setup last WE); last but not least,
I&rsquo;m not a javascripter (<a href="http://osrc.dfm.io/odino/">I guess</a>), so most of the credit goes
to <a href="http://socket.io/">socket.io</a>, the <a href="http://ace.c9.io/#nav=about">ACE editor</a>
and <a href="https://it.linkedin.com/in/davidfunaro">David</a>, who made me write my
very first lines of JS back in 2011 (I know, so late!)</p>

<h2>Considerations</h2>

<p>I&rsquo;ve started writing this thing 2 weeks ago and I&rsquo;m very happy
with where I&rsquo;ve got so far; in fact, I am writing
this post from &ldquo;my&rdquo; nikki, here&rsquo;s the proof:</p>

<p><img class="center" src="http://odino.org/images/nikki-proof.png"></p>

<p>I plan on fixing a few more bugs I have in my todo list
(because they&rsquo;re &ldquo;bugging&rdquo; me) and would be extremely happy
to fix anything you find while playing with nikki: I must admit
that, by using the latest version of Chrome on Linux, I might
have broken a few things on other browsers, so I&rsquo;d be very
happy to fix anything that comes up (ofc don&rsquo;t mention IE).</p>

<h2>One more thing</h2>

<p>As per the README:</p>

<blockquote><p>Hey, couldn&rsquo;t you simply use TextMate or LightTable?</p>

<p>Yes, but then, where&rsquo;s the fun?</p></blockquote>

<p>Remember, this is a pet project and I firstly did it for
fun, learning and to practice a bit over my spare time:
it is nothing groundbreaking or rocket-science, and I
don&rsquo;t see this going anywhere but my laptop (in terms of
userbase). If you wish to use (or at least try) nikki
I would be very happy though :)</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Use a custom HTTP status code for your apps' healthchecks]]></title>
		
		<link href="http://odino.org/use-a-custom-http-status-code-for-your-apps-healthchecks/"/>
		<updated>2014-04-21T10:20:00+04:00</updated>
		<id>http://odino.org/use-a-custom-http-status-code-for-your-apps-healthchecks</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>To have systems up &amp; running is something, but to
have them healthy it&rsquo;s another story.</p>

<!-- more -->


<p>If you are looking to implement healthchecks in your
architecture beware of being a
bit too simplistic: you might configure, for example,
on of your frontend machines to check the status of the
backend ones every few seconds, so that
<a href="http://wiki.nginx.org/HttpHealthcheckModule">nginx</a> or
<a href="http://haproxy.1wt.eu/download/1.3/doc/haproxy-en.txt">haproxy</a>
can remove the backend if they find it unreliable / unhealthy.</p>

<p>Problem is, there might be tricky situations in which the
backend responds with a <code>200 Ok</code> even though it&rsquo;s not
working<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.</p>

<p>There are a lot of ways to avoid this, but the simplest one,
that takes you 2 minutes and works quite well, is to use a
custom HTTP status code for your healthcheck page &ndash; we use
<code>211 Healthy</code>.</p>

<p>For example, in node, we would do:</p>

<figure class='code'><figcaption><span>Serving response with a custom HTTP status code in NodeJS </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">211</span><span class="p">);</span>
</span><span class='line'><span class="nx">res</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;OK&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>and then we would need to tell our backend that the only status
code that has to be considered healthy is <code>211</code>.</p>

<p>No more, no less.</p>

<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>For example, the backend&#8217;s nginx can just respond with nginx&#8217;s default welcome page, if your host is misconfigured <a href='#fnref:1' rev='footnote'>↩</a></li>
    </ol>
</div>

]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Increase mobile performances by implementing transparent redirects]]></title>
		
		<link href="http://odino.org/increase-mobile-performances-by-implementing-transparent-redirects/"/>
		<updated>2014-03-03T17:58:00+04:00</updated>
		<id>http://odino.org/increase-mobile-performances-by-implementing-transparent-redirects</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>Most of you are aware that one of the biggest problems while
developing mobile apps / websites, is the reduced bandwidth / connectivity
that the user has on his phone compared to traditional devices
connected to a solid WiFi or via cable.</p>

<p>How can you actually improve connectivity to the app? There are tricks to
improve performances, like <strong>transparent redirects</strong>.</p>

<!-- more -->


<h2>An heavy stack</h2>

<p>The stack on which your web apps will run will be heavy, by definition:
HTTP wasn&rsquo;t built with performances in mind<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>, and you might
want to add SSL, to provide your users with an additional security layer,
on top of that.</p>

<p>Now imagine your users requesting <code>GET /my-page</code> and you serving a redirect:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HTTP/1.1 302 Moved temporarily
</span><span class='line'>Host: example.org
</span><span class='line'>Location: /my-new-page</span></code></pre></td></tr></table></div></figure>


<p>Even though, semantically, this is a logic operation,
it doesnt work well with the demand of great performances, since the user will need to
make nother roundtrip connection to get the new resource</p>

<h2>Transparent redirects</h2>

<p>What you can do, instead, is to serve a <em>transparent redirect</em> to the user, so that there is
no additional request to be made:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HTTP/1.1 200 Ok
</span><span class='line'>Host: example.org
</span><span class='line'>Transparent-Status-Code: 302 Moved temporarily
</span><span class='line'>Transparent-Location-Location: /my-new-page
</span><span class='line'>
</span><span class='line'>&lt;html ...</span></code></pre></td></tr></table></div></figure>


<p>In this way the client already has all the information it needs in
order to show the user the data he requested.</p>

<p>Even better: if you are serving contents from an API you can have your main
application handle the transparent redirect with the <code>history.pushState(...)</code>
API of <code>HTML5</code>.</p>

<h2>Current implemetation</h2>

<p>At the moment you will have to be cautious with it, as current browsers (or, at least,
a few of them) treat non <code>2XX</code> status codes as errors, thing that becomes tricky when you
handle things with JS callbacks / promises:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http.get(..., onSuccess, onError)
</span><span class='line'>
</span><span class='line'>// the browser will call onError if the response status code is
</span><span class='line'>// different than 2XX</span></code></pre></td></tr></table></div></figure>


<p>I remember banging our heads over our desks here at the <a href="https://www.namshi.com">Namshi</a>
office, so we decided to use a very simple approach, using <strong>custom headers</strong> with a <code>200 Ok</code>:
if the response ends up in a redirect, we use 2 custom headers (<code>N-Status-Code</code> and <code>N-Location</code>),
intercept the response in our frontends and do our trick with <code>#pushState(...)</code>.</p>

<h2>Future considerations</h2>

<p>It would be nice if, one day, the HTTP spec would be able to incorporate this
behavior natively, with a status code like <code>308 Transparent redirect</code>, so that browser will be able to
automatically update the state of the apps and the user wouldn&rsquo;t need to wait for another roundtrip
connection to see the data they have been requesting, no matter the location.</p>

<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>We&#8217;re talking about  raw performances, scalability is another matter, which is implemented almost flawlessy in the protocol <a href='#fnref:1' rev='footnote'>↩</a></li>
    </ol>
</div>

]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Service Oriented Architectures with Symfony2]]></title>
		
		<link href="http://odino.org/service-oriented-architectures-with-symfony2/"/>
		<updated>2014-02-28T14:31:00+04:00</updated>
		<id>http://odino.org/service-oriented-architectures-with-symfony2</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>Last talk for me in the cold lands of Canada: today it was Symfony2&rsquo;s
turn and how to integrate it with your SOA.</p>

<!-- more -->


<p>As usual, for those who missed it, here are the slides:</p>

<div class="slideshare" id="__ss_31775384"><iframe src="http://www.slideshare.net/slideshow/embed_code/31775384 " width="850" height="650" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe></div>

]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[6 takeways from the second day of ConFoo]]></title>
		
		<link href="http://odino.org/6-takeways-from-the-second-day-of-confoo/"/>
		<updated>2014-02-27T18:27:00+04:00</updated>
		<id>http://odino.org/6-takeways-from-the-second-day-of-confoo</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>Today it was an interesting day here at ConFoo, and I&rsquo;ve
seen some good content dealing with web performances.</p>

<!-- more -->


<h2>Don&rsquo;t pollute domain models with specifications</h2>

<p><img class="right" src="http://odino.org/images/odino-confoo-2.jpg"></p>

<p>During a very good talk I was waiting for since the conference started,
<a href="http://twitter.com/mathiasverraes">Mathias Verrase</a> has been talking
about DDD and domain models and has shown to the audience how you
should not pollute them with specifications.</p>

<p>The proposed approach introduces a bit more verbosity with the advantage
of having cleaner models that reflect your domain.</p>

<p>So, instead of having models knowing the business specification:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$customer-&gt;isPremium();</span></code></pre></td></tr></table></div></figure>


<p>you might want to refactor the code in a way that makes the
information as part of a business rule (hence, the <em>specification</em>),
that will accept a subject in order to verify that it actually
satisfies the rule / specification:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$premiumSpecification-&gt;isSatisfiedBy($customer);</span></code></pre></td></tr></table></div></figure>


<h2>Optimizing images</h2>

<p><a href="http://imageoptim.com/">Imageoptim</a> is a very handy tool to losslessly compress images
and save bandwidth while serving them.</p>

<h2>gzip_static</h2>

<p>Instead of gzipping each and every assets <em>on-the-fly</em> you can tell <code>nginx</code>
to look for a previously gzipped version of the same file.</p>

<p>Compile <code>nginx</code> with this option enabled:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./configure --with-http_gzip_static_module</span></code></pre></td></tr></table></div></figure>


<p>and then turn it on:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gzip_static on;</span></code></pre></td></tr></table></div></figure>


<h2>Turn off tcp_slow_start_after_idle</h2>

<p><a href="http://www.lognormal.com/blog/2012/09/27/linux-tcpip-tuning/">Turning off window resizing</a>
(or&hellip; downsizing) after a slow start will help clients who take a while
to send back packets over the same, slow, TCP connection, as it doesn&rsquo;t resize
the TCP window contrary to what the system would do by default.</p>

<h2>Pagespeed at nginx level</h2>

<p>I already knew about <a href="https://github.com/pagespeed/ngx_pagespeed">ngx_pagespeed</a>
but totally forgot to use it :)</p>

<h2>More RUM monitoring tools</h2>

<p>I&rsquo;ve come across <a href="https://mpulse.soasta.com">mpulse</a> which is another RUM platform.</p>

<p>Even though their UI is a bit old school, they&rsquo;re (of course) real-time and provide
valuable insides, like pageload times and DOM rendering performances.</p>

<p>Sign up on their site, it&rsquo;s free up to 1M visits a month!</p>

<h2>All in all</h2>

<p>Good day for optimizations and delivering a faster experience to your users, looking
forward to my third day &ndash; with my last talk, about SOAs &ndash; in this cold land!</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[AngularJS is the future. Maybe.]]></title>
		
		<link href="http://odino.org/angularjs-is-the-future-maybe/"/>
		<updated>2014-02-27T11:54:00+04:00</updated>
		<id>http://odino.org/angularjs-is-the-future-maybe</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>Today I gave my 2nd talk here at the ConFoo in Montreal,
an overview of why Angular could fit your <em>future</em> requirements
quite well.</p>

<!-- more -->


<p>Enjoy!</p>

<div class="slideshare" id="__ss_31723051"><iframe src="http://www.slideshare.net/slideshow/embed_code/31723051 " width="850" height="650" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe></div>

]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[7 takeways from the first day of ConFoo]]></title>
		
		<link href="http://odino.org/7-takeways-from-the-first-day-of-confoo/"/>
		<updated>2014-02-26T20:34:00+04:00</updated>
		<id>http://odino.org/7-takeways-from-the-first-day-of-confoo</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>Today it was the first day of ConFoo here in Montreal and,
as usual, a conference is always good to wrap your head around
solutions, different standpoints and discussions with other
nerds :)</p>

<!-- more -->


<p><img class="right" src="http://odino.org/images/odino-confoo.jpg"></p>

<h2>Websockets to the rescue</h2>

<p>I&rsquo;ve come to learn about <a href="http://en.wikipedia.org/wiki/WebSocket">WebSocket</a>
quite a while ago but I honestly never found a practical application for our
architecture: nonetheless, in one of the talks it was <a href="http://blog.arungupta.me/2014/02/rest-vs-websocket-comparison-benchmarks/">compared to REST</a>
in a context where multiple API calls are made, and the idea of re-using the same
TCP connection is pretty handy at that point.</p>

<p>For sure, things like <a href="http://stackoverflow.com/questions/12103628/spdy-as-replacement-for-websockets">SPDY</a>
are probably already enough from that point of view, but that&rsquo;s not a valid excuse
for not digging deeper into the WS specification.</p>

<h2>Patterns of batch processing</h2>

<p>During the same talk, <a href="https://twitter.com/arungupta">Arun Gupta</a> spoke about
<a href="https://blogs.oracle.com/arungupta/entry/batch_applications_in_java_ee">JSR 352</a>,
a specification for batch processing introduced in Java EE7.</p>

<p>It was really interesting as the specification is quite &ldquo;obvious&rdquo; but anyhow
efficient, as it structures batch jobs following a few rules:</p>

<ul>
<li>every job must process a specific number of items to process</li>
<li>it is divided in steps</li>
<li>each step is then again divided into 3 different sub-steps

<ul>
<li>reading the content of the item (<code>ItemReader</code>)</li>
<li>processing it, executing transformation and any kind of magic over that content (<code>ItemProcessor</code>)</li>
<li>writing the processed content <em>somewhere</em> (<code>ItemWriter</code>)</li>
</ul>
</li>
</ul>


<p>Dividing batches into jobs of a limited number of items is a golden rule (and I would say
your number should be as close to 1 as possible), while the structure that the JSR proposes
is very clean.</p>

<h2>Xamarin</h2>

<p>This tool might be what you were looking for if you&rsquo;re into mobile development:
its aim is to write code once (in C#) that gets <strong>converted to native code</strong> for both
IOS and Android.</p>

<p>If you had to write an app twice, because you needed to go native, you might really
wanna <a href="https://xamarin.com/">have a look at it</a> as, from what I heard, it might
really simplify your life.</p>

<h2>AppDynamics</h2>

<p>My bad for not being aware of <a href="http://www.appdynamics.com/">AppDynamics</a>, but we&rsquo;re pretty
happy with one of their competitors (<a href="http://newrelic.com/">NewRelic</a>) :)</p>

<p>AD is an <strong>application performance management</strong> platform that, just like NR, provides agents for
various platforms in order to collect metrics and reports from the stuff that runs on your
production servers: definitely worth a look, at least to understand the differences between
these guys and NewRelic.</p>

<h2>Detach DOM elements while transforming them</h2>

<p>Switching to something more browser-oriented, I found out about a very simple but
effective tecnique to optimize browser rendering performances when working with DOM
elements: instead of applying a bunch of transformations on a visible element you can
simply hide it, apply them and then show the element again, so that the browser
won&rsquo;t have to repaint and reflow at every transformation but only when you eventually
make the element visible again.</p>

<p>Another way to implement the same tecnique is to clone the element (so that we are actually
just working with a <strong>virtual DOM node</strong>), apply the transformations to that element and then
replacing the existing one by calling <code>parent.innerHtml(virtualElement)</code>.</p>

<p>Pretty simple but much valuable!</p>

<h2>Optimize DOM animations</h2>

<p>Another way to optimize browser performance upon rendering is to execute animations
on elements with an absolute or fixed position.</p>

<p>Why? Again, because then the browser doesn&rsquo;t have to reflow the whole DOM.</p>

<h2>Lodash</h2>

<p>A very <a href="http://lodash.com/">handy JS library</a> that seems to be <a href="http://lodash.com/benchmarks">way faster</a>
than underscore. It is now considered a <a href="http://stackoverflow.com/questions/13789618/differences-between-lodash-and-underscore">superset of underscore</a>
and you might want to look into using it from now on, in place of its predecessor.</p>

<h2>All in all&hellip;</h2>

<p>It was a fairly good day and my <a href="http://odino.org/orientdb-the-fastest-document-based-graph-database/">presentation about OrientDB</a>
went pretty well, can&rsquo;t wait for tomorrow!</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[OrientDB, the fastest document-based graph database]]></title>
		
		<link href="http://odino.org/orientdb-the-fastest-document-based-graph-database/"/>
		<updated>2014-02-26T15:25:00+04:00</updated>
		<id>http://odino.org/orientdb-the-fastest-document-based-graph-database</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>Today I gave the first of my talks here at the 2014 edition
of the confoo in Montreal, &ldquo;<a href="http://www.slideshare.net/odino/orientdb-the-fastest-documentbased-graph-database-confoo-2014-in-montreal-ca">OrientDB, the fastest
document-based graphdb</a>&rdquo;.</p>

<!-- more -->


<p>For the ones interested in the slides, I am also publishing them,
as usual, here:</p>

<div class="slideshare" id="__ss_31683783"><iframe src="http://www.slideshare.net/slideshow/embed_code/31683783 " width="850" height="650" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe></div>

]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[7 reasons why working for Namshi is great]]></title>
		
		<link href="http://odino.org/7-reasons-why-working-at-namshi-is-great/"/>
		<updated>2014-01-17T17:44:00+04:00</updated>
		<id>http://odino.org/7-reasons-why-working-at-namshi-is-great</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>I&rsquo;ve been working for <a href="http://namshi.com">Namshi</a> for almost 2
years now and I thought it would be interesting to share some
of the reasons why I consider this an ideal place, at the moment.</p>

<!-- more -->


<p>Some of these points can be extended to the company in general,
while some of them are related to the <a href="http://tech.namshi.com">tech department</a>.
All in all I&rsquo;d like to share my experience and what I feel when
I enter (sometimes late) in the office.</p>

<h2>Young and talented people</h2>

<p><img class="right" src="http://farm8.staticflickr.com/7353/11924599125_b40b12de0d_n.jpg"></p>

<p>Here I might repeat what you might have heard on the internet
about <a href="http://www.rocket-internet.de/ventures">Rocket Internet and its ventures</a>,
but working for one of them will make you cross paths with some
of the brightest youngsters across the industry.</p>

<p>If I were to mention everyone, the list would be too long to
fit in this post (and it would grow, like us, as they days go by)
but by walking around the office you can immediately feel
how <strong>many young people are pushing themselves to the max</strong> in
order to make the business as succesfull as possible.</p>

<p>I happen to live with my colleague
<a href="http://ae.linkedin.com/in/casuccioalex">Alessandro</a>,
a <a href="http://www.unibocconi.eu/wps/wcm/connect/Bocconi/SitoPubblico_EN/Navigation+Tree/Home/">Bocconi</a>
graduate from <a href="http://en.wikipedia.org/wiki/Trapani">Trapani</a>,
who has worked for other Rocket ventures in Australia
before landing here in Dubai: see, the amount of work he puts on,
the sleepless nights trying to improve workflows and metrics,
the fervent passion he shows (and the fun as well) on a daily basis
are very difficult to find elsewhere: it takes the right mix
of professionality and age, and I think Namshi makes it
exciting as people come to work to improve, learn and teach,
not (just) for their wage.</p>

<h2>Less talk, more action</h2>

<p><img class="left" src="http://farm4.staticflickr.com/3683/11924594475_e884e51973.jpg"></p>

<p>As Elvis sang<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>, <strong>a little less conversation,
a little more action</strong>: holy words!</p>

<p>We&rsquo;re at a place where we don&rsquo;t rely too much on papers
but proactively experiment solutions (more on this later)
and reward those who make giant leaps with their actions.</p>

<p>It is also worth noting that we don&rsquo;t look <strong>too</strong> much at
experience if people have really the skills to become game changers
in the organization: I&rsquo;ve witnessed people without previous
experiences in teams becoming leaders among their peers.</p>

<p>Additionally, <strong>it&rsquo;s not your job title that defines your boundaries</strong>:
in the tech team, we&rsquo;ve had our most junior member writing and deploying
a NodeJS app in production with Capistrano<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>.</p>

<p>Quoting <a href="ae.linkedin.com/in/sonjaneuber">Sonja</a>:</p>

<blockquote><p>[it matters] that people are really driven, that they are passionate about what they do; it doesn&#8217;t matter that much how long they have worked in their jobs before, 15 years, 5 years, as long as they bring the right attitude and the right spirit on board</p><footer><strong>Sonja, VP - Digital Marketing</strong> <cite><a href='http://youtu.be/NThxiu1HGgM?t=3m1s'>Working at Namshi</a></cite></footer></blockquote>


<h2>MEMEs</h2>

<p><img class="right" src="http://odino.org/images/meme-odino.jpg"></p>

<p>A modern startup cannot live without memes, it&rsquo;s phisically impossible:
here on the right you will find the one our team made for me,
to highlight my nature of late-night coder.</p>

<p>I find it amazing that we can gather together a bunch
of highly-skilled professional to build a dream and having
fun at the same time; having worked for other companies before
I can really say <strong>Namshi has the environment I enjoyed the most</strong>
so far.</p>

<h2>The family built by HR</h2>

<p>I must admit that HR played a <strong>huge role</strong> in making
Namshi an environment that gets better day after day:
the weekly internal newsletter, the
<a href="http://www.flickr.com/photos/106891956@N06/sets/72157637043616496/">Namshi Olimpics</a>,
the <a href="http://www.flickr.com/photos/106891956@N06/sets/72157637897125985/">picnics</a>&hellip;</p>

<p>I never had the privilege to see these in any company
I&rsquo;ve worked for before<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>.</p>

<h2>Technology stack</h2>

<p>We&rsquo;re a team of polyglots, as our SOA features 4 or 5 different
programming languages and we&rsquo;ve been using pretty interesting
systems over the past 2 years.</p>

<p>We&rsquo;ve started with refactoring a traditional
<a href="http://en.wikipedia.org/wiki/Multitier_architecture">n-tier</a>
architecture in order to be able to move towards a
Service Oriented Architecture while keeping up &amp; running
the existing services: the first steps were made with
Symfony2, and now we&rsquo;ve been throwing AngularJS and NodeJS
into the mix, while replacing memcache with Redis in order
to take advantage of a <strong>more structured key-value NoSQL
storage</strong>.</p>

<p>Things don&rsquo;t end on the <em>development</em> side: from the system point of you
we&rsquo;ve been using <a href="http://www.saltstack.com/">SaltStack</a> after a year of
<a href="http://puppetlabs.com/">Puppet</a> and are currently experimenting with
some tailor-made solutions for content delivery.</p>

<p>All in all, I must admit it feels damn exciting :)</p>

<h2>Ability to experiment</h2>

<p><img class="left" src="http://odino.org/images/angularjs.png"></p>

<p>If you paid attention to the previous section, you have probably
noticed that we <strong>transitioned</strong> from an already decoupled architecture
(separate frontend and backend), which means that we had the
chance to experiment a lot in order to completely revamp it:
in the last 12 months we&rsquo;ve started using (for some of us
it was the first time ever) Symfony2, Redis, Lua, xDomain,
AngularJS, Grunt, HTTP extensions and JWS, not to mention the
traditional components of our stack, like RabbitMQ or Solr.</p>

<p>On top of this, we are now hungry for SPDY, WebP
and <strong>API orchestration layers</strong>.
More on this soon on this blog ;&ndash;)</p>

<h2>A great team of nerds</h2>

<p>I will never get bored of repeating this: the tech team, which
I&rsquo;m part of, <strong>feels like a family</strong>.</p>

<p>I&rsquo;ve seen some of us doing their first <code>composer.phar install</code>,
some saying &ldquo;<em>How do I f</em><em>**** get out of this?</em>&rdquo; after
opening VIM, some others reviewing my pull requests like a boss,
and others never hesitating to help a friend who
had his Vagrant machine stuck.</p>

<p>I&rsquo;ve seen the team growing into a squad able to deliver
enterprise applications under the motto
&ldquo;<a href="http://www.theverge.com/2013/8/14/4621378/the-facebook-ification-of-instagram-begins-today">move fast and break things</a>&rdquo;,
spending endless nights trying to fix PHPUnit tests or
rewriting a service in order to provide a robust checkout
experience written in JavaScript (JS, funky JS!).</p>

<p>Being part of this means recognizing that it will be very
difficult to replicate such achievements elsewhere,
something I will always be proud of.</p>

<h2>So?</h2>

<p>So yes, it feels good to be part of the Namshi family, and since
we have some <a href="http://odino.org/if-you-love-angularjs-you-should-definitely-join-us-dot-dot-dot-were-hiring/">open positions</a>
I would highly recommend you to give us a try :) Of course,
the world offers a lot of interesting and attractive
opportunities, but for the moment I must admit I still feel
<strong>very</strong> lucky.</p>

<p>Last but not least, I have to thank <a href="http://ae.linkedin.com/in/hosam">Hosam</a>,
<a href="http://ae.linkedin.com/in/farazkhalid">Faraz</a><sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup> and
<a href="http://de.linkedin.com/in/hzarka">Hisham</a> for leading the
crazy family we enjoy on a daily basis!</p>

<p><em>All images courtesy of the <a href="http://www.flickr.com/photos/106891956@N06/">Namshi HR Flick stream</a></em></p>

<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>And a great remix can be found here: http://www.youtube.com/watch?v=Zx1_6F-nCaw <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>They say &#8216;sky is the limit&#8217;, but in our case I would say &#8216;your SSH key is the limit&#8217; <a href='#fnref:2' rev='footnote'>↩</a></li><li id='fn:3'>Albeit we had very crazy Christmas parties up there in Rome :) <a href='#fnref:3' rev='footnote'>↩</a></li><li id='fn:4'>When he doesn&#8217;t wear his Google Glasses <a href='#fnref:4' rev='footnote'>↩</a></li>
    </ol>
</div>

]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[If you love AngularJS, you should definitely join us...we're hiring!]]></title>
		
		<link href="http://odino.org/if-you-love-angularjs-you-should-definitely-join-us-dot-dot-dot-were-hiring/"/>
		<updated>2014-01-17T16:28:00+04:00</updated>
		<id>http://odino.org/if-you-love-angularjs-you-should-definitely-join-us-dot-dot-dot-were-hiring</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>In order to expand our team we are now looking for a
frontend JavaScript developer that loves Angular and wants to
drown under loads of <code>ng-*</code>, FPS optimizations and
building the frontends for our
<a href="http://odino.org/tips-and-tricks-for-you-service-oriented-architecture/">Service Oriented Architecture</a>.</p>

<!-- more -->


<p><img class="right" src="http://odino.org/images/namshi.png"></p>

<p>If you are also interested in helping on the whole stack, here&rsquo;s a
summary of the rest of the technologies we&rsquo;re using down here at
<a href="http://namshi.com">Namshi</a>:</p>

<ul>
<li><a href="http://symfony.com/">Symfony2</a></li>
<li><a href="http://nodejs.org/">NodeJS</a></li>
<li><a href="http://redis.io/">Redis</a></li>
<li><a href="http://www.saltstack.com/">SaltStack</a></li>
<li><a href="http://angularjs.org/">AngularJS</a></li>
</ul>


<p>I must admit that is has been pretty exciting to get our
hands dirty with all of these (and the less attractive ones
as well :-P).</p>

<p>Dubai is a pretty nice place and we are <strong>very</strong> open
to relocations: if I&rsquo;m writing this blog post it&rsquo;s because
I would like to reach everyone on the internet who wants
to give it a shot, and not only our connections here in
Dubai.</p>

<p>Namshi is a <a href="http://www.youtube.com/watch?v=NThxiu1HGgM">fun workplace</a>
and you&rsquo;re gonna be working with an
<a href="http://tech.namshi.com/portfolio/">highly skilled team</a>
with the goal of delivering the best customer experience in
the Middle East, through a website that should ideally
render in ~100ms, powered by lotsa APIs.</p>

<p>So yeah, what are you waiting for? <code>ng-apply</code> now!</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[How to make your JavaScript apps SEO-friendly]]></title>
		
		<link href="http://odino.org/how-to-make-your-javascript-apps-seo-friendly/"/>
		<updated>2014-01-17T14:15:00+04:00</updated>
		<id>http://odino.org/how-to-make-your-javascript-apps-seo-friendly</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>One of the challenges in moving your application logic
from the backend (Rails, Django or whatsoever) to the
new frontier of JS web frameworks like AngularJS and
EmberJS is how you can make them SEO-friendly, as these
JavaScript applications get sent to the browser by your
webserver as a <code>200 OK</code>, no matter if, once the app boots,
the page that its being represented is not found, or has
some specific metatags, like title and description.</p>

<!-- more -->


<p>This is, for example, how a tipical angular app&rsquo;s <code>HEAD</code>
section of the HTML looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>
</span><span class='line'>      {{ pageTitle }}
</span><span class='line'>    <span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;keywords&quot;</span> <span class="na">content=</span><span class="s">&quot;{{ metaKeywords }}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;description&quot;</span> <span class="na">content=</span><span class="s">&quot;{{ metaDescription }}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">type=</span><span class="s">&quot;image/x-icon&quot;</span> <span class="na">data-ng-href=</span><span class="s">&quot;https://example.org/favicon.ico&quot;</span> <span class="na">rel=</span><span class="s">&quot;shortcut icon&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;https://example.org/screen.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>As you see, the page title, which is what SE like Google use
as main text in your indexed pages, is a mere placeholder for
a variable that come after the JS framework has booted and
executed its own logic, eventually leading to SERP results
like this:</p>

<p><img class="center" src="http://odino.org/images/google-result-placeholders.png"></p>

<p>So, how will you make sure that search engines will actually
see the post-processed HTML and not the very first one that
gets sent from your server?</p>

<p>You have at least a couple different solutions that use the
same underlying tecnique.</p>

<h2>Once feared, Cloaking is your only way</h2>

<p>The practice of <a href="http://en.wikipedia.org/wiki/Cloaking">cloaking</a>
has been penalized by search engines for years but turned out to
be <a href="https://developers.google.com/webmasters/ajax-crawling/docs/html-snapshot">endorsed by Google</a>
when you have JS-based apps.</p>

<p>It basically consist in serving to the search engine a different
version of the webpage, already rendered, instead of the one
that you would serve to a normal visitor, which has to run
the JS framework on the browser.</p>

<p>The workflow is very simple: instead of serving, from the webserver,
your traditional app that you would serve to a normal user, in case
of a bot you simply <strong>forward the request to another application</strong>,
which will request the original page, wait for it to render through
an headless browser like <a href="http://phantomjs.org/">PhantomJS</a> and then
<strong>serve back the fully rendered content</strong> to the bot:</p>

<p><img class="center" src="http://odino.org/images/prerender-seo.svg"></p>

<p>This is a very straightforward way to effectively implement SEO in
JS apps, and it can be achieved with a couple tools instead of
having to write the whole thing on your own.</p>

<h2>BromBone</h2>

<p><a href="http://www.brombone.com/">BromBone</a> is a service that crawls your
sitemap, generates a snapshot of the rendered HTML, stores it on
Amazon (presumably <a href="http://aws.amazon.com/s3/">S3</a>) and relieves you
from the pain of setting up the middleware SEO app on your own.</p>

<p>It basically acts as the SEO app seen in the picture, but instead of
rendering pages on the fly it does it by looking at your sitemap: once
the bot hits the webserver, you can then proxy it to the BromBone page
so that it gets the actual response from the server.</p>

<p>Even though the service is <a href="http://www.brombone.com/#pricing">very affordable</a>
relying on the sitemap it&rsquo;s a bit tricky, because, well&hellip;what happens
if you have new pages that are not included in the sitemap?</p>

<p>After bumping into this requirement we, at Namshi, decided to opt for
something else.</p>

<h2>Prerender</h2>

<p><a href="https://prerender.io/">Prerender</a> is both a SaaS and an
<a href="https://github.com/collectiveip/prerender">open source library</a>
that prerendrs pages on the fly using PhantomJS and some other
nice tricks to <a href="https://prerender.io/server#http-headers">serve the correct status codes and HTTP headers</a>.</p>

<p>The only disadvantage with rendering on the fly is that the bot will
have to wait a bit longer in order to get the response, and this might
result in a penalization from search engines: the solution is very simple,
as you can simply warm up prerender&rsquo;s cache on your own by hitting the URLs
that you want to cache.
In order to refresh the cache, Prerender lets you do <code>POST</code> requests, so
that:</p>

<ul>
<li>a <code>GET</code> request to <code>http://prerender.example.org/http://example.org/foo.html</code>
will prerender the page on the fly, so that you can cache for future requests
by real bots</li>
<li>a <code>POST</code> request to <code>http://prerender.example.org/http://example.org/foo.html</code>
will refresh the prerendered content</li>
</ul>


<p>Prerender gives you a bit more freedom compared to Brombone but it requires you
to do some manual work, at least if you want to run it on your own servers
without using their solution as a SaaS; in any case, their pricing modes
is <a href="https://prerender.io/pricing">very affordable</a> as well.</p>

<h2>What shall I use?</h2>

<p><span class='pullquote-right' data-pullquote='making SEO-friendly JavaScript apps is not a hassle anymore'>
It really depends, as both are very interesting tools: given our confidence
with NodeJS and the will of developing some of the SEO-related stuff in-house,
so that we have a bit more control over these things, we opted to give
Prerender a go, but if you feel the sitemap solution proposed by BromBone
is good enough for you, I&rsquo;d recommend you that service, as it&rsquo;s easier to
run and requires very less configuration / manual work.</p>

<p>All in all, the good thing is that, in 2014, we can finally say that
making SEO-friendly JavaScript apps is not a hassle anymore!
</span></p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Frontend web development is not as fun as it could be]]></title>
		
		<link href="http://odino.org/frontend-web-development-is-not-as-fun-as-it-should-be/"/>
		<updated>2013-11-10T19:53:00+04:00</updated>
		<id>http://odino.org/frontend-web-development-is-not-as-fun-as-it-should-be</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>I am writing this post in the middle of revamping
<a href="http://en-ae.namshi.com">Namshi&rsquo;s architecture</a>
with AngularJS, reverse proxies,
SPDY and HTTP APIs, because I
strongly believe in the future of these technologies and
that they are the de-facto cutting-edge solution for
most of the antipatterns that we&rsquo;ve seen so far:
monolithic applications, unscalable frontends,
limited protocols.</p>

<!-- more -->


<p><img class="right" src="http://odino.org/images/browsers.jpg"></p>

<p>So why would I rant about it? Well, this is not a real
rant but it&rsquo;s more of a retrospective on the <em>gotchas</em>
that we faced over the past months: I do <strong>really</strong>
enjoy all of this techs, but also
recognize that most of them are at a
very early stage and have their pitfalls when it comes
to develop real-world, scalable architectures.</p>

<p>The boring part&rsquo;s over, let&rsquo;s get into the real mess ;&ndash;)</p>

<h2>Reducing redirects?</h2>

<p>Suppose that you have a frontend, maybe built with AngularJS,
that proxies all the requests to an API, so if you request
<code>example.org/about</code>, your frontend actually gets the content
from <code>api.example.org/about</code>.</p>

<p>One of the things that you can start optimizing are the
round trips between the client and the server (very important
for mobile connections): for example,
instead of sending simple redirects from your API to the
frontend, you can return a <code>30X</code> and include the actual body
in the response; in this way, the client can:</p>

<ul>
<li>read the body of the response and work with it (output or whatever)</li>
<li>update the browser URL according to the <code>Location</code> header provided in the response with the <a href="http://diveintohtml5.info/history.html">browsers&#8217; history API</a></li>
</ul>


<p>NOT. SO. FAST.</p>

<p>Turns out that modern browsers intercept redirects and make an
additional HTTP request to the <code>Location</code> provided by the response.</p>

<p>This behavior is pretty useful in 98% of your use-cases, as
you dont have to take care of handling AJAX redirects on
your own and you have a pretty simple solution, using a
custom HTTP status
code, like <a href="http://stackoverflow.com/questions/199099/how-to-manage-a-redirect-request-after-a-jquery-ajax-call">278</a>, for the remaining 2% of scenarios.</p>

<p>NOT. SO. FAST. 2.</p>

<p>Of course, the magnificent <a href="http://www.zdnet.com/blog/networking/the-number-one-mobile-web-browser-googles-native-android-browser/2091">Android native browser</a>
will mess this up, thinking that <code>278</code> is an error code: so if, for
your HTTP request, you have a callback in case of success and
one in case of an error, the latter will be triggered.</p>

<p>How to deal with this?</p>

<p>Well, we decided to return straight <code>200 Ok</code> codes and include
2 custom headers, <code>X-Location</code> and <code>X-Status-Code</code>, that our
clients will parse to find out if they need to update the
browser&rsquo;s URL.</p>

<p>In pseudo-code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>res = http.get('api.example.org?search=BMW')
</span><span class='line'>
</span><span class='line'>if (res.status_code === 200 && res.headers.x-location) {
</span><span class='line'>  browser.url = res.headers.x-location
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>In any case, with the growing amount of mobile clients, I think
it might make sense to start thinking of an appropriate process
to handle redirects, within the HTTP protocol, so that browsers
can just follow the spec: in my opinion we could use something
like <code>308 Transparent redirect</code> for this.</p>

<h2>Reverse proxies and HTTP cache</h2>

<p><img class="left" src="http://odino.org/images/varnish-cache.jpg"></p>

<p>Two of the most <a href="http://www.mnot.net/blog/2007/12/12/stale">important directives</a>
that you can use while taking advantage of the HTTP cache
are <code>stale-while-revalidate</code> and <code>stale-if-error</code>:
the former lets you return stale responses
while you revalidate the cache while the latter lets you serve
cached responses if your backend is down (<code>50X</code> errors).</p>

<p>Of course, you will need a reverse proxy in front
of your webserver in order to really take advantage of
these directives: <a href="http://www.squid-cache.org/">Squid</a> natively implements
both of them but, in our case, it was too much of a hassle to setup,
as it&rsquo;s bloated compared to its cousin <a href="https://www.varnish-cache.org/">Varnish</a>,
which doesn&rsquo;t natively implement <code>stale-*</code> directives instead.</p>

<p>Setting up Varnish to support those 2 directives it&rsquo;s a matter
of a few tries anyhow, as you can mimic the (almost) same
behaviors with Varnish&rsquo;s <a href="https://www.varnish-software.com/static/book/Saving_a_request.html#core-grace-mechanisms">grace and saint modes</a>.</p>

<h2>Android&rsquo;s native browser</h2>

<p><img class="right" src="http://odino.org/images/android.jpg"></p>

<p>Android, oh Android!</p>

<p>As we already saw, its native browser doesn&rsquo;t let you play around
with unconventional HTTP status codes<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup> and, on top of that,
<strong>it breaks the HTTP cache</strong>.</p>

<p>If you have a cacheable resource that you retrieve via AJAX,
the first request to retrieve will work, but as soon as you reload
the page and retrieve it a second time, the browser messes things up,
things that the request returned an invalid HTTP status code (<code>0</code>)
and aborts the process.</p>

<p>And yes, it&rsquo;s a <a href="http://opensourcehacker.com/2011/03/20/android-webkit-xhr-status-code-0-and-expires-headers/">known bug</a>.</p>

<h2>Performances on old devices</h2>

<p>And when I say old I mean stuff like the Galaxy S2 or S3, which are not <strong>that</strong> old
to be honest.</p>

<p>Performances are anyhow a huge concern when you start moving the logic into
the clients, as resources might be very limited: let&rsquo;s not forget that the
first generation of Galaxy &ndash; or even the iPhone 4 &ndash; were shipped out with
just 512mb of RAM; think of a JS-heavy app, which sucks up to 40/50mb of RAM:
how would that perform on those devices?</p>

<p>Let me tell you that: it&rsquo;d be very slow, and would even feel slower when CPUs
comes into the mix as &ndash; we&rsquo;ve witnessed it &ndash; to build DOM elements<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>
it could take up to 4s. Of course, you can optimize it, but a brand new smartphone
wouldn&rsquo;t let you feel such <em>lag</em>: truth is that when you decide to go for a JS app
you need to take into account the time spent in optimizations for old devices,
as you&rsquo;ll surely need to invest on it.</p>

<h2>What a hard time debugging browser events</h2>

<p><img class="left" src="http://odino.org/images/chrome-devtools.png"></p>

<p>If you&rsquo;ve ever dug deep into optimizing browser events (HTML parsing, repainting and so on)
you probably know what I&rsquo;m talking about: the devtools are still at an early stage and
it becomes really tricky to be able to nail issues down or at least to efficiently
reverse engineer them; even though you have a breakdown of every browser event it&rsquo;s
actually pretty difficult to trace events back to their &ldquo;cause&rdquo;<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>.</p>

<p>Chrome provides profiles and the timeline which are very useful resources, but you can&rsquo;t
really inspect that much as at a certain point you&rsquo;ll end up with <strong>a lot</strong> of events
like <em>HTML parsing</em> or <em>Function call</em> and only God knows where they exactly came from.</p>

<h2>Persistent sessions and credentials</h2>

<p><img class="right" src="http://odino.org/images/security.jpg"></p>

<p>Authenticating users might be tricky for frontend apps: you don&rsquo;t have the good old
(and heavy) PHP sessions that you can just fill up on you server, but you &ndash; at least
initially &ndash; can try to persist sessions on cookies or <a href="http://diveintohtml5.info/storage.html">localStorage</a>.</p>

<p>But even before thinking of storing sessions you have to deal with authenticating each
of your user from the app: granted that the HTTP basic auth is not good as
<a href="http://en.wikipedia.org/wiki/Basic_access_authentication#Security">it&rsquo;s flawed</a> and that
the <a href="http://en.wikipedia.org/wiki/Digest_access_authentication">digest auth</a> might be too simple,
you should start looking at alternative methods to authenticate and authorize your users,
preferrably using tokens.</p>

<p>As you probably figured out, there is no real standard mechanism of doing this, as some
providers rely on oAuth (both 2-* and 3-legged) and some on OpenID. Even Mozilla, a while ago,
came out with its own protocol, <a href="http://www.mozilla.org/en-US/persona/">Persona</a>, to solve this
problem.</p>

<p>We actually found out another &ldquo;protocol&rdquo; to store and transmit credentials through HTTP
APIs, the <em>Javascript Object Signing and Encryption</em> specification (<a href="https://datatracker.ietf.org/wg/jose/">JOSE</a>).</p>

<h2>A note on AngularJS and the Grunt ecosystem</h2>

<p>A glimpse of our <code>package.json</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;devDependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;grunt&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.4.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;grunt-contrib-copy&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.4.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;grunt-contrib-concat&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.3.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;grunt-contrib-coffee&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.7.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;grunt-contrib-uglify&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.2.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;grunt-contrib-compass&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.3.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;grunt-contrib-jshint&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.6.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;grunt-contrib-cssmin&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.6.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;grunt-contrib-connect&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.4.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;grunt-contrib-clean&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.4.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;grunt-contrib-htmlmin&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.1.3&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;grunt-contrib-imagemin&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.1.4&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;grunt-contrib-watch&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.5.3&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;grunt-usemin&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.1.11&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;grunt-rev&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.1.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;grunt-karma&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.4.3&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;grunt-open&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.2.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;matchdep&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.1.2&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you see, the bower/node/grunt/angular ecosystem is still very young and,
from certain points of view, very immature (for example, <a href="https://github.com/gruntjs/grunt-contrib-connect/issues/9">SSL support in Grunt</a>
was added just 2 months ago).</p>

<p>So if you want to use these kind of technologies you must accept that, sometimes,
doing an <code>npm install</code> might break something, or that you will need to keep your deps
updated to the latest releases: it&rsquo;s all about <strong>go big or go home</strong>.</p>

<h2>Internet Explorer. As always.</h2>

<p><img class="right" src="http://odino.org/images/ie.png"></p>

<p>Eheh, there could not be a post about <em>web gotchas</em> without mentioning IE:
the lack of support for <a href="http://en.wikipedia.org/wiki/Cross-origin_resource_sharing">CORS</a>
in IE8 and IE9 is actually a real kicker for
efficiently implementing frontend apps that rely on a remote API
(<code>example.org</code> &ndash;> <code>api.example.org</code>), since CORS considers as cross-domain
even a request on a subdomain<sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup>.</p>

<p>And no, there is no native escape strategy for this: you <strong>must</strong> extend the
<a href="http://www.w3.org/TR/XMLHttpRequest/">XHR</a> in order to make it capable of doing
cross-domain communication through Iframes, a strategy that even Google and Facebook
have implemented in the past; luckily there is some stuff already written for us,
so we can use the good <a href="https://github.com/jpillora/xdomain">xDomain</a> and
include it with the IE conditional comments.</p>

<p>But then, you would think, why not using xDomain for everything, and simply drop
CORS?</p>

<p>Well, there are a few things to consider:</p>

<ul>
<li>even though Google and Facebook are known to be using some trick like xDomain, it&rsquo;s
pretty strange that they havent released anything yet (might be that they don&rsquo;t consider
it a long-term option)</li>
<li>the native Android browser was known to have <a href="https://github.com/jpillora/xdomain/issues/19">issues with this library</a></li>
<li>CORS is a growing standard that has been widely adopted by the community</li>
<li>the <a href="https://github.com/jpillora/xdomain/blob/gh-pages/dist/xdomain.js">code</a> looks kind of cryptic</li>
</ul>


<p>All in all, we didnt feel like using xDomain for everything, as we are just using
it for IE8/9<sup id='fnref:5'><a href='#fn:5' rel='footnote'>5</a></sup>: <a href="https://github.com/jpillora">Jaime</a> did a great job
implementing it but I personally feel that it might be <strong>too much</strong> to just blindly
rely on it for cross-domain communications.</p>

<h2>CORS and HTTP headers</h2>

<p>Deciding to go with CORS it&rsquo;s just half of it, as the other half consists
into actually implementing CORS on both your clients and servers (APIs): it&rsquo;s
worth mentioning that the specification is really strict when it comes to
<strong>send and manipulate custom HTTP headers</strong> (like the <code>X-Location</code> that we
saw at the beginning of this post).</p>

<p>If you wanna send a custom header you will need to specify it in the
<code>Access-Control-Request-Headers</code> header:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">Access-Control-Request-Headers:</span> <span class="err">X-My-Custom-Header</span>
</span></code></pre></td></tr></table></div></figure>


<p>and if you want your clients to be able to access some of the response&rsquo;s headers you will
need to declare them as &ldquo;accessible&rdquo;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">Access-Control-Expose-Headers:</span> <span class="err">X-My-Other-Header,</span> <span class="err">X-...</span>
</span></code></pre></td></tr></table></div></figure>


<h2>How to do RUM?</h2>

<p>Another good question (and I don&rsquo;t have an answer so far) is how to measure
performances as felt by the end-user (<a href="http://en.wikipedia.org/wiki/Real_user_monitoring">Real User Monitoring</a>),
since AngularJS loads once and then never triggers server-side measurable events
other than HTTP requests to your APIs: the API&rsquo;s response times cannot be taken
into account as you wouldn&rsquo;t measure the
performance perceived by the end user &ndash; remember, JS frameworks add HTML parsing,
data-binding and so on on top of the cake.</p>

<p>We still have to figure out how we will implement RUM in our apps,
if you have any suggestion it would be highly appreciated!</p>

<h2>All in all&hellip;</h2>

<p>Developing on the frontend is an amazing experience that has some drawbacks, like on
any platform: beware of the specs (like CORS) and gotchas (IE, Android&rsquo;s native browser) and you will
enjoy it to the max!</p>

<hr />

<p><em>P.S. Thanks to <a href="https://github.com/hzarka">HZ</a> and <a href="https://github.com/AdamQuadmon">AdamQuadmon</a>
for passively contributing to this post, sharing with me and the rest of our team this amazing
and tortuous experience</em></p>

<hr />

<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>Which might be fair, as even Chrome has some funny behaviors <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>Not so many DOM elements! <a href='#fnref:2' rev='footnote'>↩</a></li><li id='fn:3'>Chrome&#8217;s Devtools &#8220;Profiles&#8221; are probably the best resource you can use to backtrace stuff <a href='#fnref:3' rev='footnote'>↩</a></li><li id='fn:4'>Which makes sense when you have platforms like Tumblr <a href='#fnref:4' rev='footnote'>↩</a></li><li id='fn:5'>BTW IE11 is out, so there&#8217;s even more hope <a href='#fnref:5' rev='footnote'>↩</a></li>
    </ol>
</div>

]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Drop OpenJDK and upgrade Java to the Oracle packages]]></title>
		
		<link href="http://odino.org/drop-openjdk-and-upgrade-java-to-the-oracle-packages/"/>
		<updated>2013-11-10T08:59:00+04:00</updated>
		<id>http://odino.org/drop-openjdk-and-upgrade-java-to-the-oracle-packages</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>A few weeks back I started noticing some performance
issues on my <a href="http://www.jetbrains.com/phpstorm/">IDE</a> and decided to investigate a bit more
on it: turns out that they recommended to 1) upgrade to
the latest JDK (7) and stop using <a href="http://openjdk.java.net/">OpenJDK</a>, as it has
some performance gotchas.</p>

<!-- more -->


<p><img class="left" src="http://odino.org/images/java.png"></p>

<p>Turns out to be a no-brainer thanks to the <a href="https://github.com/flexiondotorg/oab-java6">apt repository manager provided by flexiondotorg</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ~/
</span><span class='line'>wget https://github.com/flexiondotorg/oab-java6/raw/0.3.0/oab-java.sh -O oab-java.sh
</span><span class='line'>chmod +x oab-java.sh
</span><span class='line'>sudo ./oab-java.sh</span></code></pre></td></tr></table></div></figure>


<p>After running it you just need to re-install all the packages:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install oracle-java7-jdk oracle-java7-jre oracle-java7-plugin</span></code></pre></td></tr></table></div></figure>


<p>and tell ubuntu that the JDK version and location has changed:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo update-alternatives --config java</span></code></pre></td></tr></table></div></figure>


<p>A quick check with <code>java -version</code> and then enjoy it!</p>
]]>
		</content>
	</entry>
	
</feed>