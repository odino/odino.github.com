<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: RabbitMQ | Alessandro Nadalin]]></title>
  <link href="http://odino.org/blog/categories/rabbitmq/atom.xml" rel="self"/>
  <link href="http://odino.org/"/>
  <updated>2014-01-14T03:02:28+04:00</updated>
  <id>http://odino.org/</id>
  <author>
    <name><![CDATA[Alessandro Nadalin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Notificator, sending notifications through PHP in a clean and lightweight way]]></title>
    <link href="http://odino.org/notificator-sending-notifications-through-php-in-clean-and-lightweight-way/"/>
    <updated>2013-07-11T01:20:00+04:00</updated>
    <id>http://odino.org/notificator-sending-notifications-through-php-in-clean-and-lightweight-way</id>
    <content type="html"><![CDATA[<p>While implementing various pieces of our
<a href="/why-we-choose-symfony2-over-any-other-php-framework/">Service-Oriented Architecture</a>
we, at <a href="http://en-ae.namshi.com">Namshi</a>,
realized that a central notification
service would have been very good in order
to abstract the way we notify our customers
and everyone in the company (ie. skype messages
when a task is due a certain date).</p>

<p>We initially implemented all of this
<a href="/configuring-a-symfony2-application-to-support-soa/">inside a Symfony2 bundle</a>,
but soon realized that we could
abstract and generalize our implementation
in order to extract it into a library for the public
domain, and that&rsquo;s how
<a href="https://github.com/namshi/notificator">notificator</a>
was born.</p>

<!-- more -->


<h2>Aim of the library: a monolog-like implementation for notifications</h2>

<p>The aim of this library is to provide a very
clean abstraction for a task, handling notifications,
that can be spread across multiple channels (for example
emails, skype messages, desktop notifications, &hellip;):
by following this target, we soon realized that by merging
together 2 simple things, <a href="https://github.com/Seldaek/monolog">Monolog</a>
and the concept of <a href="http://en.wikipedia.org/wiki/Observer_pattern">event dispatching</a>,
we could have easily reached our goal.</p>

<p>Honestly, it&rsquo;s true that you can achieve the same goal with
Monolog, but the problem, there, is that it&rsquo;s a library
specifically built for logging, thus, when your domain
deals with simple notifications, your code would really
be inexpressive.</p>

<p>Even though <strong>Notificator is way simpler</strong>, we took a lot
of inspiration from Monolog: for example, the concept of
handlers is a total steal ;&ndash;)</p>

<h2>Installation</h2>

<p>The library is available via composer,
as you can see from its
<a href="https://packagist.org/packages/namshi/notificator">packagist page</a>.</p>

<p>Using semantic versioning, I recommend you
to pick a minor release (<code>1.0</code>, for example)
and stick to it in your <code>composer.json</code>:
what we try to do is that, if there is a BC break
in the API, we increase the minor version (<code>1.0.X</code> to <code>1.1.X</code>, for example).</p>

<p>At the end, you <strong>should</strong> require it like this:</p>

<p><code>
"namshi/notificator": "1.0.*"
</code></p>

<h2>Hello world! example</h2>

<p>Just to give a very rough and simple example on how this
library works, let&rsquo;s see how you can trigger a notification
via <strong>both</strong> email (with PHP&rsquo;s <code>mail</code> function<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>)
and the <code>notify-send</code> utility available on ubuntu (I&rsquo;ve already spoke
about it in <a href="/desktop-notifications-for-phpunit-tests-on-ubuntu/">a previous post</a>).</p>

<p>First of all, we would need to create a <em>plain-old-php-class</em>
representing the notification, which implements 2 interfaces:</p>

<p>``` php
&lt;?php</p>

<p>use Namshi\Notificator\Notification;
use Namshi\Notificator\NotificationInterface;</p>

<p>interface NotifySendNotificationInterface extends NotificationInterface
{</p>

<pre><code>public function getMessage();
</code></pre>

<p>}</p>

<p>interface EmailNotificationInterface extends NotificationInterface
{</p>

<pre><code>public function getAddress();
public function getSubject();
public function getBody();
</code></pre>

<p>}</p>

<p>class DoubleNotification extends Notification implements NotifySendNotificationInterface, EmailNotificationInterface
{</p>

<pre><code>protected $address;
protected $body;
protected $subject;

public function __construct($address, $subject, $body, array $parameters = array())
{
    parent::__construct($parameters);

    $this-&gt;address  = $address;
    $this-&gt;body     = $body;
    $this-&gt;subject  = $subject;
}

public function getAddress()
{
    return $this-&gt;address;
}

public function getSubject()
{
    return $this-&gt;subject;
}

public function getBody()
{
    return $this-&gt;body;
}

public function getMessage()
{
    return $this-&gt;getBody();
}
</code></pre>

<p>}
```</p>

<p>At this point we need 2 notification handlers, which
will separately handle the notification:</p>

<p>``` php
&lt;?php</p>

<p>use Namshi\Notificator\Notification\Handler\HandlerInterface;
use Namshi\Notificator\NotificationInterface;</p>

<p>class NotifySendNotificationHandler implements HandlerInterface
{</p>

<pre><code>public function shouldHandle(NotificationInterface $notification)
{
    return $notification instanceOf NotifySendNotificationInterface;
}

public function handle(NotificationInterface $notification)
{
    shell_exec(sprintf('notify-send "%s"', $notification-&gt;getMessage()));
}
</code></pre>

<p>}</p>

<p>class EmailNotificationHandler implements HandlerInterface
{</p>

<pre><code>public function shouldHandle(NotificationInterface $notification)
{
    return $notification instanceOf EmailNotificationInterface;
}

public function handle(NotificationInterface $notification)
{
    mail($notification-&gt;getAddress(), $notification-&gt;getSubject(), $notification-&gt;getBody());
}
</code></pre>

<p>}
```</p>

<p>We&rsquo;re basically there: with a bunch of code we can now trigger
a notification both via email and <code>notify-send</code>:</p>

<p>``` php
&lt;?php</p>

<p>// create the manager and assign handlers to it
use Namshi\Notificator\Manager;</p>

<p>$manager = new Manager();
$manager->addHandler(new NotifySendNotificationHandler());
$manager->addHandler(new EmailNotificationHandler());</p>

<p>$notification = new DoubleNotification(&lsquo;<a href="&#109;&#97;&#105;&#108;&#116;&#111;&#58;&#x61;&#x6c;&#101;&#115;&#x73;&#x61;&#110;&#x64;&#x72;&#x6f;&#x2e;&#110;&#x61;&#x64;&#x61;&#108;&#x69;&#110;&#64;&#103;&#109;&#97;&#105;&#x6c;&#46;&#99;&#x6f;&#109;">&#97;&#108;&#x65;&#115;&#x73;&#x61;&#110;&#100;&#114;&#111;&#46;&#x6e;&#97;&#x64;&#97;&#x6c;&#105;&#x6e;&#x40;&#103;&#x6d;&#x61;&#105;&#108;&#x2e;&#99;&#x6f;&#x6d;</a>&rsquo;, &lsquo;Test email&rsquo;, &lsquo;Hello!&rsquo;);</p>

<p>//  trigger the notification
$manager->trigger($notification);
```</p>

<p><img class="right" src="/images/notification-email.png"></p>

<p>At this point, if you run this example<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>, you should
see a notification popping up on your desktop and, in a few seconds,
you will also receive an email to the address you&rsquo;ve given, with the subject
&ldquo;Test email&rdquo; and &ldquo;Hello!&rdquo; in the body.</p>

<p>By the way, if you want to see some examples on
how the library works, <a href="https://github.com/namshi/notificator/tree/master/examples">check them out on github</a>.</p>

<h2>Sending notifications via RabbitMQ</h2>

<p>It is no news that we heavily rely on
<a href="http://odino.org/refactoring-your-architecture-go-for-soa/">RabbitMQ in our SOA</a>,
so it&rsquo;s pretty obvious that, to implement the notification service,
we send messages containing the notifications, that will
be intercepted by our notification service, which relies on
Notificator.</p>

<p>To do so, we take advantage of the great job done by
<a href="https://twitter.com/old_sound">Alvaro Videla</a>
on RabbitMQ for PHP and Symfony2, through the
<a href="https://github.com/videlalvaro/php-amqplib">PHP AMQP library</a>
and the <a href="https://github.com/videlalvaro/RabbitMqBundle">RabbitMQ bundle</a>.</p>

<p>If you are familiar with them, you know that in order to consume messages,
you have to declare your consumer as a callback of the actual, generic
rabbitmq consumer, through the <code>config.yml</code> file:</p>

<p>``` yaml app/config/config.yml
old_sound_rabbit_mq:</p>

<pre><code>consumers:
    notification:
        connection: default
        exchange_options: {name: 'notifications', type: direct}
        queue_options:    {name: 'notifications'}
        callback:         namshi.notification.consumer
</code></pre>

<p>services:</p>

<pre><code>namshi.notification.consumer:
    class: Namshi\Notificator\Messaging\RabbitMQ\Symfony2\Consumer
    arguments: [@namshi.notification.manager]
namshi.notification.manager:
    class: Namshi\Notificator\Manager
    calls:
      - [addhandler, [@namshi.notification.handler.notify_send] ]
namshi.notification.handler.notify_send:
    class: Namshi\Notificator\Notification\Handler\NotifySend
</code></pre>

<p>```</p>

<p>We already provide a <a href="https://github.com/namshi/notificator/blob/master/src/Namshi/Notificator/Messaging/RabbitMQ/Symfony2/Consumer.php">very basic consumer callback</a>
to be used with the RabbitMQ bundle.</p>

<p>The main idea behind this is that the publisher serializes the notification
and sends it through RabbitMQ, while the consumer unserializes and
triggers it through the <code>Manager</code>. The publisher code would be very, very simple:</p>

<p>``` php
&lt;?php</p>

<p>$publisher = $container->get(&lsquo;old_sound_rabbit_mq.notifications_producer&rsquo;);</p>

<p>$notification = new MySampleNotification(&ldquo;man, this comes from RabbitMQ and Symfony2!&rdquo;);</p>

<p>$publisher->publish(serialize($notification));
```</p>

<p>and to start consuming messages you would only need to
start the consumer:</p>

<p><code>
php app/console rabbitmq:consumer -w notification
</code></p>

<h2>FOSS</h2>

<p>I&rsquo;ve tried to write a pretty extensive
<a href="https://github.com/namshi/notificator/">README</a> that you can use as a reference, on Github
(check the <a href="https://github.com/namshi/notificator/tree/master/tests">tests</a>, as well, to get an idea of the internals):
if you spot any typo or mistake, don&rsquo;t hesitate to
reach out and point it out.</p>

<p>This library is part of the efforts,
from <a href="https://github.com/namshi">Namshi</a>,
to be able to give back to the
OSS community as much as possible: you
are therefore strongly encouraged to open a PR
or express your opinion if you find that something
should be fixed or could be improved (there&rsquo;s a lot
of room for improvement, starting by implementing
many more <a href="https://github.com/namshi/notificator/tree/master/src/Namshi/Notificator/Notification/Handler">handlers</a>).</p>

<p><div class="footnotes">
<span>
Notes
</span>
	<ol>
		<li id='fn:1'>Only used for its simplicity here, please do not use it in production, use stuff like SwiftMailer instead! <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>I mostly took the example code from the README of the library on github, so forgive me if there are synthax errors or some typo. You can anyhow have a look at the examples (in the examples/ folder) to check some working code <a href='#fnref:2' rev='footnote'>↩</a></li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring your architecture understanding SOA]]></title>
    <link href="http://odino.org/refactoring-your-architecture-go-for-soa/"/>
    <updated>2013-03-23T17:35:00+04:00</updated>
    <id>http://odino.org/refactoring-your-architecture-go-for-soa</id>
    <content type="html"><![CDATA[<p>It is no news that I work for <a href="http://en-ae.namshi.com">a company</a>
supported by <a href="http://www.rocket-internet.de">a mothership</a>
that helps most of his affiliates with know-how
and basic tools.</p>

<p>But to aim expansion, one needs to go beyond those
shared layers and start customizing his
products and services, and in terms of software development
nothing can help you more than
<a href="http://en.wikipedia.org/wiki/Service-oriented_architecture">service-oriented architectures</a>,
or <em>SOA</em>.</p>

<!-- more -->


<p>So, what&rsquo;s the goal of this post? Basically
providing our view on how we are going to
shift from our current architecture, which
is already a composite, to a more powerful
layer of services.</p>

<h2>Identifying the service</h2>

<p>One of the first steps in order to dig
into the implementation is to actually identity
a first bunch of functionalities that should be
incorporated as standalone services.</p>

<p>Usually, opportunities for new services pop up
when it&rsquo;s time to <strong>introduce a new functionality</strong>
or the cost of fixing / implementation of a
change request are too high: for example, if you
want to add the ability to send SMSes from your website,
a good service would be one which just deals with
the receiving an input event, assembling a message
and contacting the <em>real</em> SMS provider via webservice
in order to dispatch the message; another good example is
<strong>identity</strong>: if you are struggling with different userbases
that need to be in sync, a good solution would be to
centralize identities and provide a service which does,
at least, authentication.</p>

<h2>Data</h2>

<p>Another tipical question is how to manage and organize
data when you have a de-centralized architecture.</p>

<p>In SOA terms, usually data is shared among the
services but this doesnt mean that each service can&rsquo;t
have its own data-layer: it is often seen a very old
fashioned RDBMS shared across all the services and
some of them using a less traditional solution, like
a NoSQL DB; this is mainly done to achieve better
performances and different data-retrieval patterns</p>

<p>Think about legacy applications that have a model which can be
extensively customized by the end user, that usually
implement the <a href="http://en.wikipedia.org/wiki/Entity%E2%80%93attribute%E2%80%93value_model">EAV pattern</a>,
getting stuck into <strong>performance bottlenecks</strong>, while
a document-db like MongoDB or CouchDB would
perfectly solve the issue.</p>

<p>If you are running, for example, an e-commerce system,
you may want to have transactions and identities in a
solid and robust system like MSSQL, while your
frontend can actually run with MongoDB: once the user
purchases a product, via webservice you store it into
MSSQL.</p>

<h2>Services need</h2>

<p>One typical aspect, in SOA terms, is seeking answers
to our questions (read getting <em>responses</em> for our <em>requests</em>),
a problem which we can overcame with a simple solution:
when a service <strong>needs</strong> another one, we talk about APIs.</p>

<p>For example, your frontend might offer authentication, while
the Identity manager is a service providing identities to
multiple layers of your architecture: when the frontend needs
to authenticate a user, it will directly rely on the
Identity service, asking him to authenticate the user with the
credentials he or she submitted to the frontend.</p>

<p>APIs can be traditionally categorized into <a href="http://nordsc.com/ext/classification_of_http_based_apis.html">a few types</a>:</p>

<ul>
<li>mess: &ldquo;messy&rdquo; API don&rsquo;t follow structured rules (it cab be <em>plain-old XML over HTTP</em>
or a replication of DB writes and reads in JSON format); they can
be <strong>very useful</strong> when you need to kickstart a new, small and simple
API</li>
<li>HTTP API: services that semantically expose their domain model
in terms of resources, embracing the HTTP specification</li>
<li><a href="/hypermedia-services-beyond-rest-architectures/">REST</a>: hypermedia services</li>
<li>SOAP: services using strict interfaces between clients and servers,
following the SOAP spec</li>
</ul>


<p>No matter what, you will always find yourself dealing with APIs
if you decided to go for SOA: it is the simplest way to
provide <strong>data-exchange mechanisms to layers that don&rsquo;t fully
know each other&rsquo;s domain</strong>.</p>

<h2>Services listen</h2>

<p>Another <strong>very common</strong> scenario, is when services &ldquo;listen&rdquo;,
waiting for notifications sent across by other components of
the architecture: you are probably already thinking about
messaging queues and message notifications, and you are right.</p>

<p>A event-driven process can be achieved when we have tools
such as <a href="http://www.rabbitmq.com/">RabbitMQ</a> helping in gathering
and dispatching notifications to various parts of the architecture:
with Rabbit, a service can dispatch a message to a queue
and another one (or <strong>ones</strong>), through a daemon, consumes the message.</p>

<p>Thinking about what I mentioned earlier, an SMS-dispatching mechanism
could fit in this context really well: think about SMSes that are sent
once the user completes certain actions on your frontend (by gaining credits,
placing an order on your e-commerce or so on); once the user
completes an action, a notification will be sent out and
whoever needs to listen to that message will catch
and process it.</p>

<h2>So far so good</h2>

<p>In our fast and new journey towards integrating services into
our architecture, we are finding ourselves pretty well: it is
no news that we are using RabbitMQ and <a href="http://symfony.com">Symfony2</a>
for our new, isolated services, and that we already identified
a few services that can run on their own, decoupled context.</p>

<p>Thinking in SOA terms, by the way, brings out a new set of problems, like
thinking in terms of architecture, and not of application: you
don&rsquo;t deploy a new version of your application, you <strong>update a part
of the architecture</strong>; your system is decoupled, from the code to the
processes you use to handle them. And what about the complications in the
development environments? And which monitoring tool should I use to
understand that all the components are working alltogether? And&hellip;</p>

<p>There&rsquo;s room for generic problems that everyone faced and that we will
face as well, and I think it will be very interesting to share our
approach and the vision we had in our own context.</p>
]]></content>
  </entry>
  
</feed>
