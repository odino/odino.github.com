<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: teams | Alessandro Nadalin]]></title>
  <link href="http://odino.org/blog/categories/teams/atom.xml" rel="self"/>
  <link href="http://odino.org/"/>
  <updated>2013-06-28T14:30:27+04:00</updated>
  <id>http://odino.org/</id>
  <author>
    <name><![CDATA[Alessandro Nadalin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My experience with our development team in Dubai: in between business, SOA and sun]]></title>
    <link href="http://odino.org/my-experience-with-our-development-team-in-dubai-in-between-business-soa-and-sun/"/>
    <updated>2013-03-29T18:08:00+04:00</updated>
    <id>http://odino.org/my-experience-with-our-development-team-in-dubai-in-between-business-soa-and-sun</id>
    <content type="html"><![CDATA[<p>Today I had the opportunity to share with the
people at the <a href="http://www.phptostart.it/">PHP.TO.START</a>
in Turin my 1-year experience in Namshi, one of
Rocket Internet&rsquo;s ventures in the Middle East.</p>

<!-- more -->


<p><img class="left" src="/images/phptostart2013.jpg"></p>

<p>Luckily, this was a great opportunity to meet some good
old friends and the talk went very well: of course,
the reharsal at the <a href="http://roma.grusp.org">PHP User Group in Rome</a>
earlier this week was a bless.</p>

<p>It basically deals with the phases that I experienced
with our team in Namshi, with some spicy details on
recruiting (from looking for talents to conducting
interviews), how to <strong>change processes to help people improving</strong>
(and not change people to improve processes) and
a big picture on what we were able to plan and achieve
in this year together, from a technical point of view.</p>

<p>At the end of the talk I invited everyone interested, and
I will repeat myself here, to look for the open positions
on <a href="http://en-ae.namshi.com/careers/">our careers site</a>,
since we are currently hiring a Lead Developer and a
PHP Developer (a junior or an intermediate, it&rsquo;s more
about the approach rather than the hands-on experience).</p>

<p>Here are the slides of the talk, in a slightly better (and more colored)
version compared to the ones I used in Rome:</p>

<iframe src="http://www.slideshare.net/odino/slideshelf" width="760px" height="570px" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:none;" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coding bureaucracy]]></title>
    <link href="http://odino.org/coding-bureaucracy/"/>
    <updated>2012-12-05T12:23:00+04:00</updated>
    <id>http://odino.org/coding-bureaucracy</id>
    <content type="html"><![CDATA[<p>An interesting quote from an ex-Microsoft:
it can take up to <strong>several months</strong>
before you get an approval over a
technical issue.</p>

<!-- more -->


<p><blockquote><p>In my short time at Microsoft, any project that desired to use an open source library, such as jQuery, would require approval from the organization&rsquo;s legal team. There were of course political strategies to speed up the process, but it could take as long as six months just to gain approval to use the code in a project. The implicit alternative to this draconian dilemma, naturally, is write substitute code for the OSS that perpetually seems out of reach.</p><footer><strong>Matt J. Sorenson <a href="http://www.quora.com/Software-Engineering/How-long-does-it-take-a-large-tech-company-to-push-a-single-line-of-code-to-production">http://www.quora.com/Software-Engineering/How-long-does-it-take-a-large-tech-company-to-push-a-single-line-of-code-to-production</a> How long does it take a large tech company to push a single line of code to production</strong></footer></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Source code workflow after 3 months of Github]]></title>
    <link href="http://odino.org/source-code-workflow-after-3-months-of-github/"/>
    <updated>2012-08-05T23:16:00+04:00</updated>
    <id>http://odino.org/source-code-workflow-after-3-months-of-github</id>
    <content type="html"><![CDATA[<p>When I joined <em>Rocket Internet</em> 4 months ago,
here in Dubai, the team was about to experience
the transition from the very old SVN to Git, with
everything hosted on <a href="https://github.com">Github</a>.</p>

<p>In this post I try to wrap-up the impressions
of the team and the changes in the lifecycle of
our source code with the adoption of the
Git+Github combo.</p>

<!-- more -->


<p><img class="right" src="/images/github.png"></p>

<h2>Premise</h2>

<p>We had our first meeting about the switch to Git
after our CTO migrated our repositories from
our hosted SVN repos to Github with
<a href="http://www.kernel.org/pub/software/scm/git/docs/git-svn.html">git-svn</a>.</p>

<p>In that meeting &ndash; useful for a lot of people who
never used Git before &ndash; we explained the basic
stuff that you should know to get started with
this VCS:</p>

<ul>
<li>distribute vs centralized versioning system</li>
<li>Github act as a remote</li>
<li><code>commit</code> is local</li>
<li><code>push</code>, <code>pull</code> and <code>fetch</code></li>
<li>rebasing</li>
<li>branching and merging</li>
<li><a href="http://nvie.com/posts/a-successful-git-branching-model/">gitflow</a></li>
</ul>


<p>All in all we wanted to follow gitflow but at the
end it turned out that in some parts we had to simplify
the workflow and add more complexity somewhere else:
keep reading to get more insights.</p>

<h2>Our development workflow</h2>

<p>So let&rsquo;s say that today we have <code>master</code> and <code>dev</code> aligned:</p>

<ul>
<li><code>master</code> is an <em>always-ready-to-be-released</em> branch, in which
you commit code that is tested and works on production: the aim is
to have a solid fallback if you deploy and need to rollback ( <a href="https://github.com/capistrano/capistrano/wiki/">capistrano</a>
would probably be a better solution, since it&rsquo;s more immediate, but
again you need an history of working versions )</li>
<li><code>dev</code> branches from <code>master</code>: it&rsquo;s the integration branch, where
you merge features developed for your next release</li>
</ul>


<p>As the days go by, people will branch from develop to
implement new features/fix bugs:</p>

<p><code>bash
git checkout develop
git checkout -b bug-1123
</code></p>

<p>The developer is free to handle its <em>ticket</em> with both
local and remote branches: although pushing to the remote
makes <a href="http://ariejan.net/2011/07/05/git-squash-your-latests-commits-into-one/">squashing</a> harder, I would always recommend to push
every day.</p>

<p>Let&rsquo;s say that the bugfixing seems done and we are ready
to include that code in the <code>develop</code>, which is gonna lead
to our next release: the developer now opens a <a href="https://help.github.com/articles/using-pull-requests/">pull request</a>
from its branch to <code>develop</code>:</p>

<p><img class="center" src="/images/pull-request.jpeg"></p>

<p>It&rsquo;s always useful to name the PR like <code>TICKET-ID Headline</code>
and add a few more comments to explain your changes, if it&rsquo;s worth it:
given that you <strong>name your branches after the tickets</strong> that they
implement/fix, adding the ticket ID to the PR&rsquo;s title lets
who needs to merge it into develop to directly copy the branch
name from Github &ndash; otherwise you need to type it manully<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>.</p>

<p>The release manager ( who reviews PRs and merges them into
the integration branch ) can now have a look at your PR,
comment it and accept or reject it:</p>

<ul>
<li>if it&rsquo;s accepted it gets merged and the ticket status
changes from <code>bugfixing</code><sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup> to <code>Ready for QA</code></li>
<li>if rejected it&rsquo;s re-assigned back to the developer, and
technical comments are added <strong>directly on Github</strong></li>
</ul>


<p><code>bash After the release manager has positively evaluated your PR, ctrl+c on the branch name...
git fetch
git checkout TICKET-ID
git checkout develop
git merge --no-ff TICKET-ID
</code></p>

<p><img class="left" src="/images/pull-request-namshi.png"></p>

<p>Now times has come to go live with a set of changes:
a <strong>release branch</strong> is created and we tag version
<code>X.Y.Z-beta1</code>, that is gonna be deployed in the first
development environment ( sort of pre-staging ).</p>

<p>If some tests are not passing, the developers add the
related fixes and open the PRs in the release branch
( <code>release-X.Y.Z</code> ), so we re-tag and redeploy ( <code>X.Y.Z-beta2</code> ):
if someone is working on other tickets, which don&rsquo;t have to
be included in version <code>X.Y.Z</code>, the integration branch
is still <code>develop</code>.</p>

<p>After this, a new tag <code>X.Y.Z-rc1</code> is deployed into the
staging environment: if everything is good we create a
new tag, <code>X.Y.Z</code> and go live with it.</p>

<p>After a few hours, we can consider this tag <strong>valid</strong>
and update both <code>master</code> and <code>develop</code>:</p>

<p><code>bash
git checkout master
git merge --no-ff X.Y.Z
git push origin master
git checkout develop
git rebase master
git push -f origin develop
</code></p>

<p>The development cycle starts again.</p>

<h2>Critical paths</h2>

<p>There are some problematic aspects to consider when
you are working with almost 10 people daily pushing/pulling
from the same remote:</p>

<ul>
<li>when you rebase <code>develop</code>, pull request can include old commits
that are already merged, so you just need to ask for a rebase of the
PR&rsquo;s branch</li>
<li>when you rebase <code>develop</code>, always ask people to pull the remote
develop in their local ones, otherwise they will be working with a
different tree ( after the rebase Git is not smart enough to
connect the pre-rebase and after-rebase trees )</li>
<li>if you need to do an hotfix deployment, always branch from
<code>master</code> or the release branch ( if the related tag wasn&rsquo;t merged into
<code>master</code> ): you don&rsquo;t want to <code>cherry-pick</code> commits and then
manually update the PR which takes care of the hotfix</li>
</ul>


<h2>Conclusions</h2>

<p>All in all I think our process has improved so much: first of all
we see less conflicts, thanks to the Git engine<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>, second we have more <strong>control,
transparency and visibility</strong> towards code: being able to comment
every single line of code on Github really helps you when you need
to handle several PRs at once; not to mention the fact that doing
<strong>release-management is way easier</strong>.</p>

<p>By the way, pull request are another good stage of the workflow, since
they let the developer take a final look at the code, review it for
the last time and explain it in the PR message, something that with
SVN and SVN-based services ( like GH ) was <strong>nearly impossible</strong>.</p>

<p>Additionally, coming from Atlassian&rsquo;s hosted services, Github gives
you the reliability I always missed: no apparent downtime so far
and pulling/pushing is really fast; compared to SVN,
this is a huge win for us.</p>

<p>At the end I&rsquo;d say that <strong>we almost doubled our potential</strong> with
these changes, and I think it&rsquo;s 50% because of Git and another 50%
&lsquo;cause of Github: if you don&rsquo;t use them, I definitely recommend
you to switch as soon as possible<sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup>.</p>

<p><div class="footnotes">
<span>
Notes
</span>
	<ol>
		<li id='fn:1'>We use &lsquo;bigfixing&rsquo; both for new features and bugs, it&rsquo;s just to identify a status in which the developer is working on the ticket <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>Github&rsquo;s markup makes it difficult to <code>ctrl+c</code> it from the &ldquo;You&rsquo;re asking @user to merge 1 commit into repo:develop from repo:TICKET-ID&rdquo; string <a href='#fnref:2' rev='footnote'>↩</a></li><li id='fn:3'>But this can just be just my personal feeling <a href='#fnref:3' rev='footnote'>↩</a></li><li id='fn:4'>BitBucket is a pretty cheap alternative to Github <a href='#fnref:4' rev='footnote'>↩</a></li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The advent of the lead developer]]></title>
    <link href="http://odino.org/dos-and-donts-of-a-teamleader/"/>
    <updated>2012-07-15T23:30:00+04:00</updated>
    <id>http://odino.org/dos-and-donts-of-a-teamleader</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/odino.young.jpg" title="My first &ldquo;Hello World&rdquo;, while still%nla teenager: forgot &lsquo;echo&rsquo;.%nlDebugged no output for hours.|200" ></p>

<p>Sometimes you slowly see that month after month your job is
changing, and after 5 years you can&rsquo;t even remember about the
freshman who was writing his first &ldquo;Hello World!&rdquo; with
whatever programing language.</p>

<!-- more -->


<h2>Prelude</h2>

<p>It&rsquo;s not a secret that I actually stopped coding for most of my time:
in my previous experience at DNSEE things werent that different from
here at Rocket except that with the software stack that we have it&rsquo;s
nearly impossible to dedicate 8 hours to coding.</p>

<p>This is leading me to a radical change: although I&rsquo;m actually doing
the <em>team leader</em> since 2 years now I feel that <strong>the time dedicated
tDo coding is really gone</strong> &ndash; I mean, when the majority of your time
is spent on an IE.</p>

<p>In DNSEE we didn&rsquo;t do actual <em>code reviews</em>, we didn&rsquo;t had a
<em>product</em> and the account/PM always had the final word on
&ndash; almost &ndash; everything: it was the world of web agencies,
<strong>where pixels matter</strong>.</p>

<p>Now that things are different &ndash; pretty different, not completely &ndash;
and there are many aspects really depending on IT,being a lead
developer means renouncing to lot of coding &ndash; which is actually fine
in such this kind of context.</p>

<p>So after 5, almost 6, years working in this industry I thought that
this was really the right time to share some pills of my daily job,
leading a team of developers.</p>

<p>As I like to state:</p>

<p><blockquote><p>[Great] leaders let other leaders emerge</p></blockquote></p>

<p>From August I will publish one post per day with a tip I learned so far,
hope you&rsquo;ll enjoy it.</p>

<h2>1. Find your buddy, grow with him</h2>

<p>It may sound quite obvious, but having someone which is facing your
same problems and situations is maybe the best</p>

<h2>2. Call back</h2>

<p>non dimenticare di chiamare i tuoi vecchi colleghi, CTO</p>

<h2>3. Move to Github</h2>

<p>aiuta le code review, fa sentire mejo gli sviluppatori</p>

<h2>4. Never play the blame game</h2>

<p>a cosa sempre trovare chi causa l'errore ed esporlo a pubblica gogna?</p>

<h2>5. Pull vs push</h2>

<p>vuoi responsabilizzare o instaurare un regime dittatoriale?</p>

<p>se assegni, scateni la paura del &ldquo;cosa dovro fare mo'&rdquo;, se invece vai di pull stimolerai le persone</p>

<h2>6. You are a coach</h2>

<p>non dimenticarlo, anche i migliori sotto di te &ndash; o sopra di te &ndash; devono imparare tutto cio che hai da insegnare</p>

<p>in virtu di cio non perdere mai tempo prezioso e pensa sempre a come puoi migliorare gli altri nei tempi morti</p>

<h2>7. Help yourself with your best resource: other people</h2>

<p>per avere un contesto dovrai essere sempre meno tecnico, da un lato sara il CTO ad aiutarti nel contesto, dall'altro gli sviluppatori per i problemi di codice quotidiano</p>

<h2>8. Stop considering yourself a coder</h2>

<p>se tu codi, non hai la visione di team: ergo prenderai uno stipendio da lead senza esserlo di fatto</p>

<p>non sarebbe male senonche 1. non metterai in cantiere esperienza da lead 2. il tuo team non sara' per nulla produttivo, un po come i piani trimestrali sputtanati all'ultimo 3. gli altri non ti riconosceranno mai come un leader ma semplicemente come uno che sa qualcosa in piu</p>

<h2>9. Don&rsquo;t consider yourself a middle-manager</h2>

<p>non perdere mai di vista il codice: le nuove tecniche &ndash; se introdotte da te &ndash; sono quelle che faranno vedere al team quanto puoi aiutarli</p>

<h2>10. Goals</h2>

<p>non perdere di vista gli obietti: fissali e usa le retrospettive</p>

<h2>11. They are not your friends</h2>

<p>non avere paura di essere duro ed arrabbiarti: i membri del team non sono tuoi amici ma colleghi, ergo &ndash; per te e per loro &ndash; e' importante che ti dimostri autorevole e fai valere le tue ragioni, anche se puoi sembrare pedante</p>

<p>forse ci vorranno mesi od anni, ma te ne saranno riconoscenti</p>

<h2>12. Dont think at your problems</h2>

<p>I problemi del team vengono prima di tutto: la domanda che ti dovresti porre ogni giorno e': cosa posso fare per semplificare il lavoro degli altri?</p>

<h2>13. Discuss your decisions and go back to school, if needed</h2>

<p>non arrampicarti su cosa gia conosci, se sai che qualcosa di innovativo &ndash; presentato da altri &ndash; puoi fare meglio quel lavoro: 1. non potrai mai rimanere al passo degli altri sviluppatori quindi devi rassegnarti a valutare e seguire i consigli sulle implementazioni low-level 2. se dopo 2 anni continui a voler risolvere i problemi col tuo background stai risolvendo quei problemi con tecnologie vecchie 2 anni</p>

<h2>14. Get personal</h2>

<p>cerca di capire quali fattori extra-lavorativi possono influezare le persone che lavorano con te, ti aiuta ad aiutarli</p>

<h2>15. Know'em</h2>

<p>studio il loro CV e background, sii preparato, li fara sentire rispettati</p>

<h2>16. Use retrospectives as a proof of your good work</h2>

<p>ogni 2/4 settimane analizza gli obiettivi posti e dove siete arrivati, per far capire che state seguendo quanto vi siete posti e ci state riuscendo</p>

<h2>17. If you have problems, they don&rsquo;t have problems</h2>

<h2>18. If they have problems, you have problems</h2>

<h2>19. Establish a pattern: y'all are nerds</h2>

<p>cerca di seguire un approccio e farli ritrovare in un ritmo prestabilito: siete tutti nerd quindi non amate troppo le sorprese</p>

<h2>20. There&rsquo;s a CTO somewhere</h2>

<p>fai sempre affidamento al cto e condividi con lui le tue scelte</p>

<h2>21. Motivate your choices</h2>

<p>se fai tdd, perche lo fai: non perdi tempo in inutili pippe e fai testing allo stesso tempo</p>

<h2>22. Team meetings VS personal meetings</h2>

<p>fai i personali cosi qualcuno si puo confidare</p>

<h2>23. Doubt yourself</h2>

<p>fai parlare il tuo team con il cto, spronali a migliorarti e a tirre fuori problemi</p>

<h2>24. Spread warnings</h2>

<p>non uscirtene con ora siamo nei casini, man mano che le situazioni si fanno complicate alza il livllo degli alert</p>

<h2>25. Isolate from your team</h2>

<p>ad un certo punti vattene in vacanza e fai finta che non ci sei: non devono abituarsi a te, lavorare senza di te deve metterli alla prova
e allo stesso tempo ricaricarvi nel rapporto di crescita</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wanna be hired? Go get yourself a blog and a github profile]]></title>
    <link href="http://odino.org/wanna-be-hired-go-get-yourself-a-blog-and-a-github-profile/"/>
    <updated>2012-03-27T11:32:00+04:00</updated>
    <id>http://odino.org/wanna-be-hired-go-get-yourself-a-blog-and-a-github-profile</id>
    <content type="html"><![CDATA[<p>As part of my last days in <a href="http://dnsee.com">DNSEE</a> and first days in
<a href="http://rocket-internet.de">Rocket</a> I&rsquo;m involved in two recruitment processes
and after the huge amount of CVs we got for DNSEE after the
<a href="http://www.codemotion.it/">Codemotion</a> I thought it would be good to
share some thoughts about <strong>my</strong> recruiting habits.</p>

<!-- more -->


<h2>European format</h2>

<p>First of all, <strong>forget about the <a href="http://en.wikipedia.org/wiki/Europass">european CV format</a></strong>:
it works when you want to work in a body rental Java company and want to
be identified with a mere number (and if you want to end up like that,
stop reading this article)<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.</p>

<p><img class="left" src="/images/hipster.glasses.jpg"></p>

<p>Some months ago someone on Twitter was suggesting to move the CV on
<a href="http://slideshare.net">slideshare</a>, something I really wanted to do &ndash; but
I never took the time to do so: bare in mind that reading a CV can be
funny at the beginning of the hiring process, but as you get tons of
applies, it becomes &ndash; as everything &ndash; a repetitive, thus annoying,
activity, so putting a bit of creativity on your CV will be considered
as a huge plus; <strong>the more you attract, the less you&rsquo;ll be considered
the average</strong>.</p>

<p>The european format just does not work when you need to highlight
your motivation and expertise you have on interesting practices,
which is what I basically look for, at least for a first glance.</p>

<h2>It&rsquo;s not where you worked unless it was The Place</h2>

<p><img class="right" src="/images/virgin.jpg"></p>

<p>It&rsquo;s pretty common to see dozens of working experiences in a CV,
without a deep description of the position held and a summary of
your daily duties.</p>

<p>Do you think people care about <strong>where</strong> you worked or <strong>what</strong> you did?</p>

<p>Unless you have been working for some major, people won&rsquo;t care about
your employer because it will never add anything to your profile, it&rsquo;s
just a (bad) sign that you worked for N years at this place.</p>

<p>What I suggest is to <strong>add various aspects of your working experience</strong>,
like big customers you had to deal with, good practices like TDD or
&ndash; in general &ndash; automated test and what you brought inside the company,
like a new approach to development or a (new) technology which was
suitable for their use-case.</p>

<h2>Ideal code VS production one</h2>

<p><blockquote><p>Any developer can show you diamonds, but a few are able not to deliver crap to your customers.</p></blockquote></p>

<p>Let&rsquo;s be honest for a moment: <strong>production code isn&rsquo;t ideal code</strong><sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>.</p>

<p>Technical debt is something we are used to deal with and it&rsquo;s not <em>that</em> big issue:
I like when developers admit that under difficult circumstances,
they took creepy shortcuts to overcome an issue which needed to
be fixed in a relatively short amount of time.</p>

<p>So, given that you won&rsquo;t show your next employer your production code
(since it is intellectual property of your current company or customers)
it would be nice if you show them the top line of your skiils, maybe
via a Github profile; doing so, you give the chance to take a
look at your best code.</p>

<p><img class="right" src="/images/hand.jpg"></p>

<h2>Why don&rsquo;t you share your thoughts with me?</h2>

<p>A big plus would be reading your blog wherever &ndash; blogspot,
posterous, etc &ndash; to gain confidence with your ideas and
what you like to talk about when not (necessarily) coding
for your current company.</p>

<p>Blogging, also once in a month, gives you the possibility
to be evaluated without the need to do anything: reading your
posts will make recruiters get in touch with you, as a person,
your style, coding skills, aims and so on.</p>

<h2>MS Excel, really?</h2>

<p>Please stop mentioning know-how on the following subjects:</p>

<ul>
<li>MS Word</li>
<li>MS Excel</li>
<li>Photoshop</li>
<li>Dreamweaver</li>
<li><em>stuff like that</em></li>
</ul>


<p>because they will make you look like <strong>a developer who doesn&rsquo;t understand
its precise scope</strong>.</p>

<h2>So what?</h2>

<p>Do I have to mention that I would like to see great people joining me
and <a href="http://www.linkedin.com/company/rocket-internet-gmbh/careers">Rocket</a>
in Dubai or my former <a href="http://www.linkedin.com/company/dnsee/careers">DNSEE colleagues</a>
in Rome?</p>

<p>I did it :)</p>

<p><div class="footnotes">
<span>
Notes
</span>
	<ol>
		<li id='fn:1'>I give this advice although I have an Europass CV, but &ndash; as I like to say &ndash; it&rsquo;s a raped-european-format CV, so not as standard as you might think <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>Since production code has a deadline and ideal code is a never-ending refactoring, I won&rsquo;t listen to any objection here <a href='#fnref:2' rev='footnote'>↩</a></li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
</feed>
