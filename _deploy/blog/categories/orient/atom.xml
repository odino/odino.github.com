<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Orient | Alessandro Nadalin]]></title>
  <link href="http://odino.github.io/blog/categories/orient/atom.xml" rel="self"/>
  <link href="http://odino.github.io/"/>
  <updated>2013-06-18T12:47:27+04:00</updated>
  <id>http://odino.github.io/</id>
  <author>
    <name><![CDATA[Alessandro Nadalin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OrientDB ODM beta 5: repositories, compatibility with 1.2.0 and more stability]]></title>
    <link href="http://odino.github.io/orientdb-odm-beta-5-repositories-compatibility-with-1-dot-2-0-and-more-stability/"/>
    <updated>2012-11-23T09:10:00+04:00</updated>
    <id>http://odino.github.io/orientdb-odm-beta-5-repositories-compatibility-with-1-dot-2-0-and-more-stability</id>
    <content type="html"><![CDATA[<p>It has almost been a baby&rsquo;s delivery, but we eventually made it:
the PHP <a href="http://css.dzone.com/articles/era-object-document-mapping">ODM</a> for <a href="http://code.google.com/p/orient/">OrientDB</a> has finally reached its <strong>5th beta</strong>.</p>

<!-- more -->


<p>Thanks to the huge effort of <a href="http://davidfunaro.com">David Funaro</a> and the push from <a href="https://twitter.com/Ocramius">Marco Pivetta</a> we
have just released the <code>beta-5</code> version of this library, which lets
you work with the infamous GraphDB in PHP: there is a plethora of
changes and some news about the future of the library, so I&rsquo;ll try
to recap a bit what we&rsquo;ve done so far in almost <strong>one year</strong> of
active development.</p>

<h2>Composer</h2>

<p>The entire library (query builder, HTTP binding and ODM) is now
<em>composerified</em> (have a look at the <a href="https://github.com/congow/Orient/blob/beta-5/composer.json#L24">dependencies</a>):
this was an important step since we wanted to completely get
rid of git submodules and embrace this new and &ndash; sorry PEAR &ndash;
finally decent packaging system for PHP.</p>

<h2>Symfony2: gimme MOAR</h2>

<p>We hate the <a href="http://en.wikipedia.org/wiki/Not_invented_here">NIH approach</a>, so whenever there is a library which is tested, decoupled
and does what we need, we tend to use it instead of rewriting from scratch some new
userland code.</p>

<p>This has been the case for our filesystem classes, that &ndash; as they were first very simple
but tended to grow &ndash; have now been replaced with the <a href="http://symfony.com/doc/2.0/components/finder.html">Symfony2 finder</a>.</p>

<p>At the same time we also added the <a href="http://symfony.com/doc/2.0/components/class_loader.html">ClassLoader component</a>, which replaces
our old <a href="https://github.com/congow/Orient/blob/beta-5/test/PHPUnit/bootstrap.php">PSR-0 compatible basic autoloader</a>.</p>

<h2>Compatibility with the stable OrientDB 1.2.0</h2>

<p>OrientDB is stable <a href="http://www.h-online.com/open/news/item/NoSQL-Document-Graph-database-OrientDB-1-0-released-1576260.html">since months</a>,
we couldn&rsquo;t release a version of our library without
upgrading the compatibility to OrientDB (we were still at version <code>1.0-rc6</code>):
we are now compatible with OrientDB <code>1.2.0</code>.</p>

<p>The move has been quite easy thanks to the test suite that we have
built so far, but we are still probably missing a few features
introduced in <code>1.1</code> and <code>1.2</code>: as soon as we will go on with the
library we will map what the OrientDB team has added to the DB &ndash;
for example, <a href="http://nuvolabase.blogspot.com/2012/09/orientdb-supports-functions.html">functions</a>.</p>

<h2>Fetchplans integrated in the Manager</h2>

<p><a href="http://code.google.com/p/orient/wiki/FetchingStrategies">Fetchplans</a> specify the way OrientDB should lazy-load records:
we have now <a href="https://github.com/congow/Orient/commit/57a5c33ebb02ba8c3d738c2abe1de1c27ba4e846">added support to them</a>,
meaning that if you dont want to lazy-load linked records (<code>*:-1</code>),
the ODM is able to read the entire result from OrientDB and
build linked records as PHP objects (or array of objects).</p>

<p>In the <a href="https://github.com/congow/Orient/commit/57a5c33ebb02ba8c3d738c2abe1de1c27ba4e846#L12L74">example</a>,
you see that <code>$post-&gt;comments</code>:</p>

<ul>
<li>is an array (which eventually contains objects)</li>
<li>is not a <code>Proxy\Collection</code>, which would mean it&rsquo;s a collection of lazy-loaded records</li>
</ul>


<p>by just using the correct fetchplan:</p>

<p>``` php
&lt;?php</p>

<p>$post = $this->manager->find(&lsquo;27:0&rsquo;, &lsquo;*:-1&rsquo;);</p>

<p>var_dump($post->getComments(); // an array of objects, no lazy-loading
```</p>

<h2>Repositories</h2>

<p>We implemented the <a href="https://github.com/congow/Orient/blob/beta-5/src/Congow/Orient/ODM/Repository.php">repository pattern</a> &ndash; as
Doctrine 2 does: you are now able to access
virtual collections and retrieve records
through them:</p>

<p>``` php
&lt;?php</p>

<p>use Congow\Orient\ODM\Manager;</p>

<p>$manager    = new Manager(&hellip;);
$repository = $manager->getRepository(&lsquo;Users&rsquo;);</p>

<p>$user = $repository->find($id);
```</p>

<h2>Doctrine persistence</h2>

<p>Since one of our aims is to be as compatible
as possible with Doctrine&rsquo;s ODMs, we integrated
the <a href="https://github.com/congow/Orient/issues/71"><em>Persistence</em> interfaces from Doctrine 2</a>:
most of the methods are not implemented yet (<code>throw new Exception()</code>),
as actual persistence should come in <code>beta-6</code>/<code>rc-1</code>, but
the good news is that when retrieving objects from the DB
you can still use the same APIs that the Doctrine ODMs
provide you.</p>

<h2>Integration tests</h2>

<p>This release was mainly delayed because of
integration tests<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>: we promised a fully-tested
hydration mechanisms (converting DB records in
POPOs) for <code>beta-5</code> and this has been, slowly,
accomplished.</p>

<p><a href="https://github.com/congow/Orient/commit/37cfe0fdad7f0caba2b22cfdce1006ddacfc63e7">Repositories</a>,
<a href="https://github.com/congow/Orient/commit/b3706dfb3470eb27e12c4944e398a5d911fe2598">hydration</a>
and <a href="https://github.com/congow/Orient/issues/68">data types</a>
are now covered by integration tests.</p>

<h2>Refactoring proxies</h2>

<p>The way we <a href="https://github.com/nrk/Orient/commit/0bed0196f83c6048b971accbe2d80f3a8c81c31b">generate proxies</a> is one of the
most interesting parts of the library:
with this release we changed the way we
do it in order to provide
a <strong>more flexible and straightforward
mechanism for doing lazy-loading</strong>.</p>

<p>Usually when you retrieve a record in OrientDB
you won&rsquo;t have related records:</p>

<p>``` bash SELECT FROM Address LIMIT 1
{
  &ldquo;result&rdquo;: [{</p>

<pre><code>    "@type": "d", 
    "@rid": "#19:0", 
    "@version": 6, 
    "@class": "Address", 
    "type": "Residence", 
    "street": "Piazza Navona, 1", 
    "city": "#21:0", 
    "nick": "Luca2"
}
</code></pre>

<p>  ]
}
```</p>

<p>as you see, by default OrientDB doesn&rsquo;t
retrieve the related record (<code>city</code>), but
provides a <em>pointer</em> to that record (the <code>RID</code>).</p>

<p>When you retrieve a record via the <code>Manager</code> class,
the ODM doesn&rsquo;t return you a <a href="https://github.com/congow/Orient/blob/beta-5/test/Integration/Document/Address.php">POPO</a>, but a <a href="https://github.com/congow/Orient/blob/beta-5/test/proxies/Congow/Orient/Proxy/test/Integration/Document/Address.php">proxy class
that overrides the POPO</a>, allowing lazy-loading.</p>

<p>Proxy classes, basically, just call parent methods,
and if the parent method has something to return:</p>

<ul>
<li>if the <em>returnable</em> is a string, an array, etc <strong>or a POPO</strong>, they return it</li>
<li>if the returnable is an <code>AbstractProxy</code> object,
it means that there is a record/collection of records
that have to be loaded from OrientDB with an extra-query</li>
</ul>


<p>``` php Code example to understand lazy-loading
&lt;?php</p>

<h1>A proxy class is returned</h1>

<p>namespace Congow\Orient\Proxy\test\Integration\Document;</p>

<p>class Address extends \test\Integration\Document\Address
{</p>

<pre><code>  public function getCity() {
    $parent = parent::getCity();

    if (!is_null($parent)) {
        if ($parent instanceOf \Congow\Orient\ODM\Proxy\AbstractProxy) {
            return $parent();
        }

        return $parent;
    }
}
public function setCity($city) {
    $parent = parent::setCity($city);

    if (!is_null($parent)) {
        if ($parent instanceOf \Congow\Orient\ODM\Proxy\AbstractProxy) {
            return $parent();
        }

        return $parent;
    }
}
</code></pre>

<p>}</p>

<h1>When calling $address->getCity(), we will actually</h1>

<h1>call the __invoke() method of a Proxy object</h1>

<p>namespace Congow\Orient\ODM;</p>

<p>use Congow\Orient\ODM\Mapper;
use Congow\Orient\ODM\Proxy\AbstractProxy;</p>

<p>class Proxy extends AbstractProxy
{</p>

<pre><code>protected $manager;
protected $rid;
protected $record;

/**
 * Istantiates a new Proxy.
 *
 * @param Mapper $manager
 * @param string $rid
 */
public function __construct(Manager $manager, $rid)
{
    $this-&gt;manager = $manager;
    $this-&gt;rid = $rid;
}

/**
 * Returns the record loaded with the Mapper.
 *
 * @return object
 */
public function __invoke()
{
    if (!$this-&gt;record) {
        $this-&gt;record = $this-&gt;getManager()-&gt;find($this-&gt;getRid());
    }

    return $this-&gt;record;
}
</code></pre>

<p>}
```</p>

<p>As you see, calling the <code>__invoke()</code> method
of a proxied object will make the manager do
an extra-query to retrieve the lazy-loaded record.</p>

<h2>Support of sessions in the HTTP client</h2>

<p><a href="https://github.com/nrk">Daniele Alessandri</a> took his time to add <a href="https://github.com/congow/Orient/pull/118">native support for cookies</a> in the
HTTP client which is used in the native HTTP binding: thanks
to this we can decide whether to re-use an existing session
while querying the DB.</p>

<h2>Simplified requirements</h2>

<p>We have now removed <a href="https://github.com/nrk/Orient/commit/bc8f94e7c07147aec1c0c4ed852b7b9d02f4a96c">APC as a requirement</a> for the library: since it
was an easy fix we thought it makes sense not to force everyone to have
APC installed everywhere<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>.</p>

<h2>Contributions</h2>

<p>I&rsquo;ve been pretty busy over the last months, but
the efforts of the already-mentioned Daniele and
David have been <a href="https://github.com/congow/Orient/graphs/contributors?from=2012-03-31&amp;to=2012-11-18&amp;type=c">huge</a>
to release <code>beta-5</code>: I virtually clap my hands
for them, as they are the main reason behind all
of this progress.</p>

<h2>Tests and CI</h2>

<p>As always, green tests: the build is handled by
Travis-CI. Also that one <a href="https://secure.travis-ci.org/#!/congow/Orient">is green</a>.</p>

<h2>Doctrine and beta-6</h2>

<p>David is already working on refactoring the
namespaces to ask the Doctrine team to
integrate the library into their organization:
as agreed months ago, there shouldn&rsquo;t be a big
problem in doing so.</p>

<p>As this will be <strong>the first ODM for a GraphDB</strong>,
everyone is pretty excited about it:</p>

<ul>
<li>we will get more support and contributions for the library itself</li>
<li>it&rsquo;s the first GraphDB that goes into Doctrine and the PHP world &ndash; I mean, <strong>properly</strong></li>
</ul>


<p>After that, we will face the <a href="https://github.com/congow/Orient/issues?milestone=4&amp;page=1&amp;state=open">biggest challenges</a> so far:</p>

<ul>
<li>decoupling ODM, HTTP binding and Query Builder into 3 separate libraries/repositories</li>
<li>refactor a big portion of the codebase according to the feedbacks from the Doctrine community</li>
<li>implement persistence (from POPOs to DB)</li>
</ul>


<p>I&rsquo;m pretty sure the next months will be
productive, intense and full of changes, but
I&rsquo;d realy like to suggest you one thing before
leaving you: <strong>use this library</strong>.</p>

<p>Even though the ODM is not finished yet, <strong>HTTP binding
and Query Builder are already at a stable stage</strong>:
the first one is <strong>already faster</strong> than the <a href="https://github.com/AntonTerekhov/OrientDB-PHP">binary-protocol implementation</a>,
while the second one is a very convenient library to
help you <strong>saving a lot of time</strong> when writing OrientDB&rsquo;s
SQL+.</p>

<p>Again, their level of maturity is pretty high, and we
accept and review bugs/feature requests pretty fastly.</p>

<p>So, what? Now, there are <strong>no more excuses</strong>.</p>

<p><div class="footnotes">
<span>
Notes
</span>
	<ol>
		<li id='fn:1'>We have a test suite that runs &ldquo;on paper&rdquo;, meaning that those are tests running based on the OrientDB documentation. Integration tests are done, instead, with a real OrientDB instance <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>It is used to provide a basic caching layer for annotations <a href='#fnref:2' rev='footnote'>↩</a></li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The current status of my work with OrientDB]]></title>
    <link href="http://odino.github.io/the-current-status-of-my-work-with-orientdb/"/>
    <updated>2011-05-24T14:09:00+04:00</updated>
    <id>http://odino.github.io/the-current-status-of-my-work-with-orientdb</id>
    <content type="html"><![CDATA[<p>Since I just merged everything on the master, on <a href="https://github.com/odino/Orient">GitHub</a>, I made a few decisions about the OrientDB PHP library ( named Orient ) lifecycle.</p>

<!-- more -->


<p>Great <a href="news:">news:</a> <strong>we are compatible with the RC1 version of OrientDB</strong> ( the README on GitHub is not updated, sorry ).</p>

<p>Since the RC2 snapshot has been released, I&rsquo;ll look if something is broken.</p>

<h2>What&rsquo;s new?</h2>

<p>As <a href="http://www.odino.org/348/the-query-builder-for-orientdb">I said</a>, the huge work for the query builder has been done: you can find it in the <code>beta-2</code> tag.</p>

<p>Now we&rsquo;re only waiting integration tests and the resolution of <a href="http://code.google.com/p/orient/issues/detail?id=374&amp;q=quotes">a bug in OrientDB&rsquo;s SQL parser</a>.</p>

<h2>The old stuff?</h2>

<p>I fixed some links from my first post talking about <a href="http://www.odino.org/328/graph-in-php-through-orientdb">OrientDB and PHP</a>, through the binding of the library.</p>

<p>If you want to use it, just use the <code>beta-1</code> tag.</p>

<h2>What&rsquo;s coming?</h2>

<p>We plan to have 4 beta releases in the next &frac34; months:</p>

<ul>
<li><code>beta-3</code>, which marks the end of the whole query builder, meaning that all the new SQL commands are integrated in the QB and integration tests are done</li>
<li><code>beta-4</code>, where we will be able to retrieve hydrated records from a query executed with the QB: it obviously includes annotations on your domain POPOs</li>
<li><code>beta-5</code>, in which you&rsquo;ll be able to manage repository classes</li>
<li><code>beta-6</code>, when you will be able to persist records through the document manager</li>
</ul>


<h2>Wanna help?</h2>

<p>Help would be really appreciated: not only in writing bunches of code, but also in helping with the design of the whole library; for example, I just asked in OrientDB ML questions about <a href="https://groups.google.com/d/topic/orient-database/0hPWojYPJ9Q/discussion">protocols interoperability in PHP</a>.</p>

<p>Feedbacks on this kind of stuff are really welcome.</p>

<h2>What&rsquo;s ok with this library?</h2>

<p>The aim is to build a general purpose library to manage OrientDB from PHP: having loosely coupled components means that you&rsquo;ll be able to use the query builder to build SQL statements, or the binding to query OrientDB with raw strings through the HTTP protocol.</p>

<p>Keyword: decoupling; that&rsquo;s why we&rsquo;re already thinking about <strong>interoperability</strong>.</p>

<p>Anton Terekhov is building the binding for the <a href="https://github.com/AntonTerekhov/OrientDB-PHP">binary protocol</a>, so we don&rsquo;t want, for example, to force people to use the HTTP one, and that&rsquo;s why the design of the whole library is made preventing coupling between components.</p>

<h2>Ah, I was forgetting about&hellip;</h2>

<p>You can download the library and, with phpunit, run the tests ( the integration one, for the binding, are disabled by default, since they require a working instance of OrientDB ) with:</p>

<p><code>
phpunit --configuration=Test/PHPUnit/phpunit.xml
</code></p>

<p>from the root of the library.</p>

<p>I&rsquo;ve setup also the PHP_CodeSniffer code analysis, just run:</p>

<p><code>
chmod +x report.sh
./report.sh
</code></p>

<p>and look into <code>log/report/index.html</code> with a browser.</p>
]]></content>
  </entry>
  
</feed>
