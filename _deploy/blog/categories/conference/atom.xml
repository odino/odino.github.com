<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Category: Conference | Alessandro Nadalin]]></title>
  <link href="http://odino.org/blog/categories/conference/atom.xml" rel="self"/>
  <link href="http://odino.org/"/>
  <updated>2014-07-06T00:10:32+04:00</updated>
  <id>http://odino.org/</id>
  <author>
    <name><![CDATA[Alessandro Nadalin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tips and Tricks for Your Service Oriented Architecture - Video]]></title>
    <link href="http://odino.org/tips-and-tricks-for-your-service-oriented-architecture-video/"/>
    <updated>2014-07-06T00:05:00+04:00</updated>
    <id>http://odino.org/tips-and-tricks-for-your-service-oriented-architecture-video</id>
    <content type="html"><![CDATA[<p>The folks from the <a href="http://cakefest.org/">CakeFest</a> got to upload the video of my
<a href="http://www.slideshare.net/odino/tips-and-tricks-for-your-service-oriented-architecture-cakefest-2013-in-san-francisco">first talk</a>
at the 2013 edition of their conference online.</p>

<!-- more -->


<p>It was my first trip to the States and got the chance to discuss
with the guys pitfalls and advantages of going SOA:</p>

<iframe width="100%" height="600px" src="http://odino.org//www.youtube.com/embed/PdClg5bMcow" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Planning to Write Long-term APIs? @cirpo and Me Shared Our Experience]]></title>
    <link href="http://odino.org/planning-to-write-long-term-apis-at-cirpo-and-me-shared-our-experience/"/>
    <updated>2014-07-05T23:34:00+04:00</updated>
    <id>http://odino.org/planning-to-write-long-term-apis-at-cirpo-and-me-shared-our-experience</id>
    <content type="html"><![CDATA[<p>A few weeks ago <a href="https://twitter.com/cirpo">@cirpo</a> and me
flew back to Italy to partecipate to the 2014 edition of the
<a href="http://2014.phpday.it/">PHPDay</a> in Verona, sharing our
experience building APIs.</p>

<!-- more -->


<p>It was really a great time, especially since I missed the
event in the past couple of years, so it was a blast to see
those good'old tech-friends again.</p>

<p>Our presentation, titled &ldquo;<a href="http://www.slideshare.net/odino/dont-screw-it-up-how-to-build-durable-web-apis-phpday-2014-in-verona-ita">Don&rsquo;t screw it up: how to build durable
web APIs</a>&rdquo;, went <a href="https://joind.in/talk/view/11310">pretty well</a>: have a look below and let me know
if you have any feedback!</p>

<p><div class="slideshare" id="__ss_34940481"><iframe src="http://www.slideshare.net/slideshow/embed_code/34940481 " width="100%" height="550" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[6 Takeways From the Second Day of ConFoo]]></title>
    <link href="http://odino.org/6-takeways-from-the-second-day-of-confoo/"/>
    <updated>2014-02-27T18:27:00+04:00</updated>
    <id>http://odino.org/6-takeways-from-the-second-day-of-confoo</id>
    <content type="html"><![CDATA[<p>Today it was an interesting day here at ConFoo, and I&rsquo;ve
seen some good content dealing with web performances.</p>

<!-- more -->


<h2>Don&rsquo;t pollute domain models with specifications</h2>

<p><img class="right" src="/images/odino-confoo-2.jpg"></p>

<p>During a very good talk I was waiting for since the conference started,
<a href="http://twitter.com/mathiasverraes">Mathias Verrase</a> has been talking
about DDD and domain models and has shown to the audience how you
should not pollute them with specifications.</p>

<p>The proposed approach introduces a bit more verbosity with the advantage
of having cleaner models that reflect your domain.</p>

<p>So, instead of having models knowing the business specification:</p>

<p><code>
$customer-&gt;isPremium();
</code></p>

<p>you might want to refactor the code in a way that makes the
information as part of a business rule (hence, the <em>specification</em>),
that will accept a subject in order to verify that it actually
satisfies the rule / specification:</p>

<p><code>
$premiumSpecification-&gt;isSatisfiedBy($customer);
</code></p>

<h2>Optimizing images</h2>

<p><a href="http://imageoptim.com/">Imageoptim</a> is a very handy tool to losslessly compress images
and save bandwidth while serving them.</p>

<h2>gzip_static</h2>

<p>Instead of gzipping each and every assets <em>on-the-fly</em> you can tell <code>nginx</code>
to look for a previously gzipped version of the same file.</p>

<p>Compile <code>nginx</code> with this option enabled:</p>

<p><code>
./configure --with-http_gzip_static_module
</code></p>

<p>and then turn it on:</p>

<p><code>
gzip_static on;
</code></p>

<h2>Turn off tcp_slow_start_after_idle</h2>

<p><a href="http://www.lognormal.com/blog/2012/09/27/linux-tcpip-tuning/">Turning off window resizing</a>
(or&hellip; downsizing) after a slow start will help clients who take a while
to send back packets over the same, slow, TCP connection, as it doesn&rsquo;t resize
the TCP window contrary to what the system would do by default.</p>

<h2>Pagespeed at nginx level</h2>

<p>I already knew about <a href="https://github.com/pagespeed/ngx_pagespeed">ngx_pagespeed</a>
but totally forgot to use it :)</p>

<h2>More RUM monitoring tools</h2>

<p>I&rsquo;ve come across <a href="https://mpulse.soasta.com">mpulse</a> which is another RUM platform.</p>

<p>Even though their UI is a bit old school, they&rsquo;re (of course) real-time and provide
valuable insides, like pageload times and DOM rendering performances.</p>

<p>Sign up on their site, it&rsquo;s free up to 1M visits a month!</p>

<h2>All in all</h2>

<p>Good day for optimizations and delivering a faster experience to your users, looking
forward to my third day &ndash; with my last talk, about SOAs &ndash; in this cold land!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS Is the Future. Maybe.]]></title>
    <link href="http://odino.org/angularjs-is-the-future-maybe/"/>
    <updated>2014-02-27T11:54:00+04:00</updated>
    <id>http://odino.org/angularjs-is-the-future-maybe</id>
    <content type="html"><![CDATA[<p>Today I gave my 2nd talk here at the ConFoo in Montreal,
an overview of why Angular could fit your <em>future</em> requirements
quite well.</p>

<!-- more -->


<p>Enjoy!</p>

<p><div class="slideshare" id="__ss_31723051"><iframe src="http://www.slideshare.net/slideshow/embed_code/31723051 " width="850" height="650" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[7 Takeways From the First Day of ConFoo]]></title>
    <link href="http://odino.org/7-takeways-from-the-first-day-of-confoo/"/>
    <updated>2014-02-26T20:34:00+04:00</updated>
    <id>http://odino.org/7-takeways-from-the-first-day-of-confoo</id>
    <content type="html"><![CDATA[<p>Today it was the first day of ConFoo here in Montreal and,
as usual, a conference is always good to wrap your head around
solutions, different standpoints and discussions with other
nerds :)</p>

<!-- more -->


<p><img class="right" src="/images/odino-confoo.jpg"></p>

<h2>Websockets to the rescue</h2>

<p>I&rsquo;ve come to learn about <a href="http://en.wikipedia.org/wiki/WebSocket">WebSocket</a>
quite a while ago but I honestly never found a practical application for our
architecture: nonetheless, in one of the talks it was <a href="http://blog.arungupta.me/2014/02/rest-vs-websocket-comparison-benchmarks/">compared to REST</a>
in a context where multiple API calls are made, and the idea of re-using the same
TCP connection is pretty handy at that point.</p>

<p>For sure, things like <a href="http://stackoverflow.com/questions/12103628/spdy-as-replacement-for-websockets">SPDY</a>
are probably already enough from that point of view, but that&rsquo;s not a valid excuse
for not digging deeper into the WS specification.</p>

<h2>Patterns of batch processing</h2>

<p>During the same talk, <a href="https://twitter.com/arungupta">Arun Gupta</a> spoke about
<a href="https://blogs.oracle.com/arungupta/entry/batch_applications_in_java_ee">JSR 352</a>,
a specification for batch processing introduced in Java EE7.</p>

<p>It was really interesting as the specification is quite &ldquo;obvious&rdquo; but anyhow
efficient, as it structures batch jobs following a few rules:</p>

<ul>
<li>every job must process a specific number of items to process</li>
<li>it is divided in steps</li>
<li>each step is then again divided into 3 different sub-steps

<ul>
<li>reading the content of the item (<code>ItemReader</code>)</li>
<li>processing it, executing transformation and any kind of magic over that content (<code>ItemProcessor</code>)</li>
<li>writing the processed content <em>somewhere</em> (<code>ItemWriter</code>)</li>
</ul>
</li>
</ul>


<p>Dividing batches into jobs of a limited number of items is a golden rule (and I would say
your number should be as close to 1 as possible), while the structure that the JSR proposes
is very clean.</p>

<h2>Xamarin</h2>

<p>This tool might be what you were looking for if you&rsquo;re into mobile development:
its aim is to write code once (in C#) that gets <strong>converted to native code</strong> for both
IOS and Android.</p>

<p>If you had to write an app twice, because you needed to go native, you might really
wanna <a href="https://xamarin.com/">have a look at it</a> as, from what I heard, it might
really simplify your life.</p>

<h2>AppDynamics</h2>

<p>My bad for not being aware of <a href="http://www.appdynamics.com/">AppDynamics</a>, but we&rsquo;re pretty
happy with one of their competitors (<a href="http://newrelic.com/">NewRelic</a>) :)</p>

<p>AD is an <strong>application performance management</strong> platform that, just like NR, provides agents for
various platforms in order to collect metrics and reports from the stuff that runs on your
production servers: definitely worth a look, at least to understand the differences between
these guys and NewRelic.</p>

<h2>Detach DOM elements while transforming them</h2>

<p>Switching to something more browser-oriented, I found out about a very simple but
effective tecnique to optimize browser rendering performances when working with DOM
elements: instead of applying a bunch of transformations on a visible element you can
simply hide it, apply them and then show the element again, so that the browser
won&rsquo;t have to repaint and reflow at every transformation but only when you eventually
make the element visible again.</p>

<p>Another way to implement the same tecnique is to clone the element (so that we are actually
just working with a <strong>virtual DOM node</strong>), apply the transformations to that element and then
replacing the existing one by calling <code>parent.innerHtml(virtualElement)</code>.</p>

<p>Pretty simple but much valuable!</p>

<h2>Optimize DOM animations</h2>

<p>Another way to optimize browser performance upon rendering is to execute animations
on elements with an absolute or fixed position.</p>

<p>Why? Again, because then the browser doesn&rsquo;t have to reflow the whole DOM.</p>

<h2>Lodash</h2>

<p>A very <a href="http://lodash.com/">handy JS library</a> that seems to be <a href="http://lodash.com/benchmarks">way faster</a>
than underscore. It is now considered a <a href="http://stackoverflow.com/questions/13789618/differences-between-lodash-and-underscore">superset of underscore</a>
and you might want to look into using it from now on, in place of its predecessor.</p>

<h2>All in all&hellip;</h2>

<p>It was a fairly good day and my <a href="/orientdb-the-fastest-document-based-graph-database/">presentation about OrientDB</a>
went pretty well, can&rsquo;t wait for tomorrow!</p>
]]></content>
  </entry>
  
</feed>