<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: BDD | Alessandro Nadalin]]></title>
  <link href="http://www.odino.org/blog/categories/bdd/atom.xml" rel="self"/>
  <link href="http://www.odino.org/"/>
  <updated>2012-12-08T16:10:31+04:00</updated>
  <id>http://www.odino.org/</id>
  <author>
    <name><![CDATA[Alessandro Nadalin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The "new" development here in DNSEE: BDD and much more]]></title>
    <link href="http://www.odino.org/the-new-development-here-in-dnsee-bdd-and-much-more/"/>
    <updated>2011-10-03T12:34:00+04:00</updated>
    <id>http://www.odino.org/the-new-development-here-in-dnsee-bdd-and-much-more</id>
    <content type="html"><![CDATA[<p>It's been a couple months that we <strong>renewed a few aspects of our experience</strong>, as developers, here at DNSEE, introducing a few practices that common software factories ignore: we - and I - don't know if these practices will always be fine for our daily job but, as far as we saw, things are just working fine.</p>

<!-- more -->


<h2>Behaviour-driven development</h2>

<p><img class="right" src="/images/behat.logo.png"></p>

<p>We introduced <a href="http://behat.org/">Behat</a> in a pilot project, in order to ease the process of veryfing features delivered, which is done by our QA guy, <a href="http://www.linkedin.com/in/villagiovanni">Giovanni</a>.</p>

<p>Additionally, BDD lets developers and <a href="http://www.mountaingoatsoftware.com/scrum/product-owner">product owners</a> speak an <strong>ubiquitous language</strong>, thus the PO can write the test-cases for the development team, in <a href="https://github.com/cucumber/cucumber/wiki/Gherkin">Gherkin</a> language:</p>

<p>``` bash Example of a Gherkin story
Feature: Some terse yet descriptive text of what is desired
   In order to realize a named business value
   As an explicit system actor
   I want to gain some beneficial outcome which furthers the goal</p>

<p>   Scenario: Some determinable business situation</p>

<pre><code> Given some precondition
   And some other precondition
  When some action by the actor
   And some other action
   And yet another action
  Then some testable outcome is achieved
   And something else we can check happens too
</code></pre>

<p>```</p>

<p>thus you - developer - are not always required to write a test for every feature in the project: this task is done by the PO, <strong>helped by you</strong> ( while experienced PO may not need your help, at all ).</p>

<h2>The scope of the tests</h2>

<p>We usually develop projects with the RAD framework <a href="http://www.symfony-project.org/">symfony 1.4</a>, which comes bundled with <em>Lime</em>, a ( limited ) <strong>unit and functional testing tool</strong>: we are now testing features wanted by the stakeholders of the projects with Behat, and functionally testing those ones who require pretty <strong>complex DOM checks</strong>.</p>

<p>Unit tests cover almost every class which are dangerous not to test: apart from these classes, we also use <strong>unit tests to test forms</strong>, because a form can behave in different ways based on the input it receives: since you should tests those forms in a functional test, submitting several times the form and veryfing the expected output, functional tests become very slow ( a test-suite is slow, IMHO, when it lasts more than 10 minutes ): thus, we decided to unit test the forms ( in symfony 1.4, they all are objects, so easy to unit test ).</p>

<p>Unit testing forms means faster test-suites, since, in functional ones we only test the <em>happy path</em>, which is <strong>submitting good values to the form and veryfing the expected successfull output</strong> ( thanks <a href="http://www.agiledevelopment.it/">Jacopo Romei</a> for suggesting it ).</p>

<p><img class="left" src="/images/kit.jpg"></p>

<h2>Capifony</h2>

<p>We started using Capistrano through <a href="http://capifony.org/">Capifony</a>, the automatic-deployment utility written for symfony 1.4: at every commit the developer is responsible of generating the proper doctrine migrations and deploy ( deployment usually takes... one bash command ) with</p>

<p><code>bash Simple capifony usage
cap deploy deploy:migrate
</code></p>

<p>Since we also wanted to ease the process of updating the issue tracker and BDD reports, we created a script that launches the test-suite ( BDD, functional, unit, integration tests ), deploys with Capifony and publishes the BDD reports on Alfresco, the platform we use for sharing documents: it's a dummy bash script, similar to this one.</p>

<h2>SCRUM</h2>

<p><img class="right" src="/images/scrum.jpg"></p>

<p>It's not hidden, we are trying to use <a href="http://en.wikipedia.org/wiki/Scrum_(development">SCRUM</a>) as a framework for our processes: I prefer XP, mainly because there's no <em>CrapMaster</em> and the whole team is connected ( I repeat it, <a href="http://epf.eclipse.org/wikis/xp/xp/guidances/concepts/whole_team_7E4B7BE3.html">whole team</a> ) but things seem to work fine.</p>

<p>Our first ScrumMaster, <a href="http://it.linkedin.com/in/acceli">Andrew</a>, tought us the basics of the framework and helped us in becoming a SCRUM team; as he left, <a href="http://www.scrumalliance.org/profiles/130822-daniela-cecchinelli">Daniela</a> started following the team as <em>product owner</em>, giving some hints to <a href="http://www.davidfunaro.com/">David</a>, which is trying to act as the new ScrumMaster, and the rest of the team.</p>

<h2>Open Source</h2>

<p>We are basically dedicating much more time to OS development: <a href="https://github.com/congow/Orient">Orient</a> is just <a href="https://github.com/congow">one of the libraries sponsored by DNSEE</a>.</p>

<p>In the meantime, we are also continuing the effort of developing our CMF, <a href="https://github.com/congow/congow">ConGoW</a>, but things are going a bit slow and we are keeping it <em>inter nos</em> until we will have a usable version of the framework.</p>

<p>The effort of exposing ourselves to the OS world is paying off now: a few customers are coming asking for mainly-technical works, like refactoring an old-style architecture or re-writing their webservices.</p>

<p>If you find this point strange to mention, consider that DNSEE is a <a href="http://www.webranking.eu/Articles/Articles/2011/Eni--Best-in-online-communication-2010/">leading agency</a> in communication and creativity, thus not born with a technical focus: what else do I need to say? <a href="http://www.linkedin.com/in/alexlombardi">Alex</a>, our CTO, has done a tremendous work.</p>

<h2>Conclusions</h2>

<p>I'm pretty sure that lots of guys who read this blog are aware of this tecniques/processes, so this won't be a groundbreaking discovery: my intention is to share how we try to manufacture software in DNSEE and hear, from y'all, some other points of view.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Behaviour-driven development in PHP]]></title>
    <link href="http://www.odino.org/behaviour-driven-development-in-php/"/>
    <updated>2011-08-27T23:32:00+04:00</updated>
    <id>http://www.odino.org/behaviour-driven-development-in-php</id>
    <content type="html"><![CDATA[<p><a href="http://en.wikipedia.org/wiki/Behavior_Driven_Development">BDD</a> is an established practice which goes beyond test-driven development, assuming we are working on a agile-prone environment and our requirements are expressed as user stories or something similar: although this requirement is not mandatory, <strong>BDD's power is leveraged by using stories</strong>.</p>

<!-- more -->


<p>It basically assumes that instead of focusing on tests, we should start our development process writing down <a href="http://docs.behat.org/quick_intro.html">a story that a parser can translate into a test</a> (a customer cares about features, not tests) a programmer can implement in order to verify that our software respects that story.</p>

<h2>Why BDD?</h2>

<p>It's a pretty unconvenient question :)</p>

<p>Do you know why TDD is extremely powerful? If not, go check it on the web; if so, add to TDD the ability of <strong>writing tests in a ubiquitous language</strong>, letting the team share tests, user-stories and acceptance criteria without the pain of translating an actual story in a functional test that, for example, a customer could never understand.</p>

<h2>Getting started</h2>

<p>I was introduced to BDD by <a href="http://www.linkedin.com/pub/roberto-bettazzoni/2/12b/614">Roberto Bettazzoni</a> at the italian agile day 2010, during a dummy-proof session in which <a href="http://cukes.info/">cucumber</a> was used.</p>

<p>Although you can use Cucumber in your PHP projects (the implementation of the tests, however, should be written in Ruby), Behat is an excellent project which brings native BDD in PHP.</p>

<p>You can - and I recommend it -  <a href="http://pear.behat.org/">install it via PEAR</a>: just make sure you have all the required dependencies by running a simple</p>

<p><code>
behat
</code></p>

<p>after the installation: we had our daily WTF last week because <a href="http://mink.behat.org/">Mink</a>, a browser-emulator abstraction layer required by Behat, wasn't properly installed.</p>

<h2>The integration with symfony 1.4</h2>

<p>From <a href="http://www.dnsee.com/">our POV</a>, we use Behat in a pilot project written in symfony: you only need to install <a href="http://www.symfony-project.org/plugins/sfBehatPlugin">sfBehatPlugin</a> and configure the <code>behat.yml</code> file you find under <code>/config</code>:</p>

<p>``` yml
// behat.yml default config
default:
  paths:</p>

<pre><code>features: %%BEHAT_CONFIG_PATH%%/../test/features/frontend
</code></pre>

<p>  context:</p>

<pre><code>parameters:
  base_url: ~
</code></pre>

<p>```</p>

<p>and then you can run</p>

<p><code>
behat
</code></p>

<p>from the root of your symfony project: no tests, so let's write something!</p>

<p>In symfony, behat's tests are located under <code>/test/features</code>, and are a <code>.feature</code> file, looking like:</p>

<p>```
Feature: US-1
  As anonymous
  I want to open the homepage
  in order to know WTF this site is about</p>

<p>Scenario: anonymous user reaches the site's homepage, viewing it without errors
   Given I am on "homepage"</p>

<pre><code>Then I should see "This website is about crap" in the "body" element
 And The page loads correctly 
</code></pre>

<p>```</p>

<p>So, let's examine it:</p>

<ul>
<li>this "code" should be located in the <code>/test/features/homepageOk.feature</code> file</li>
<li>the <code>Feature</code> element defines the story you are working on (write it as it appears in your backlog)</li>
<li>every <code>Scenario</code> block identifies possible declinations for your story (user logs in with good credentials, user tries to log in with incorrect credentials and so on)</li>
<li>the sentences inside every scenario are the actual testers which are parsed by behat and <strong>translated in actual PHP code</strong></li>
</ul>


<h2>Translated in actual PHP code?</h2>

<p>Yes, because you have a <code>FeatureContext</code> class in which you define some methods that are your tests' implementations: BDD frameworks usually parse your scenarios' lines generating the code you need to implement.</p>

<p>Behat, for example, stores all its testers in the <code>FeatureContext</code> class, and when you write a new scenario, if Behat doesn't know its syntax, it outputs something like:</p>

<p><img class="center" src="/images/behat.png"></p>

<p>so you only need to <em>copy&amp;paste</em> the method in your <code>FeatureContext</code> and implement the method with your logic.</p>

<p>Obviously, BDD frameworks have a set of predefined testers: you can see Behat's ones with</p>

<p><code>
behat --definitions
</code></p>

<p>you will see testers like <code>I should see [...]</code> which tests if the given text lies in the response.</p>

<h2>Producing ubiquitous documentation</h2>

<p>The cool thing is that, when you run your BDD test suite, you can export it in a fancy way, making it readable for every project's stakeholder:</p>

<p><code>
behat --out heyGuysReadThis.html --format html
</code></p>

<p>obtaining something like:</p>

<p><img class="center" src="/images/behat-report.png"></p>

<h2>I won't be exhaustive, so what's next?</h2>

<p>No focus on how to use (<em>deeply</em> use) Behat here: it will be a matter of another post.</p>

<p>Then we will see how to use <a href="http://capifony.org/">capifony</a> to automatically deploy your symfony applications and produce acceptance criteria tests that will be used by your QA guys in order to test your brand new deployment.</p>
]]></content>
  </entry>
  
</feed>
