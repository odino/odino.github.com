<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: symfony | Alessandro Nadalin]]></title>
  <link href="http://www.odino.org/blog/categories/symfony/atom.xml" rel="self"/>
  <link href="http://www.odino.org/"/>
  <updated>2013-01-21T14:18:11+04:00</updated>
  <id>http://www.odino.org/</id>
  <author>
    <name><![CDATA[Alessandro Nadalin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Enter SfCcTesting: Symfony 1.X Client-Crawler Testing]]></title>
    <link href="http://www.odino.org/enter-sfcctesting-symfony-1-dot-x-client-crawler-testing/"/>
    <updated>2012-01-26T11:51:00+04:00</updated>
    <id>http://www.odino.org/enter-sfcctesting-symfony-1-dot-x-client-crawler-testing</id>
    <content type="html"><![CDATA[<p>Earlier today I introduced why and how we initially integrated the <a href="/functional-testing-symfony-1-dot-4-with-phpunit-the-symfony2-way/">Symfony2
testing mechanism into symfony 1.X</a>
: in order to make this piece of software as clean and evolvable as possible
I just isolated it and made a small repo on Github.</p>

<!-- more -->


<h2>SfCcTesting</h2>

<p><a href="https://github.com/odino/SfCcTesting">SfCcTesting</a> - <strong>Symfony 1.X
Client-Crawler Testing</strong> - is a small library (2 classes
and a configuration file) which lets you write functional tests, in symfony 1.X,
<em>a l√† Symfony2</em>.</p>

<p>if you take a look at the <a href="https://github.com/odino/SfCcTesting/blob/master/README.md">repository's README</a>
you will find the basic instructions to start writing your tests: keep in mind
that - although it's usable on <em>old-school</em> symfony projects (svn etc) - you
should install it with Git and manage dependencies and updates with
<a href="/managing-php-dependencies-with-composer/">Composer</a>.</p>

<p>``` php A PHPUnit functional test for symfony 1.X written thanks to SfCcTesting
&lt;?php</p>

<p>use odino\SfCcTesting\WebTestCase;</p>

<p>class HomepageTest extends WebTestCase
{<br/>
  public function testHelloWorld()
  {</p>

<pre><code>$client = $this-&gt;createClient();
$crawler = $client-&gt;get('/');

$this-&gt;assertEquals("Hello world", $crawler-&gt;filter('h1')-&gt;text());
</code></pre>

<p>  }</p>

<p>  protected function getApplication()
  {</p>

<pre><code>return 'frontend';
</code></pre>

<p>  }</p>

<p>  protected function bootstrapSymfony($app)
  {</p>

<pre><code>include(dirname(__FILE__).'/../../test/bootstrap/functional.php');
</code></pre>

<p>  }
}
```</p>

<p>Each test needs to implement 2 protected methods, <code>getApplication()</code> and
<code>bootstrapSymfony()</code>.</p>

<p>The <code>getApplication</code> method defines the application to bootstrap symfony for,
and should be defined in an <code>ApplicationWebTestCase</code> class, like in the following
example:</p>

<p>``` php A base class for testing the backend
&lt;?php</p>

<p>use odino\SfCcTesting\WebTestCase;</p>

<p>class BackendWebTestCase extends WebTestCase
{  <br/>
  protected function getApplication()
  {</p>

<pre><code>return 'backend';
</code></pre>

<p>  }</p>

<p>  protected function bootstrapSymfony($app)
  {</p>

<pre><code>include(dirname(__FILE__).'/../../test/bootstrap/functional.php');
</code></pre>

<p>  }
}
```</p>

<p>so your test files become leaner:</p>

<p>``` php
&lt;?php</p>

<p>class HomepageTest extends BackendWebTestCase
{<br/>
  public function testHelloWorld()
  {</p>

<pre><code>$client = $this-&gt;createClient();
$crawler = $client-&gt;get('/');

$this-&gt;assertEquals("Hello world", $crawler-&gt;filter('h1')-&gt;text());
</code></pre>

<p>  }
}
```</p>

<p>The <code>bootstrapSymfony()</code> method, instead, includes the <strong>bootstrap for the symfony
application in the test environment</strong>; you are <strong>allowed to redefine the location
of the bootstrap</strong> in order not to force you to follow a unique directory
structure convention.</p>

<p>The <code>bootstrapSymfony()</code> method should be placed in a <code>BaseWebTestCase</code> of
our test suite:</p>

<p>``` php A base class for boostrapping the symfony testing environment
&lt;?php</p>

<p>use odino\SfCcTesting\WebTestCase;</p>

<p>class BaseWebTestCase extends WebTestCase
{    <br/>
  protected function bootstrapSymfony($app)
  {</p>

<pre><code>include(dirname(__FILE__).'/../../test/bootstrap/functional.php');
</code></pre>

<p>  }
}
```</p>

<p>so your different <code>ApplicationWebTestCase</code> can share the same bootstrap file:</p>

<p>``` php
&lt;?php</p>

<p>use odino\SfCcTesting\WebTestCase;</p>

<p>class BackendWebTestCase extends BaseWebTestCase
{  <br/>
  protected function getApplication()
  {</p>

<pre><code>return 'backend';
</code></pre>

<p>  }
}
```</p>

<p>``` php
&lt;?php</p>

<p>use odino\SfCcTesting\WebTestCase;</p>

<p>class FrontendWebTestCase extends BaseWebTestCase
{  <br/>
  protected function getApplication()
  {</p>

<pre><code>return 'frontend';
</code></pre>

<p>  }
}
```</p>

<p>That's all folks: with just a bunch of lines of code you are able
to functionally test a symfony 1.X application with the Symfony2
DomCrawler.</p>

<p><a href="https://github.com/odino/SfCcTesting/issues">Feel free to rant</a> and, if you want,
you can already rely on this small library via
<a href="http://packagist.org/packages/odino/SfCcTesting">Packagist</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional testing symfony 1.X with PHPUnit: the Symfony2 way]]></title>
    <link href="http://www.odino.org/functional-testing-symfony-1-dot-4-with-phpunit-the-symfony2-way/"/>
    <updated>2012-01-26T00:45:00+04:00</updated>
    <id>http://www.odino.org/functional-testing-symfony-1-dot-4-with-phpunit-the-symfony2-way</id>
    <content type="html"><![CDATA[<p>In the process of starting a brand new project here at
<a href="http://www.dnsee.com">DNSEE</a>, me and my colleague
<a href="http://www.linkedin.com/in/matteobiagetti">Matteo</a> decided
- in order to make the whole team aware of how to test
Symfony2 applications with <a href="http://www.phpunit.de">PHPUnit</a>
- to port the Symfony2 functional testing mechanism into
this project, which will be developed with symfony
1.X<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.</p>

<!-- more -->


<h2>Background</h2>

<p><a href="http://trac.symfony-project.org/wiki/LimeTestingFramework">Lime</a>
- as you may know - is the officially-supported testing
"framework": it was specifically built to be used inside
symfony 1.X applications and introduced lots of developers
to the whole idea of testing in PHP.</p>

<p>It's a lightweight and simple implementation of a testing
framework, with poor support for mock objects, test doubles,
data providers and test isolation, but it does its job.</p>

<p>Since <a href="http://www.symfony.com">Symfony2</a> decided to move to
PHPUnit - a <strong>serious</strong> and more robust testing framework -
suddenly all symfony developers needed to learn PHPUnit in order
to test the new applications: this - at least - didn't
happened to me, because I heavily faced PHPUnit developing
<a href="http://github.com/congow/Orient">Orient</a>, with lots of
WTFs - mainly <em>my</em> fault.</p>

<p>So, starting this new project, I asked the team if they would
agree on using PHPUnit to functionally test this new symfony 1.4
application, for 2 main reasons:</p>

<ul>
<li><strong>learn PHPUnit</strong>, since the 3 developers involved in the project
have worked for 10|4|0 months on PHPUnit ever</li>
<li><strong>get prepared for the big move</strong>, since Symfony2 uses an analogous testing
mechanism</li>
</ul>


<h2>The Symfony2 way</h2>

<p>In Symfony2 you basically instantiate your application with a fake
client and make requests to it; at each request the application
produces a response and a crawler lets you
<a href="http://symfony.com/doc/2.0/book/testing.html#working-with-the-test-client">test the output</a>:</p>

<p>``` php A functional test for Symfony2
&lt;?php</p>

<p>namespace Acme\DemoBundle\Tests\Controller;</p>

<p>use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;</p>

<p>class FooControllerTest extends WebTestCase
{</p>

<pre><code>public function testIndex()
{
    $client = static::createClient();

    $crawler = $client-&gt;request('GET', '/homepage');

    $this-&gt;assertEquals("Welcome!", $crawler-&gt;filter('h1#page-title')-&gt;text());
}
</code></pre>

<p>}
```</p>

<p>So, as you see, PHPUnit is used to make assertions
on the response body<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>.</p>

<h2>The basic idea</h2>

<p>So, to backport the mechanism illustrated in the previous
chapter to symfony 1.X, we should <strong>rely on a
DOM crawler and a browser</strong>, capable of making HTTP requests
and parse subquent responses' bodies.</p>

<p>Fortunately, symfony 1.X's functional testing mechanism already
relies on an <a href="http://www.symfony-project.org/api/1_4/sfBrowser">internal browser</a>
, able to bootstrap the application and make fake HTTP
requests<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>, so we only need to integrate this browser
into a PHPUnit test and parse responses with a crawler: since
Symfony2 is a well-decoupled set of libraries we will use its
<a href="https://github.com/symfony/DomCrawler">DomCrawler</a> component.</p>

<h2>Implementation</h2>

<p>First of all import the required libraries into your
symfony project; using SVN, we updated the <code>lib/vendor</code>
directory:</p>

<p><code>bash
mkdir -p lib/vendor/Symfony/Component
svn add lib/vendor/Symfony
svn pe svn:externals lib/vendor/Symfony/Component
</code></p>

<p>the content of the <code>externals</code> property will be:</p>

<p><code>bash
DomCrawler https://svn.github.com/symfony/DomCrawler.git
CssSelector https://svn.github.com/symfony/CssSelector.git
</code></p>

<p>We are downloading the CssSelector component in order to use
CSS selectors within the crawler: if you don't want to use it you'll
need to write XPath queries to access the DOM nodes.</p>

<p>Save the <code>externals</code> file and commit, then update the
<code>lib/vendor/Symfony</code> directory in order to phisically
download the dependencies.</p>

<p>To finish the setup of the environment, create a <code>phpunit.xml.dist</code>
file in the root of the symfony project:</p>

<p>``` xml
&lt;?xml version="1.0" encoding="UTF-8"?></p>

<p>&lt;phpunit backupGlobals="true"</p>

<pre><code>     bootstrap="test/bootstrap/autoload.php"
     backupStaticAttributes="false"
     colors="true"
     convertErrorsToExceptions="true"
     convertNoticesToExceptions="true"
     convertWarningsToExceptions="true"
     forceCoversAnnotation="false"
     mapTestClassNameToCoveredClassName="false"
     processIsolation="false"
     stopOnError="false"
     stopOnFailure="false"
     stopOnIncomplete="false"
     stopOnSkipped="false"
     syntaxCheck="false"
     testSuiteLoaderClass="PHPUnit_Runner_StandardTestSuiteLoader"
     strict="false"
     verbose="false"&gt;

&lt;testsuites&gt;
  &lt;testsuite name="Main tests"&gt;
      &lt;directory &gt;test/phpunit&lt;/directory&gt;
  &lt;/testsuite&gt;
&lt;/testsuites&gt;

&lt;filter&gt;
  &lt;blacklist&gt;
    &lt;directory suffix=".php"&gt;test&lt;/directory&gt;
    &lt;directory suffix=".php"&gt;src&lt;/directory&gt;
  &lt;/blacklist&gt;
&lt;/filter&gt;
</code></pre>

<p></phpunit>
```</p>

<p>and the <code>test/bootstrap/autoloader.php</code> file, used by PHPUnit
for -guess it - autoloading classes:</p>

<p>``` php The autoloader taken from Composer
&lt;?php</p>

<p>namespace Composer\Autoload; class ClassLoader { private $prefixes = array(); private $fallbackDirs = array(); public function getPrefixes() { return $this->prefixes; } public function getFallbackDirs() { return $this->fallbackDirs; } public function add($prefix, $paths) { if (!$prefix) { $this->fallbackDirs = (array) $paths; return; } if (isset($this->prefixes[$prefix])) { $this->prefixes[$prefix] = array_merge( $this->prefixes[$prefix], (array) $paths ); } else { $this->prefixes[$prefix] = (array) $paths; } } public function register($prepend = false) { spl_autoload_register(array($this, 'loadClass'), true, $prepend); } public function loadClass($class) { if ($file = $this->findFile($class)) { require $file; return true; } } public function findFile($class) { if ('\' == $class[0]) { $class = substr($class, 1); } if (false !== $pos = strrpos($class, '\')) { $classPath = DIRECTORY_SEPARATOR . str_replace('\', DIRECTORY_SEPARATOR, substr($class, 0, $pos)); $className = substr($class, $pos + 1); } else { $classPath = null; $className = $class; } $classPath .= DIRECTORY_SEPARATOR . str_replace('_', DIRECTORY_SEPARATOR, $className) . '.php'; foreach ($this->prefixes as $prefix => $dirs) { foreach ($dirs as $dir) { if (0 === strpos($class, $prefix)) { if (file_exists($dir . $classPath)) { return $dir . $classPath; } } } } foreach ($this->fallbackDirs as $dir) { if (file_exists($dir . $classPath)) { return $dir . $classPath; } } } }</p>

<p>$__composer_autoload_init = function() {</p>

<pre><code>$loader = new \Composer\Autoload\ClassLoader();

$map = array(
'Symfony\\Component\\DomCrawler' =&gt; __DIR__ . '/../../lib/vendor/',
'Symfony\\Component\\CssSelector' =&gt; __DIR__ . '/../../lib/vendor/',
);

foreach ($map as $namespace =&gt; $path) {
    $loader-&gt;add($namespace, $path);
}

$loader-&gt;register();

return $loader;
</code></pre>

<p>};</p>

<p>return $__composer_autoload_init();
```</p>

<p>At this point the environment is ready, and you can start writing
your Symfony2's correspondent <code>WebTestCase</code> class<sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup>:</p>

<p>``` php lib/test/sfWebTestCase.class.php
&lt;?php</p>

<p>abstract class sfWebTestCase extends PHPUnit_Framework_TestCase
{
  protected function createClient()
  {</p>

<pre><code>$app = $this-&gt;getApplication();
include(dirname(__FILE__).'/../../test/bootstrap/functional.php');

return new sfPHPUnitBrowser();
</code></pre>

<p>  }</p>

<p>  abstract protected function getApplication();
}
```</p>

<p>So we've created a base class for every functional test we'll write.</p>

<p>It consist in:</p>

<ul>
<li>a <code>createClient()</code> method which instantiates a new browser based on
some configuration</li>
<li>an abstract method that each functional test need to implement in order
to setup the right application in the <code>createClient()</code> method
(frontent, backend, whatever...)</li>
</ul>


<p>The browser that we are using is <code>sfPHPUnitBrowser</code>, instance of a
non-existing class, so let's create it:</p>

<p>``` php lib/test/sfPHPUnitBrowser.class.php
&lt;?php</p>

<p>use Symfony\Component\DomCrawler\Crawler;</p>

<p>class sfPHPUnitBrowser extends sfBrowser
{
  public function call($uri, $method = 'get', $parameters = array(), $changeStack = true)
  {</p>

<pre><code>$browser = parent::call($uri, $method, $parameters, $changeStack);
$crawler = new Crawler();
$crawler-&gt;add($browser-&gt;getResponse()-&gt;getContent());

return $crawler;
</code></pre>

<p>  }
}
```</p>

<p>This class extends the usual <code>sfBrowser</code> one adding a simple functionality:
when a request is made, it does not return itself but an instance of a
<code>Crawler</code> object.</p>

<p>This will let you do:</p>

<p>``` php
&lt;?php</p>

<p>$crawler = $client->get('/home');</p>

<p>$this->assertCount(X, $crawler->filter('CSS selector here'));
$this->assertTrue($crawler->filter('html:contains(h1)'));
```</p>

<p>If you didn't mistyped anything you should be able to
create your first test:</p>

<p>``` php test/phpunit/HomepageTest.php
&lt;?php</p>

<p>include(<strong>DIR</strong> . "/../../lib/test/sfWebTestCase.class.php");</p>

<p>use Symfony\Component\DomCrawler\Crawler;</p>

<p>class HomepageTest extends sfWebTestCase
{<br/>
  public function testHelloWorld()
  {</p>

<pre><code>$client = $this-&gt;createClient();
$crawler = $client-&gt;get('/');

$this-&gt;assertEquals("Hello world", $crawler-&gt;filter('h1')-&gt;text());
</code></pre>

<p>  }</p>

<p>  protected function getApplication()
  {</p>

<pre><code>return 'frontend';
</code></pre>

<p>  }
}
```</p>

<p>Next, create a route for your homepage and render
some dummy template:</p>

<p>``` html The template we are going to test</p>

<h1>Hello world</h1>


<p>```</p>

<p>Now you can run the test with the usual <code>phpunit</code> command:</p>

<p><img class="center" src="/images/phpunit.symfony.png"></p>

<p>The greatest benefit of this approach is that you can <strong>use
PHPUnit's pure functionalities to test symfony 1.X
applications</strong> without re-inventing the wheel: what we saw
was the test of some output but bare in mind that, extending
<code>sfBrowser</code>, our <code>$client</code> object is able to access the request
and the user session too.</p>

<h2>Why not re-using existing integrations?</h2>

<p>Obviously, <strong>before</strong> writing any line of code, we took a look
at existing PHPUnit's integrations into symfony 1.X.</p>

<p>There are - basically - 2 plugins:</p>

<ul>
<li><a href="http://www.symfony-project.org/plugins/sfPHPUnit2Plugin">sfPHPUnit2Plugin</a>,
which seemed useless being a PHPUnit wrapper for lime</li>
<li><a href="http://www.symfony-project.org/plugins/sfPhpunitPlugin">sfPHPUnitPlugin</a>,
which uses PHPUnit + Selenium, but we really don't want to depend on
a selenium instance to run our tests</li>
</ul>


<p><div class="footnotes">
<span>
Notes
</span>
	<ol>
		<li id='fn:1'>We are actually developing a few projects with Symfony2, mostly landing pages and small data-driven CRUD applications, due to the lack of comprehensive documentation about Symfony2, but I will flame about it in another post <a href='#fnref:1' rev='footnote'>‚Ü©</a></li><li id='fn:2'>This is not entirely true: PHPUnit is mainly used for testing the response, but inside a test-case you can access the user's session, cookies and so on, therefore you can assert against lots of objects and use-cases <a href='#fnref:2' rev='footnote'>‚Ü©</a></li><li id='fn:3'>You can also use a real HTTP client to make requests to your application and test the output, but this approach is strongly discouraged because of dramatically-low performances <a href='#fnref:3' rev='footnote'>‚Ü©</a></li><li id='fn:4'>The WebTestCase is a base class for every functional test (in Symfony2), like PHPUnit_Framework_TestCase for canonical unit tests <a href='#fnref:4' rev='footnote'>‚Ü©</a></li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit testing your symfony forms]]></title>
    <link href="http://www.odino.org/unit-testing-your-symfony-forms/"/>
    <updated>2011-08-01T14:01:00+04:00</updated>
    <id>http://www.odino.org/unit-testing-your-symfony-forms</id>
    <content type="html"><![CDATA[<p>Tired of slow test suites? Not enough RAM to satisfy both tests and your browser? Have you ever committed without seeing tests results because "It 18.30!"?</p>

<p>Good, this one is totally for you.</p>

<!-- more -->


<h2>The problem</h2>

<p>You all know how symfony1 test suites become a problem as you have lots of tests: when I say lots, I mean 30, 40 tests, which should not be <em>that</em> huge amount of tests.</p>

<p>A possible solution for this problem is not to test forms with functional tests, when you have tons of:</p>

<p>```
->click('Submit', array('form' => array('name' => 'Alessandro') ... ))</p>

<p>...</p>

<p>with('form')->begin()->
  hasError(true)->
  isError(...)
```</p>

<p>but to use unit tests.</p>

<p>How could this be possible? Well, thanks to the form framework, all forms, widgets and validators are, obviously, objects, so they are easy to test as a unit.</p>

<p>Let's imagine this scenario: I want to test that a form has one and one widget only, in which the user can type multiple email addresses, separated by comma.</p>

<h2>Testing the form</h2>

<p>Create the empty form under <code>lib/form</code> directory:</p>

<p>``` php
&lt;?php</p>

<p>class MultipleMailForm extends BaseForm
{
}
```</p>

<p>Let's write the test, which checks that the form has 1 widget and 1 validator:</p>

<p>``` php
&lt;?php</p>

<p>include(dirname(<strong>FILE</strong>).'/../../bootstrap/unit.php');
$t = new lime_test();
$f = new MultipleMailForm();
$ws = $f->getWidgetSchema();
$vs = $f->getValidatorSchema();</p>

<p>$t->isa_ok($ws['email_addresses'], 'sfWidgetFormInput');
$t->isa_ok($vs['email_addresses'], 'MultipleInlineEmailAddressesValidator');
$t->is(1, count($ws));
$t->is(1, count($vs));
```</p>

<p>Run the test ( <code>php symfony test:unit MultipleMailForm</code> ): you will se that it's gonna fail.</p>

<p>Now implement your feature:</p>

<p>``` php
&lt;?php</p>

<p>class MultipleMailForm extends BaseForm
{
  public function configure()
  {</p>

<pre><code>parent::configure();

$ws = $this-&gt;getWidgetSchema();
$ws['email_addresses'] = new sfWidgetFormInput();

$vs = $this-&gt;getValidatorSchema();
$vs['email_addresses'] = new MultipleInlineEmailAddressesValidator();
</code></pre>

<p>  }
}
```</p>

<p>Create the validator class under lib/validator:</p>

<p>``` php
&lt;?php</p>

<p>class MultipleInlineEmailAddressesValidator extends sfValidatorEmail
{
}
```</p>

<p>If you re-launch the test, a green bar will appear :)</p>

<p>As you might notice, now the test isn't meaningful: we know how many widgets/validators we have but we didn't tested in which conditions the form is valid, which kind of data it accepts and so on.</p>

<p>To do so, you have 2 things to do: first, bind the form in the test with an array of values and then check the <code>isValid()</code> method; second, test your custom validator.</p>

<h2>Testing the validator</h2>

<p>Create a test for the validator:</p>

<p>``` php
&lt;?php</p>

<p>include(dirname(<strong>FILE</strong>).'/../../bootstrap/unit.php');</p>

<p>$t = new lime_test();
$v = new MultipleInlineEmailAddressesValidator();</p>

<p>try
{
  $t->is($v->clean('alessandro.nadalin@mymail.com'), true);
}
catch (Exception $e)
{
  $t->fail('The validator accepts a single email address');
}</p>

<p>try
{
  $t->is($v->clean('alessandro.nadalin@gmail.com, luca@gmail.com'), true);
}
catch (Exception $e)
{
  $t->fail('The validator accepts multiple email addresses');
}</p>

<p>try
{
  $t->is($v->clean('alessandro.nadalin@mymail.com,luca@gmail.com'), true);
}
catch (Exception $e)
{
  $t->fail('The validator accepts multiple email addresses, without spaces');
}</p>

<p>try
{
  $t->is($v->clean(' alessandro.nadalin@mymail.com ,    luca@gmail.com  '), true);
}
catch (Exception $e)
{
  $t->fail('The validator accepts multiple email addresses, without caring about spaces');
}</p>

<p>try
{
  $t->is($v->clean('alessandro.nadalinmymail.com'), true);
  $t->fail('Exception should be raised');
}
catch (Exception $e)
{
  $t->pass('The validator fails if an address is wrong');
}</p>

<p>try
{
  $t->is($v->clean('alessandro.nadalin@mymail.com, luca@gmail.com2'), true);
  $t->fail('Exception should be raised');
}
catch (Exception $e)
{
  $t->pass('The validator fails if a multiple address is wrong');
}
```</p>

<p>which checks the validator under lots of circumstances ( single email, multiple emails, multiple emails some good some wrong, etcetera ): launching it, you should get a red bar.</p>

<p>Now you can implement the validator, overriding the <code>doClean()</code> method:</p>

<p>``` php
&lt;?php</p>

<p>protected function doClean($value)
{
  $addresses = explode(',', $value);
  $emails    = array();</p>

<p>  foreach ($addresses as $address)
  {</p>

<pre><code>$emails[] = parent::doClean(trim($address)); 
</code></pre>

<p>  }</p>

<p>  return $emails;
}
```</p>

<p>Green bar all the way.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrating Zend Framework 2 in Symfony 1.4]]></title>
    <link href="http://www.odino.org/integrating-zend-framework-2-in-symfony-1-4/"/>
    <updated>2011-07-21T14:14:00+04:00</updated>
    <id>http://www.odino.org/integrating-zend-framework-2-in-symfony-1-4</id>
    <content type="html"><![CDATA[<p>With PHP 5.3 the <a href="http://blog.webspecies.co.uk/2011-05-23/the-new-era-of-php-frameworks.html">new era of PHP frameworks</a> has begun, and things are really, for example, simpler to integrate, thanks to the <a href="http://groups.google.com/group/php-standards/web/psr-0-final-proposal">PSR0</a>, which is the standard autoloader adopted by the community.</p>

<!-- more -->


<p>The PSR0 is, obviously, not supported by the symfony 1.4 framework, which was released far before PHP 5.3 was ready, but it's not <em>that</em> difficult to integrate PSR0-compliant projects in Sf1.4.</p>

<p>If you want, for example, to use the <a href="https://github.com/zendframework/zf2">Zend Framework 2</a> in symfony you just need a few quick steps: first of all, copy the standard <a href="https://gist.github.com/221634">SplClassLoader</a> in your symfony project ( lib/autoload? ), then require it in your <code>projectConfiguration.class.php</code>:</p>

<p>``` php
&lt;?php</p>

<p>require_once dirname(<strong>FILE</strong>).'/../lib/vendor/symfony/lib/autoload/sfCoreAutoload.class.php';
require_once dirname(<strong>FILE</strong>).'/../lib/autoload/SplClassLoader.php';
sfCoreAutoload::register();
```</p>

<p>then, put the Zend Framework wherever you want ( <code>lib/vendor/ZF2</code>? ) and re-edit the <code>projectConfiguration</code>:</p>

<p>``` php
&lt;?php</p>

<p>...
sfCoreAutoload::register();
$classLoader = new SplClassLoader('ZF2', '/path/to/zend/framework/2');
$classLoader->register();
```</p>

<p>and you're done!</p>

<p>You can start using the Zend Framework 2 using namespaces inside your existing symfony code, without breaking anything:</p>

<p>``` php
&lt;?php</p>

<p>use ZF2\Service\Twitter;
class twitterActions extends sfActions
{
  public function executeTwitterLogin(sfWebRequest $request)
  {</p>

<pre><code>$service = new Twitter();
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SfWidgetFormChoice* with spicy empty values]]></title>
    <link href="http://www.odino.org/sfwidgetformchoice-with-spicy-empty-values/"/>
    <updated>2010-10-25T11:02:00+04:00</updated>
    <id>http://www.odino.org/sfwidgetformchoice-with-spicy-empty-values</id>
    <content type="html"><![CDATA[<p>To pass empty values to the widgets based on choices is really simple with symfony.</p>

<!-- more -->


<p>For example, the <code>sfWidgetFormDoctrineChoice</code> accepts a <code>with_empty</code> option, which can be a boolean or a string:</p>

<p>``` php
&lt;?php</p>

<p>new sfWidgetFormDoctrineChoice(array('model' => 'ModelName', 'add_empty' => ...));
```</p>

<p>which renders the empty option according to the following rules:</p>

<p><code>
given true:
  null =&gt; ''
given a string:
  null =&gt; 'string'
</code></p>

<p>The other widget I was working on, <code>sfWidgetFormI18nDate</code>, accepts an array to configure empty options:</p>

<p>``` php
&lt;?php</p>

<p>new sfWidgetFormI18nDate(array('culture' => 'en', 'empty_values' => $empty_values));
```</p>

<p>with the following format:</p>

<p><code>
Array
  day:   Day
  month: Month
  year:  Year
</code></p>

<p>and the rendered form is something like this:</p>

<p><img class="center" src="/images/empty_value_form.png"></p>
]]></content>
  </entry>
  
</feed>
