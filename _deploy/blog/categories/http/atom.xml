<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: HTTP | Alessandro Nadalin]]></title>
  <link href="http://odino.org/blog/categories/http/atom.xml" rel="self"/>
  <link href="http://odino.org/"/>
  <updated>2013-06-18T16:38:16+04:00</updated>
  <id>http://odino.org/</id>
  <author>
    <name><![CDATA[Alessandro Nadalin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Securing your HTTP API with JavaScript Object Signing and Encryption]]></title>
    <link href="http://odino.org/securing-your-http-api-with-javascript-object-signing-and-encryption/"/>
    <updated>2013-06-04T00:31:00+04:00</updated>
    <id>http://odino.org/securing-your-http-api-with-javascript-object-signing-and-encryption</id>
    <content type="html"><![CDATA[<p>One thing that is always difficult, enough to
deserve <a href="http://www.amazon.com/Ajax-Security-Billy-Hoffman/dp/0321491939">its own book</a>,
is to <strong>secure HTTP API</strong> that interact with client-side
applications: today, after a discussion about how to face
the problem in our company, we bumped into the
<a href="http://datatracker.ietf.org/doc/draft-ietf-jose-json-web-signature/?include_text=1">JOSE</a>
&ndash; JavaScript Object Signing and Encryption &ndash;
specification.</p>

<!-- more -->


<p>Basically, the specification defines 4 entities:</p>

<ul>
<li>JWS, <a href="http://tools.ietf.org/html/draft-jones-json-web-signature-04">JSON Web Signature</a>,
a signed representation of data</li>
<li>JWT, <a href="http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html">JSON Web Token</a>,
a representation of data
(it differs from JWS as JWT is not signed)</li>
<li>JWE, <a href="http://self-issued.info/docs/draft-ietf-jose-json-web-encryption.html">JSON Web Encryption</a>,
an encrypted JSON representation of data</li>
<li>JWA, <a href="http://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms-00">JSON Web Algorithms</a>,
a list of safe algorithms to be used with JWS and JWE</li>
</ul>


<p>For the sake of basic knowledge, we will only have a look
at JWS and JWT / JWE now: the specifications about these
entities are quite extensive and not very straightforward,
so for further details you should <strong>really</strong> give them
a look.</p>

<p><img class="right" src="/images/jws.png"></p>

<h2>JWT</h2>

<p>Basically, the token (JWT) is the simplest structure
that you will deal with while implementing JOSE in our
architecture; it is a string representation of some data
base64 encoded (other types of encoding might be applied, but
this is not madatory): the JWT differs from raw base64-encoded
data since it also includes informations about the encoding
itself, in the token&rsquo;s header; by concatenating the base64-encoded
version of the token header and payload (the actual data) you
obtain what the specification calls <strong>signature input</strong>, which will
then be used to create the signature (JWS).</p>

<h2>JWS and JWE</h2>

<p>After the JWT comes the JWS, which is a signed representation
of the JWT; it differs from the token just because of the
signature; on an higher step of the ladder comes the JWE instead,
which lets you encrypt the data in order to achieve an higher security
level: the <a href="http://self-issued.info/docs/draft-ietf-jose-json-web-encryption.html#JWEExamples">examples in the ietf draft</a>
show you how to create JWEs with a pair of private /
public keys.</p>

<h2>Use case: how to authenticate stateless AJAX calls?</h2>

<p><img class="left" src="/images/jsw-auth.png"></p>

<p>One of the needs that you might have is to,
from JavaScript, make authenticated HTTP calls to
one of your webservices: since you don&rsquo;t want to
expose the WS credentials on the JS service (the
credentials would be readable by any client) a good
solution might be to generate a JWS with a private
OpenSSL key in your webservice, store it into a cookie
accessible to the JS service, which would execute
those calls including that cookie<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>, which you can then
verify while authenticating the call.</p>

<p>This workflow is pretty easy to understand, but the actual
implementation is more than tricky, since the
specification is quite abundant &ndash; especially about
encryption algorithms.</p>

<p>In PHP we can use at least 3 libraries: one of them,
<a href="https://github.com/ritou/php-Akita_JOSE">Akita_JOSE</a>,
is pretty old (since the last commit was more than
7 months ago) but is very understandable and quite
easy to use; another one, <a href="https://packagist.org/packages/gree/jose">gree/jose</a>,
has itw own package on packagist and can be easily
installed via composer: from a fast look at the
<a href="https://github.com/gree/jose">source code on GitHub</a> it looks good,
even though it needs the <a href="http://phpseclib.sourceforge.net/">phpsec</a>
library to be able to work<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>.</p>

<p>The third option, which is the one that <a href="https://github.com/namshi/jose">I built in the last couple of hours</a>,
is <a href="https://packagist.org/packages/namshi/jose">namshi/jose</a>,
which is very, very easy to use<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>: it currently only
supports the <a href="https://github.com/namshi/jose/blob/master/src/Namshi/JOSE/Signer/RS256.php">RSA algorithm</a>
with <code>sha256</code> hashing, but I guess that implementing other
algorithms is less than trivial.</p>

<p>For example, let&rsquo;s see how you would generate the JWS
to be stored in a cookie:</p>

<p>``` php Generating a JWS after authentication and storing it into a cookie
&lt;?php</p>

<p>use Namshi\JOSE\JWS;</p>

<p>if ($username == &lsquo;correctUsername&rsquo; &amp;&amp; $pass = &lsquo;ok&rsquo;) {</p>

<pre><code>$user = Db::loadUserByUsername($username);

$jws  = new JWS('RS256');
$jws-&gt;setPayload(array(
    'uid' =&gt; $user-&gt;getid(),
));

$privateKey = openssl_pkey_get_private("file://path/to/private.key");
$jws-&gt;sign($privateKey);
setcookie('identity', $jws-&gt;getTokenString());
</code></pre>

<p>}
```</p>

<p>and then the apps that want to execute authenticated
calls on behalf of the user by using this cookie just need
to include it in these calls; the server will just need
to verify that the JWS in the cookie is valid:</p>

<p>``` php
&lt;?php</p>

<p>use Namshi\JOSE\JWS;</p>

<p>$jws        = JWS::load($_COOKIE[&lsquo;identity&rsquo;]);
$public_key = openssl_pkey_get_public(&ldquo;/path/to/public.key&rdquo;);</p>

<p>if ($jws->verify($public_key)) {</p>

<pre><code>$paylod = $jws-&gt;getPayload();

echo sprintf("Hey, my JS app just did an action authenticated as user #%s", $payload['id']);
</code></pre>

<p>}
```</p>

<p>That&rsquo;s it: far from being a stable library, this is more a
proof of concept that we, an Namshi, would like to see developing
in the next weeks / months.</p>

<p>As always, comments, rants or &ndash; even better &ndash; pull requests are
<strong>more than welcome</strong>!</p>

<p><div class="footnotes">
<span>
Notes
</span>
	<ol>
		<li id='fn:1'>One of the disadvantages of this approach is that it relies on cookies, only available in the HTTP protocol. If you want to use another protocol for you application - a very rare and extreme use case - this wouldn't work for you. <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>I honestly never heard of this library before, so I can't really say what it does and why it's needed <a href='#fnref:2' rev='footnote'>↩</a></li><li id='fn:3'>Since I'm not an expert in encryption and security, I would suggest to give it a look and come up with feedbacks <a href='#fnref:3' rev='footnote'>↩</a></li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mixing the history of HTTP, SPDY and HTTP/2.0]]></title>
    <link href="http://odino.org/mixing-the-history-of-http-spdy-and-http-slash-2-dot-0/"/>
    <updated>2012-10-16T15:11:00+04:00</updated>
    <id>http://odino.org/mixing-the-history-of-http-spdy-and-http-slash-2-dot-0</id>
    <content type="html"><![CDATA[<p>Yesterday, from Doha&rsquo;s international airport, I
got the chance to blog about the latest changes
surrounding the upcoming major version of the
protocol of the web, <code>HTTP/2.0</code>.</p>

<p>Today I gave, at the International PHPConference in
Mainz, an overview about HTTP (<code>0.9</code>, <code>1.0</code>, <code>1.1</code>), SPDY
and <code>HTTP/2.0</code> itself.</p>

<!-- more -->


<p>There&rsquo;s not that much to say, as the presentation is already
on <a href="http://www.slideshare.net/odino/http-colon-slash-slash-the-end-of-the-road">Slideshare</a> and I&rsquo;m embedding it here, other than a thing
the guys here in Germany already heard a lot: <strong>go back to
the basics</strong>.</p>

<p><div class="slideshare" id="__ss_14749994"><iframe src="http://www.slideshare.net/slideshow/embed_code/14749994 " width="850" height="730" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The state of HTTP/2.0]]></title>
    <link href="http://odino.org/the-state-of-http-slash-2-dot-0/"/>
    <updated>2012-10-15T23:45:00+04:00</updated>
    <id>http://odino.org/the-state-of-http-slash-2-dot-0</id>
    <content type="html"><![CDATA[<p>With a few days of delay I&rsquo;m here reporting and commenting
the last <strong>revolutions</strong> about the protocol of the web,
its upcoming groundbreaking new version and its state.</p>

<!-- more -->


<p>A few days back <a href="http://www.mnot.net/">Mark Nottingham</a> announced that the
group is <a href="https://twitter.com/mnot/status/253175410383278081">officially working on the new draft of <code>HTTP/2.0</code></a>:
even though rumors about the shape of this new version were
going on since a couple years, this <strong>official</strong>
news brings some fresh hope on the topic.</p>

<p>As the HTTP protocol was always directly influenced
by great minds (<a href="http://en.wikipedia.org/wiki/Tim_Berners-Lee">Tim Berners-Lee</a> and <a href="http://en.wikipedia.org/wiki/Roy_Fielding">Roy Fielding</a>, just
to mention a couple names) when I first heard about
Mark taking the responsability to publish <code>HTTP/2.0</code> I
was pretty sure something great would have come out of
his mind.</p>

<p>I wasn&rsquo;t wrong.</p>

<p>It&rsquo;s been 13 years since HTTP doesnt see a major change
in its specification (recent changes are the addition of
the <code>PATCH</code> method, for example, but we&rsquo;re talking about
<strong>minor</strong> stuff) and SPDY &ndash; a new protocol created by Google &ndash;
came out in the recent history of the web with a disruptive
force.</p>

<p>HTTP needed something.</p>

<h2>SPDY</h2>

<p>But before having a look at what <code>HTTP/2.0</code> will look like,
let&rsquo;s mention the good things that SPDY brings on the table:</p>

<ul>
<li>prioritization: it allows to send different requests and
tell the server to prioritize some of them</li>
<li>multiplexing: allows parallel requests and asynchronous
responses, unlike <em>pipelining</em> which is bound to multiple
requests/responses at the same time</li>
<li>server push: servers can now push resources to the client
without them having to ask for</li>
<li>better performances: extended compression is one of the
key FTW of SPDY</li>
</ul>


<p>But there is one things that SPDY doesn&rsquo;t change at all:
the <strong>interface</strong> between the machines.</p>

<p>As recognized worldwide, the HTTP protocol was an almost
perfect example of M2M interface which allows servers
and clients to follow DAPs (<em>domain-application protocols</em>)
according to a loosely coupled interface &ndash; the protocol itself,
with its verbs, semantics and workflows<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.</p>

<p>So SPDY, recognizing the perfection of the contract that HTTP
puts among clients and servers, isn&rsquo;t a real new protocol, it&rsquo;s
a <strong>better implementation of the same interface</strong>.</p>

<h2>HTTP/2.0 is an evolution of an evolution</h2>

<p>No wonder, then, in reading the words of Nottingham, as, after
all, he &ldquo;just&rdquo; announced that <a href="http://lists.w3.org/Archives/Public/ietf-http-wg/2012OctDec/0004.html"><code>HTTP/2.0</code> will be <strong>based on SPDY</strong></a>:
a great news that is basically telling you the &ldquo;don&rsquo;t reinvent the wheel&rdquo;
principle is even applied at the foundation of the web<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>.</p>

<p>The layers will definitely be different, but, again, I think
that having a newer version of our beloved protocol, based on a
specification which already improves it and adds tons of new and
interesting features, is going to be <strong>a game-changer for web
applications</strong>.</p>

<p>Will we see <code>HTTP/2.0</code> being deployed with multiplexing, server push,
prioritization and extended compression next year?</p>

<p><div class="footnotes">
<span>
Notes
</span>
	<ol>
		<li id='fn:1'>No wonder why Roy Fielding, after having heavily influenced the HTTP protocol and the Apache ecosystem, came out with REST, an architectural style meant for long-living and scalable architectures <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>So, think about it, why do you need to re-write huge portions of code when better FOSS is out there? <a href='#fnref:2' rev='footnote'>↩</a></li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The web benefits from SPDY just as SPDY benefits from HTTP]]></title>
    <link href="http://odino.org/http-benefits-from-spdy-as-spdy-benefits-from-http/"/>
    <updated>2012-01-27T19:27:00+04:00</updated>
    <id>http://odino.org/http-benefits-from-spdy-as-spdy-benefits-from-http</id>
    <content type="html"><![CDATA[<p>In these days <a href="http://www.chromium.org/spdy/spdy-protocol">SPDY</a> it&rsquo;s gaining
its <em>momentum</em> due to a good article which explained how you should build
your <a href="http://www.igvita.com/2012/01/18/building-a-modern-web-stack-for-the-realtime-web/">technologic stack in the <em>realtime</em> web</a>.</p>

<!-- more -->


<p><img class="left" src="/images/http.png"></p>

<h2>HTTP is slowly dying</h2>

<p>This seems to be the conclusion that lot of people had after reading that article:
SPDY is a newer, faster, more modern protocol and I have no problem in admitting
that <em>a few</em> parts of the HTTP protocol need to be reviewed<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>: you
can&rsquo;t simply advocate that HTTP fits <a href="http://lists.w3.org/Archives/Public/www-tag/2011Dec/0034.html">perfectly</a>
in today&rsquo;s web, that&rsquo;s a <em>de-facto</em> issue.</p>

<h2>SPDY in a nutshell</h2>

<p><img class="right" src="/images/spdy.packet.png"></p>

<p>SPDY is just a <strong>really good protocol implementation</strong>: it supports multiplexing,
<strong>encourages</strong> content compression, allows servers to <strong>push notifications</strong> and
lets you prioritize requests, just to mention the hottest features among
<a href="http://www.chromium.org/spdy/spdy-whitepaper">others</a>.</p>

<p>Amazon is currently shipping its Kindle with a browser that uses this protocol
to communicate with EC2 instances, <a href="https://wiki.mozilla.org/Platform/Features/SPDY">Firefox 11 will support it</a>
while &ndash; if using a google product &ndash; you may already be using SPDY<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>:
the road is long, but SPDY seems to be WWW&rsquo;s <em>next big thing</em>.</p>

<h2>SPDY needs to love HTTP</h2>

<p>Before going out there yelling at HTTP and telling everyone that SPDY will be
the new, futuristic, what-we-were-missing web protocol I want you to consider a
few things.</p>

<p>It should not surprise you the fact that SPDY is <a href="http://www.chromium.org/spdy/spdy-protocol/spdy-protocol-draft2#TOC-HTTP-Layering-over-SPDY">almost-completely</a>
implementing <a href="http://www.ietf.org/rfc/rfc2616.txt">RFC2616</a>: <strong>the web relies on
established semantics</strong>, clients and servers interact based on a series of
well-known verbs, feedbacks and metadata associated to resources, that are the
only immanent concept of the web.</p>

<h2>Divide et impera: HTTP&rsquo;s soul is here to stay</h2>

<p><blockquote><p>[We have] 10 years of implementation experience of RFC2616</p><footer><strong>Mark Nottingham <a href="http://www.w3.org/2001/tag/2012/01/06-minutes#item02">http://www.w3.org/2001/tag/2012/01/06-minutes#item02</a> HTTP futures and SPDY</strong></footer></blockquote></p>

<p>You should really reconsider the HTTP protocol as 2 separate layers: its
technical implementation and its interface.</p>

<p><blockquote><p>The [HTTP] interface is designed to be efficient for large-grain [&hellip;] data transfer, optimizing for the common case of the Web.</p><footer><strong>Roy T. Fielding <a href="http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm#sec_5_1_5">http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm#sec_5_1_5</a> The uniform interface</strong></footer></blockquote></p>

<p>The technical implementation may be a little updated<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup> but its
interface was thought to be able to let machine and humans interact with
resources in the most open, fault-tolerant, scalable, robust way we could have
ever thought: <strong>without relying on HTTP, SPDY would not work</strong>, not in the ancient,
not in the modern, not even in the future web.</p>

<p>HTTP 2.0 is close, and <a href="http://www.w3.org/2001/tag/2012/01/06-minutes#item02">the W3C is not blind</a>.</p>

<p><div class="footnotes">
<span>
Notes
</span>
	<ol>
		<li id='fn:1'>To be kind <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>If you are currently reading this note with Chrome/Chromium, go here: chrome://net-internals/#events&amp;q=type:SPDY_SESSION%20is:active <a href='#fnref:2' rev='footnote'>↩</a></li><li id='fn:3'>Again, to be kind <a href='#fnref:3' rev='footnote'>↩</a></li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Edge Side Includes, how to spare terabytes every day]]></title>
    <link href="http://odino.org/edge-side-includes-how-to-spare-terabytes-every-day/"/>
    <updated>2012-01-20T14:15:00+04:00</updated>
    <id>http://odino.org/edge-side-includes-how-to-spare-terabytes-every-day</id>
    <content type="html"><![CDATA[<p>I have an idea for an RFC that I would like to write, based on some thoughts I
had in the last months.</p>

<!-- more -->


<p>Lots of you probably know <a href="http://www.w3.org/TR/esi-lang">ESI</a>, the specification
written by <a href="http://www.akamai.com/">Akamai</a> and <a href="http://www.oracle.com/index.html">Oracle</a>
back in 2001.</p>

<p>It basically consists in a XML dialect which lets <a href="http://en.wikipedia.org/wiki/Reverse_proxy">reverse proxies</a>
(eg. <a href="https://www.varnish-cache.org/">Varnish</a>) cache fragments of your webpages
in order not to hit your application for output fragments that can be re-used
across many clients.</p>

<p>``` html A webpage including an ESI tag
<html>
  <head></p>

<pre><code>...
</code></pre>

<p>  </head>
  <body></p>

<pre><code>...

pile of HTML

...

&lt;esi:include src="http://example.com/footer.html" /&gt;
</code></pre>

<p>  </body>
</html>
```</p>

<p>A <strong>really good presentation</strong> about ESI is <a href="http://www.slideshare.net/fabpot/caching-on-the-edge/99">Caching On The Edge</a>
, by <a href="http://fabien.potencier.org/">Fabien Potencier</a>.</p>

<h2>ESI&rsquo;s context</h2>

<p>ESI is a really great technology that recently gained hype, in my ecosystem (PHP),
thanks to the Symfony2 architecture, fully embracing the HTTP specification:
consider that Symfony2 has <strong>no application-level caching layer</strong>, so everything
is done with the HTTP cache, and ESI is the solution for really dynamic webpages.</p>

<p>&hellip;but who&rsquo;s responsible of processing ESI fragments? Digging some more, an esi
processor can be a <a href="http://rack.rubyforge.org/">middleware in your architecture</a>
, a reverse proxy or a <a href="http://symfony.com/doc/2.0/book/http_cache.html#using-edge-side-includes">software component</a>
; basically any kind of software implementing the ESI specification.</p>

<p>But hey, all this kind of things are softwares that lie on the server side.</p>

<h2>A different approch</h2>

<p>I was thinking about pushing ESI to the client side:</p>

<p>``` html The response retrieved with the browser would generate lots of subrequests
<html>
  <head></p>

<pre><code>...
</code></pre>

<p>  </head>
  <body></p>

<pre><code>&lt;esi:include src="http://example.com/header.html" /&gt;
&lt;esi:include src="http://example.com/navigation.html" /&gt;
&lt;esi:include src="http://example.com/foo.html" /&gt;
&lt;esi:include src="http://example.com/bar.html" /&gt;
&lt;esi:include src="http://example.com/footer.html" /&gt;
</code></pre>

<p>  </body>
</html>
```</p>

<p>Seems a bad idea, since, if the browser is capable to merge different fragments, retrieved
with different HTTP requests, for assembling a really simple webpage you would
need to hit your application much more times than with a single request, so there
is no real need to ask for ESI support in clients, in this scenario.</p>

<p>But there&rsquo;s a <em>real-world</em> application of ESI on the client side that should
<strong>save lot of traffic</strong> over the internet and <strong>lot of bandwith</strong>.</p>

<p><strong>Rarely-changing output fragments</strong>.</p>

<p>A RCOF &ndash; sorry for this bad acronym &ndash; is everything that can be <strong>cached for
relatively long time</strong> (talking more about days than hours), like Facebook&rsquo;s
footer or your google analytics JS code.</p>

<p><img class="center" src="/images/fb.footer.png"></p>

<h2>The use-case</h2>

<p>Why should we always transport Facebook&rsquo;s footer over the network?</p>

<p>We don&rsquo;t need it: once the user landed on his profile page, as he jumps
to other FB pages, <strong>the footer it&rsquo;s always the same</strong>, and <strong>should be retrieved from
the client&rsquo;s cache</strong> instead of being sent over the network.</p>

<p>This means that once you send your response</p>

<p>``` html Your profile page
<body></p>

<pre><code>&lt;h1&gt;My Profile!&lt;/h1&gt;

...

&lt;esi:include src="http://example.com/footer.html" /&gt;
</code></pre>

<p></body>
```</p>

<p>the browser makes an additional request to retrieve the footer and then, on subsequent
requests, also <strong>on different webpages</strong>, it can use the cached fragment:</p>

<p>``` html Facebook help center
<body></p>

<pre><code>&lt;h1&gt;Hi n00b, how can we help you?&lt;/h1&gt;

...

&lt;esi:include src="http://example.com/footer.html" /&gt;
</code></pre>

<p></body>
```</p>

<p>because it recognizes that fragment has been already retrieved once you requested
the &ldquo;Your profile&rdquo; page.</p>

<p>You probably don&rsquo;t get the great aspect of ESI on the client side, so <strong>carefully
read the next chapter</strong>.</p>

<h2>A few numbers</h2>

<p>Facebook&rsquo;s footer is about <code>1.4k</code>:</p>

<p>``` html</p>

<div id="pageFooter" data-referrer="page_footer">
    <div id="contentCurve"></div>
    <div class="clearfix" id="footerContainer">
        <div class="mrl lfloat" role="contentinfo">
            <div class="fsm fwn fcg">
                <span> Facebook © 2012</span> · <a rel="dialog" href="http://odino.org/ajax/intl/language_dialog.php?uri=http%3A%2F%2Fwww.facebook.com%2Fpress%2Finfo.php%3Fstatistics" title="Use Facebook in another language.">English (US)</a>
            </div>
        </div>
        <div class="navigation fsm fwn fcg" role="navigation">
            <a href="http://www.facebook.com/facebook" accesskey="8" title="Read our blog, discover the resource center, and find job opportunities.">About</a> · <a href="http://www.facebook.com/campaign/landing.php?placement=pf&amp;campaign_id=402047449186&amp;extra_1=auto" title="Advertise on Facebook.">Advertising</a> · <a href="http://www.facebook.com/pages/create.php?ref_type=sitefooter" title="Create a Page">Create a Page</a> · <a href="http://developers.facebook.com/?ref=pf" title="Develop on our platform.">Developers</a> · <a href="http://www.facebook.com/careers/?ref=pf" title="Make your next career move to our awesome company.">Careers</a> · <a href="http://www.facebook.com/privacy/explanation" title="Learn about your privacy and Facebook.">Privacy</a> · <a href="http://www.facebook.com/legal/terms?ref=pf" accesskey="9" title="Review our terms of service.">Terms</a> · <a href="http://www.facebook.com/help/?ref=pf" accesskey="0" title="Visit our Help Center.">
                Help
            </a>
        </div>
    </div>
</div>


<p>```</p>

<p>while an ESI fragment is <code>0.5k</code>:</p>

<p><code>xml
&lt;esi:include src="http://facebook.com/footer" /&gt;
</code></p>

<p>Calculating how much traffic the internet needs to sustain with the 2
approaches, traditional and ESIsh, is trivial:</p>

<ul>
<li>Facebook has something more than <a href="http://www.facebook.com/press/info.php?statistics">400M daily users</a></li>
<li>it has <a href="http://www.alexa.com/siteinfo/facebook.com">12 pageviews per user</a></li>
<li>retrieving the footer the traditional way, we add <code>1.5k</code> of data each users' request</li>
<li>retrieving it with ESI, we add <code>1.5k</code> of data for the first users' request,
<code>0.5k</code> for the consequent ones</li>
</ul>


<p>Then we can extrapolate some data:</p>

<p>``` html Facebook daily pageviews
daily users * avg pageviews</p>

<p>400M * 12</p>

<p>4800M
```</p>

<p>``` html Data traffic without client-side ESI
daily pageviews * footer fragment weight</p>

<p>4800M * 1.4k</p>

<p>~6.25 terabytes
```</p>

<p>``` html Data traffic with client-side ESI
(first requests * footer fragment weight) + ((daily pageviews &ndash; first pageviews) * ESI tag weight)</p>

<p>(400M * 1.4k) + ((4800M &ndash; 400M) * 0.5k)</p>

<p>~2.57 terabytes
```</p>

<p>So, just for the footer, <strong>facebook could decrease the internet traffic by 2 and a
half terabytes <em>per day</em></strong>, just looking at its footer.</p>

<p>It&rsquo;s obvious that <strong>this approach rewards facebook</strong> (it processes less stuff on his
side, whether it uses a reverse proxy as gateway cache or not), ISPs and the final
user, who&rsquo;s taking advantage of a (more) <strong>lean network</strong>.</p>

<p>If you enlarge your vision, think about sites like Google, LinkedIN, twitter and all
those web applications which send <strong>useless pieces of HTTP responses over the
internet</strong>.</p>

<h2>Client side ESI invalidation</h2>

<p>If you are scared about invalidating this kind of cache, the solution would be
really easy:</p>

<p>``` html Facebook before updating the footer
<html>
  <head></p>

<pre><code>...
</code></pre>

<p>  </head>
  <body></p>

<pre><code>...

pile of FB code

...

&lt;esi:include src="http://example.com/footer.html?v=1" /&gt;
</code></pre>

<p>  </body>
</html>
```</p>

<p>``` html Facebook after updating the footer
<html>
  <head></p>

<pre><code>...
</code></pre>

<p>  </head>
  <body></p>

<pre><code>...

pile of FB code

...

&lt;esi:include src="http://example.com/footer.html?v=2" /&gt;
</code></pre>

<p>  </body>
</html>
```</p>

<p>Note the <strong>revision change in the ESI tag</strong>, something we already, daily, use for
managing <a href="http://muffinresearch.co.uk/archives/2008/04/08/automatic-asset-versioning-in-django/">static assets' caching</a>.</p>

<h2>This is not a panacea</h2>

<p>I don&rsquo;t wanna sound arrogant proposing this tecnique, but I would really like to
<strong>get feedbacks about such this kind of approach</strong>: as stated, this can be a
great plus for the global network but its <strong>limited to RCOF</strong>.</p>

<p>The only aspect I haven&rsquo;t considered yet is the second HTTP request the browser
needs to do to retrieve the fragment, once, parsing the response, it finds an ESI
tag: since I really don&rsquo;t know how to calculate how it affects the network,
so any kind of help would be appreciated.</p>

<p>The aim of this post is to consider if <strong>browser vendors should really start thinking
about implementing ESI processors</strong> directly in their products, for a better, faster
and leaner web.</p>
]]></content>
  </entry>
  
</feed>
