<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: OrientDB | Alessandro Nadalin]]></title>
  <link href="http://www.odino.org/blog/categories/orientdb/atom.xml" rel="self"/>
  <link href="http://www.odino.org/"/>
  <updated>2012-08-03T20:03:08+04:00</updated>
  <id>http://www.odino.org/</id>
  <author>
    <name><![CDATA[Alessandro Nadalin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Back in track with OrientDB]]></title>
    <link href="http://www.odino.org/back-in-track-with-orientdb/"/>
    <updated>2012-04-20T15:26:00+04:00</updated>
    <id>http://www.odino.org/back-in-track-with-orientdb</id>
    <content type="html"><![CDATA[<p>It's been a while since I don't release any update about
Orient, the PHP data mapper for OrientDB: we recently got
back on track and I have a few interesting news.</p>

<!-- more -->


<p>I just moved to Dubai, as you may know, so the last couple
of months have been a huge mess for me, while David was
doing some <a href="https://github.com/congow/Orient/tree/persistence">major experiments</a>
for the library: we only had the time, at the end of March,
to talk about OrientDB and the ODM at the
<a href="http://www.slideshare.net/ingdavidino/graph-db-inphp">Codemotion</a>.</p>

<p>Since in the last week we restarted pairing together to
finalize a few open things in the library, I will explain what
is the current status of Orient.</p>

<h2>Beta-5</h2>

<p>We decided to put back our effort on the <code>beta-5</code> release,
instead of letting me complete the issues still belonging
to this version by myself.</p>

<p>In these days we are finalizing the integration tests for
OrientDB's native data types, and refactoring a bit the
implementation of the <strong>hydration mechanism</strong>, which will be more
configurable: we will release an ODM able to let the developer
decide what to do when an hydration error occurs (in other words,
you mapped an attribute as integer but in the OrientDB record
that attribute is mistakenly set as a date): before this
refactoring process <code>null</code> was returned by default, but now
you'll be able to decide whether to <a href="https://github.com/congow/Orient/blob/master/src/Congow/Orient/Formatter/Caster.php#L520">force the casting or raise an exception</a> for these errors.</p>

<p>As we complete these 2 tasks, we will remove the TODOs from
the codebase and then we will release this version which,
I remind it for those who are not up-2-date with the library's
lifecycle, is the one introducing <strong>hydration</strong>, which is the
ability to run SQL queries against an OrientDB instance and map
the results as PHP objects.</p>

<p>Similarly to Doctrine2, Orient offers the ability to map objects
from PHP to OrientDB via annotations:</p>

<p>``` php
&lt;?php</p>

<p>use Congow\Orient\ODM\Mapper\Annotations as ODM;</p>

<p>/<em>*
* @ODM\Document(class="Address")
</em>/
class Address
{</p>

<pre><code>/**
 * @ODM\Property(type="link")
 */
public $city;
</code></pre>

<p>}</p>

<p>```</p>

<h2>Doctrine ODM</h2>

<p>From the beginning, we've been committed in finding a way to make
<a href="https://github.com/congow/Orient/blob/master/src/Congow/Orient/Contract/Protocol/Adapter.php#L23">interoperability</a>
a feature of Orient: another side of this issue is the fact that
we tried to stick to Doctrine2's design for lots of our problems,
from the implementation of mapping to lazy-loading through
auto-generated proxy classes.</p>

<p>In the last weeks I pro-actively asked the Doctrine2 community if they
would be happy in welcoming this project in their community, and the
responses we received were positive: as a result, after going out with
the <code>beta-5</code> release we will refactor the library's namespaces and move
the repository on Github.</p>

<p>There will be lots of things to do, lot of code to refactor, lot of
complaints from the Doctrine2 core members because of our "strange"
code, but this is a huge step towards a more robust PHP library
for OrientDB.</p>

<h2>Beta-6</h2>

<p>After the incubation inside the Doctrine organization we will re-start
working on the <code>beta-6</code> version, which will bundle <strong>persistence</strong> - the
ability to persist mapped PHP objects into OrientDB, using a couple
well known design patterns like the <a href="http://martinfowler.com/eaaCatalog/unitOfWork.html">unit of work</a>
and the <a href="http://martinfowler.com/eaaCatalog/identityMap.html">identity map</a>.</p>

<p>I won't commit myself in an estimate: <strong>this will take a long time</strong>,
especially if only me and <a href="http://davidfunaro.com">David</a> will keep
the good work on this library.</p>

<p>But since we had <strong>huge contributions</strong> from
<a href="https://github.com/nrk">Daniele Alessandri</a> and
are gonna be part of the Doctrine community, I bet we will be able to
deliver what promised in less than then what I currently think.</p>

<h2>RC</h2>

<p>Last but not least, there will be a few planned refactorings and feature
add-ons that we don't need now but are mandatory for a decent stable
version, which will come as we roll out our first <code>RC</code>.</p>

<h2>Thanks, again</h2>

<p>I could not keep my effort and motivation constant during
<a href="https://github.com/congow/Orient/commit/65929ec57a2e2cb1f4af034d722e17b5339b9d48">this year</a>
without your many "thank you", your enthusiasm and
encouraging words: this is what makes me eager to type
with my fat fingers new LoCs dealing with PHP and NoSQL.</p>

<p>This won't be a library I wrote<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>, this is something an entire
community was waiting for and contributed to.</p>

<p>So, <em>thank y'all</em>.</p>

<p><div class="footnotes">
<span>
Notes
</span>
	<ol>
		<li id='fn:1'>Although I still remember the first commit on Github: I was only wearing my underwear, alone in the hall of my flat <a href='#fnref:1' rev='footnote'>â†©</a></li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting back on OrientDB]]></title>
    <link href="http://www.odino.org/getting-back-on-orientdb/"/>
    <updated>2012-01-03T17:16:00+04:00</updated>
    <id>http://www.odino.org/getting-back-on-orientdb</id>
    <content type="html"><![CDATA[<p>It's been a while since I don't give any update about
<a href="https://github.com/congow/Orient">Orient</a>,
the library we are developing to work with
<a href="http://www.orientechnologies.com/orient-db.htm">OrientDB</a>
in PHP...</p>

<!-- more -->


<p>...so here's a brief recap:</p>

<ul>
<li><a href="https://twitter.com/#!/jol1hahn">Daniele</a> has joined the team, with some great
brand new ideas ( the adoption, for example, of
<a href="https://github.com/composer/composer">Composer</a>; I will blog later on this )</li>
<li>I am personally taking care of finishing the open issues ( mostly integration tests )
for the <code>beta-5</code> release, the one introducing <strong>objects hydration</strong></li>
<li><a href="http://davidfunaro.com/">David</a> is leading the moves for the <code>beta-6</code> release,
which is the last one before going RC, introducing <strong>persistence</strong> into the
<a href="https://github.com/congow/Orient/tree/master/src/Congow/Orient/ODM">data mapper</a></li>
</ul>


<p>Uh, well, <a href="http://code.google.com/p/orient/wiki/Y2011">happy 2012</a>: this year we
 will see some great things from OrientDB and its ecosystem!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A warm welcome to Orient beta-4: data-mapping and much more]]></title>
    <link href="http://www.odino.org/a-warm-welcome-to-orient-beta-4-data-mapping-and-much-more/"/>
    <updated>2011-09-20T16:13:00+04:00</updated>
    <id>http://www.odino.org/a-warm-welcome-to-orient-beta-4-data-mapping-and-much-more</id>
    <content type="html"><![CDATA[<p>After a great, as usual, monday-mini-hackaton with my colleague <a href="http://davidfunaro.com/">David</a>, I'm happy to announce that Orient has reached its fourth beta: instead of a generic post, I will describe here, step by step, which amazing things you'll be able to do with this new release :)</p>

<!-- more -->


<h2>Data mapping all the way</h2>

<p>The biggest feature of this beta-4 is the amount of work done in the Data Mapper: you are now able to hydrate POPOs with a few data types:</p>

<ul>
<li>boolean</li>
<li>binary</li>
<li>date|datetime</li>
<li>embedded record|list|set|map</li>
<li>integer|float</li>
<li>link, link set|list|map</li>
<li>byte, long, short and double</li>
<li>string</li>
</ul>


<p>To map them, with annotations, is pretty easy:</p>

<p>``` php Mapping in Orient
&lt;?php</p>

<p>class IGottaMap extends IShouldaMap
{</p>

<pre><code>/**
 * @ODM\Property(name="toMap", type="float")
 */
protected $to_map;
</code></pre>

<p>  ...
}
```</p>

<p>where <code>name</code> is the name of the attribute in OrientDB and type the porting of <a href="http://code.google.com/p/orient/wiki/Types">OrientDB types</a> in PHP: primitive types are pretty similar ( float is <code>float</code>, integer is a value casted with <code>(int)</code> and so on ).</p>

<h2>We be lazy</h2>

<p>Lazy loading has already been implemented: this means that, if you hydrate through the mapper an object with no related record, but only references to them like</p>

<p><code>
Object:
  rid: 1:1
  description: my awesome description!
  related_record: 2:1
</code></p>

<p>and you call <code>$object-&gt;getRelatedRecord()</code> the related record is lazily fetched.</p>

<p>Orient's lazy loading is a mix between <a href="http://blog.verraes.net/2011/05/lazy-loading-with-closures/">Closure-based</a> and <a href="http://www.odino.org/383/w.doctrine-project.org/docs/orm/2.0/en/reference/working-with-objects.html#entity-object-graph-traversal">code-generation-based</a> LL: once we started trying the Closure implementation, we noticed that there were too many limitations from a developer's point of view ( too much end-developer code to write ), so we started looking at Doctrine2's implementation, which is done using <strong>code generation through proxy classes</strong>.</p>

<p>The idea is really awesome ( I will blog about that later on ) and we were about to start implementing code generation while we realized that using Proxy classes would have seriously limited Orient potentialities: since we don't always know the class of the records connected to our sample record, we could not implement a proxy without forcing the user to explicit the "class" of the related records, which rapes one of the most interesting features of OrientDB, cluster ( = table ) inheritance.</p>

<p>Cluster inheritance means that if I have a record of type <code>Menu</code>, he can have a relations <code>Items</code> with records of type <code>ExternalLink</code>, <code>NewsLink</code>, <code>ProductLink</code> and so on ( an issue I already discussed ): since we don't want to use OrientDB in the wrong way - because the motivation which pushed us to use OrientDB was that we were using RDBMS for doing the wrong things - we decided to pollute the end-developer's resulting POPOs instead of loosing such a feature.</p>

<p>Polluting POPOs means that, if you want to retrieve a link, or a series of links, you have 2 choices for writing your getters:</p>

<p>``` php
&lt;?php</p>

<p>public function getFriends()
{</p>

<pre><code>return call_user_func($this-&gt;friends);
</code></pre>

<p>}</p>

<p>```
or</p>

<p>``` php
&lt;?php</p>

<p>public function getFriends()
{</p>

<pre><code>$friends = $this-&gt;friends;

return $friends();
</code></pre>

<p>}
```</p>

<p>We also thought about something like:</p>

<p>``` php
&lt;?php</p>

<p>/<em>*
 * @ODM\Property(name="items", type="linklist", classes="ExternalLink, ProductLink, NewsLink, BlaBlaLink, ...")
</em>/
protected $items;
```</p>

<p>which would have eventually helped us in implementing Doctrine2's proxies, but, as you see, things become ridicolous as your domain grows.</p>

<p>If you want to take a deep look at Orient's lazy loading, just bare in mind that it's implemented using simple, generic purpose Proxy objects that you "execute" ( <code>call_user_func()</code> ) with <a href="https://github.com/congow/Orient/blob/beta-4/src/Congow/Orient/ODM/Proxy.php#L44">PHP 5.3's <code>__invoke</code> magic method</a>.</p>

<h2>Persisting cURL</h2>

<p>Thanks to <a href="https://github.com/nrk">Daniele Assandri</a>'s <a href="https://github.com/congow/Orient/commit/d77c4ec401dae73ae2625bc154a46054219920a3">patch</a>, we managed <a href="https://github.com/congow/Orient/blob/master/src/Congow/Orient/Http/Client/Curl.php#L78">not to restart the curl client</a> at every requests of the HTTP binding: this means <strong>faster requests, thus faster responses</strong>.</p>

<h2>Code coverage</h2>

<p>In a couple of intense coding sessions we managed to cover almost every class of the library with a unit test: this does not mean we have 100% code-coverage and the software is bug-free, but that's a good starting point.</p>

<p><img class="center" src="/images/cc-beta-4.png"></p>

<h2>New SQL commands</h2>

<p>We added the <code>TRUNCATE</code> command, which is used to truncate records, classes or - also - clusters:</p>

<p>``` php
&lt;?php</p>

<p>$query = new Congow\Orient\Query();</p>

<p>$query->truncate('#12:1'); // truncates record 12:1
$query->truncate('myClass;); // truncates class "myClass"
$query->truncate('myClass', true); // truncates cluster "myClass"
```</p>

<h2>Put quality back into LoCs</h2>

<p>We are not PHP gurus ( I will never define myself guru in any context ) but we tried to follow a few metrics in order to mantain the internal quality of the software pretty high: if you take a look at what PHPLoC outputs, you will notice that <strong>cyclomatic complexity is low</strong> and <strong>static methods are not as used as you might think</strong>:</p>

<p><img class="center" src="/images/phploc-beta-4.png"></p>

<h2>Removed constructors from interfaces</h2>

<p>Since PHP allows you to insert a constructor in an interface, we started <a href="https://github.com/congow/Orient/tree/master/src/Congow/Orient/Contract">adding them</a>, but we eventually noticed that they limit extensibility.</p>

<h2>Compatibility with OrientDB RC4</h2>

<p>Ok ok, <strong>RC5 is out, and we will adjust the compatibility with it in the beta-5 release</strong>: the good news is that, as OrientDB goes on, we don't stop and <strong>tests are always green</strong> :)</p>

<h2>Minor tweaks to the mapper</h2>

<p>Like, for exampe, <a href="https://github.com/congow/Orient/issues/40">less coupling to the HTTP protocol</a> and an <a href="https://github.com/congow/Orient/issues/44">interface for protocol adapters</a>: the latter is one of the most crucial parts of the library, because the adapter let's you <strong>use the data mapper and the query builder with any protocol supported by OrientDB</strong> ( HTTP or binary ).</p>

<h2>What's next?</h2>

<p>We're already working on the beta-5 release, which will be a <strong>relaxing release</strong> ( a few refactorings, a couple of other issues ): bare in mind that <a href="https://github.com/doctrine/common/tree/master/lib/Doctrine/Common/Persistence">implementing doctrine/common's persistence interfaces is in our plans</a>, and will probably become real in this next beta.</p>

<p>The next one, beta-6, will deal with the last hard thing, <strong>persisting POPOs to OrientDB</strong>: probably the most difficult thing in the whole library, we are thinking about implementing the <a href="http://martinfowler.com/eaaCatalog/unitOfWork.html">Unit Of Work</a> there.</p>

<p>So, so, so... May I say that the first RC is targeted during Christmas? :) I said it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[News from the Orient library: OrientDB query-builder goes out]]></title>
    <link href="http://www.odino.org/news-from-the-orient-library-orientdb-query-builder-goes-out/"/>
    <updated>2011-07-31T15:19:00+04:00</updated>
    <id>http://www.odino.org/news-from-the-orient-library-orientdb-query-builder-goes-out</id>
    <content type="html"><![CDATA[<p>There are times to celebrate, like this one, that I was expecting since 2 months; a moment I delayed because of an amount of things that you can't even imagine.</p>

<!-- more -->


<p>But <a href="http://www.odino.org/349/the-current-status-of-my-work-with-orientdb">as I stated earlier</a>, a product should respect its estimated lifecycle and be released with the announced features: that's why I'm proud to announce the immediate availability of the <a href="https://github.com/congow/Orient/tree/beta-3">beta-3 tag of Orient</a>, which ( stand up who does not know what it is ), last time I repeat it, is a library which lets you easily work with <a href="http://www.orientechnologies.com/">OrientDB</a> from PHP.</p>

<h2>What's new?</h2>

<p>Nothing <em>that</em> special.</p>

<p>As I remarked via Twitter and in the first post I linked in this article, the beta-3 was a solidifying release:</p>

<ul>
<li>we added the last SQL commands that were missing, like <code>ALTER CLASS</code></li>
<li>we refactored lots of the code involved in order to eliminate lots of the hardcoded new Class in the code</li>
<li>integration tests for the QB have been written</li>
<li>believe it or not, the most crucial and time-consuming task was digging deeper into these tests, so we spent lot of time trying to have more meaningful integrations</li>
<li>we previewed a big refactoring, introducing the concept of Validators - <em>a la' symfony1</em> - which are probably gonna replace those ugly and static formatters</li>
<li>we eliminated all the <code>@TODO</code>s from the PHPDOC, which means we solved them</li>
</ul>


<h2>Swishes the code</h2>

<p>As always, we tried to make it clear enough for Doctrine 1.2 users to be able not to get lost writing a simple <code>SELECT</code>:</p>

<p>``` php Creating a simple SQL query
&lt;?php</p>

<p>use Orient\Query;</p>

<p>$query = new Query('users');
$query->where('username = ? AND gender = ?', array('admin', 'male'));
$query->orWhere('gender = ?', "female");</p>

<p>echo $query->getRaw();
// SELECT FROM users WHERE username = "admin" AND gender = "male" OR gender = "female"
```</p>

<p>You can obviously do more complex stuff or use any of OrientDB SQL-like operators:</p>

<p>``` php More examples of SQL queries and operators
&lt;?php</p>

<p>$query->revoke('myPermission')->to('user1')->on('cluster'); // Revoke access to a user</p>

<p>$query->findReferences('12:0'); // Who's referring to record 12:0?</p>

<p>$query->from(array('index:inEdges'));
$query->between('12:0', '12:40'); // look at some indexes between two ranges
```</p>

<h2>Status of the library</h2>

<p>If you want, before looking at some nice pictures a few lines below, read these considerations about the current state of Orient.</p>

<p>...there we go: the most boring parts of the library are done and I'm glad these moments are past, from now.</p>

<p>As far as I - now - know, a few refactorings will be performed on the QB, but the test coverage is high enough to let us perform these operations without being scared at all: the first thing I want to work on are the formatters and the entire way the query tokens are handled; since the formatters introduce a lot of static code I primarily want to see if I can replace them with <a href="https://github.com/congow/Orient/tree/beta-3/Validator">validators</a>, then re-think the entire structure of the tokens, because the implementation is a bit sucky nowadays ( I want to type-hint them! ).</p>

<p>But don't think these 2 steps will really be the first things I will do: with the beginning of August, thus vacations, I'll spend lot of time on the data mapper, which is the most funny and complex part of the whole system; being able to spend some time during this month will let us have a really buggy preview of the final mapper by the end of august, I suppose.</p>

<h2>Magic pictures</h2>

<p>Developers like metrics and related pictures.</p>

<p>I want to share with you a few pictures and number from the beta-3 tag of the library, but please, be aware that without having thousand of systems that use it in production all of these numbers are meaningless! :)</p>

<p>Here is the code coverage, generated by PHPUnit:</p>

<p><img class="center" src="/images/cc.png"></p>

<p>and some really interesting numbers, like cyclomatic complexity, thanks to PHPLOC:</p>

<p>``` bash
Directories:                                         32
Files:                                               84
Lines of Code (LOC):                               6622<br/>
  Cyclomatic Complexity / Lines of Code:           0.03
Comment Lines of Code (CLOC):                      3411
Non-Comment Lines of Code (NCLOC):                 3211
Namespaces:                                          33
Interfaces:                                          17
Classes:                                             67
  Abstract:                                           3 (4.48%)<br/>
  Concrete:                                          64 (95.52%)
  Average Class Length (NCLOC):                      40
Methods:                                            351
  Scope:</p>

<pre><code>Non-Static:                                     306 (87.18%)
Static:                                          45 (12.82%)  
</code></pre>

<p>  Visibility:</p>

<pre><code>Public:                                         278 (79.20%)
Non-Public:                                      73 (20.80%)
</code></pre>

<p>  Average Method Length (NCLOC):                      7
  Cyclomatic Complexity / Number of Methods:       1.31
Anonymous Functions:                                  3
Functions:                                            0
Constants:                                           32
Global constants:                                     0
Class constants:                                     32
```</p>

<p>...without forgetting the fact that I created a report.sh file that can be run to inspect the health of the code; for example, take a lot at the phpDepend pyramid:</p>

<p><img class="center" src="/images/pyramid-depend.png"></p>

<p>Last but not least, if you like interactive PHPDOC tools ( I don't, they all suck hard ), I set up a small Doxygen init script that you can use to generate the documentation:</p>

<p><code>bash
doxygen Docs/orient.d
</code></p>

<p>then you can look at <code>Docs/html</code> to read the generated documentation.</p>

<p>So, what are you waiting for? Go out there and <a href="https://github.com/congow/Orient">get oriented</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get prepared for OrientDB's query builder ]]></title>
    <link href="http://www.odino.org/get-prepared-for-orientdb-s-query-builder/"/>
    <updated>2011-06-03T13:46:00+04:00</updated>
    <id>http://www.odino.org/get-prepared-for-orientdb-s-query-builder</id>
    <content type="html"><![CDATA[<p>As you can see on <a href="https://github.com/odino/Orient/commits/master">Github</a>, today we fixed all the minor issues of the beta-3 milestone of the <a href="https://github.com/odino/Orient">Orient</a> library ( a set of tools to manage OrientDB in PHP ).</p>

<!-- more -->


<p>Since the only thing left is to write the query-builder integration tests ( which will directly speak with OrientDB ), we are confident that the next release, the <a href="https://github.com/odino/Orient/issues?milestone=1&amp;state=open">beta-3</a>, will happend during this weekend.</p>

<p>Writing the remaining tests will take a man-day circa so, since I'm pretty focused on releasing as early as possible, we should see this component coming out soon.</p>

<p>For those of you who don't know what is gonna come in this release ( which is not "official" but intended for early adopters ), I can tell you that the main thing will be the query-builder and nothing more: the QB is an OO library in order to build OrientDB SQL commands with a nice fluent interface, in Doctrine 1 style.</p>

<p>By the way: in <a href="http://www.dnsee.com/">DNSEE</a> we are currently setting-up our brand strategies to expose this and other products ( mainly the CMF ), so, in a few weeks, you should be able to reach something like components.dnsee.com ;-)</p>
]]></content>
  </entry>
  
</feed>
