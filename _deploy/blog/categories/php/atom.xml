<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: PHP | Alessandro Nadalin]]></title>
  <link href="http://www.odino.org/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://www.odino.org/"/>
  <updated>2012-12-05T12:31:41+04:00</updated>
  <id>http://www.odino.org/</id>
  <author>
    <name><![CDATA[Alessandro Nadalin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OrientDB ODM beta 5: repositories, compatibility with 1.2.0 and more stability]]></title>
    <link href="http://www.odino.org/orientdb-odm-beta-5-repositories-compatibility-with-1-dot-2-0-and-more-stability/"/>
    <updated>2012-11-23T09:10:00+04:00</updated>
    <id>http://www.odino.org/orientdb-odm-beta-5-repositories-compatibility-with-1-dot-2-0-and-more-stability</id>
    <content type="html"><![CDATA[<p>It has almost been a baby's delivery, but we eventually made it:
the PHP <a href="http://css.dzone.com/articles/era-object-document-mapping">ODM</a> for <a href="http://code.google.com/p/orient/">OrientDB</a> has finally reached its <strong>5th beta</strong>.</p>

<!-- more -->


<p>Thanks to the huge effort of <a href="http://davidfunaro.com">David Funaro</a> and the push from <a href="https://twitter.com/Ocramius">Marco Pivetta</a> we
have just released the <code>beta-5</code> version of this library, which lets
you work with the infamous GraphDB in PHP: there is a plethora of
changes and some news about the future of the library, so I'll try
to recap a bit what we've done so far in almost <strong>one year</strong> of
active development.</p>

<h2>Composer</h2>

<p>The entire library (query builder, HTTP binding and ODM) is now
<em>composerified</em> (have a look at the <a href="https://github.com/congow/Orient/blob/beta-5/composer.json#L24">dependencies</a>):
this was an important step since we wanted to completely get
rid of git submodules and embrace this new and - sorry PEAR -
finally decent packaging system for PHP.</p>

<h2>Symfony2: gimme MOAR</h2>

<p>We hate the <a href="http://en.wikipedia.org/wiki/Not_invented_here">NIH approach</a>, so whenever there is a library which is tested, decoupled
and does what we need, we tend to use it instead of rewriting from scratch some new
userland code.</p>

<p>This has been the case for our filesystem classes, that - as they were first very simple
but tended to grow - have now been replaced with the <a href="http://symfony.com/doc/2.0/components/finder.html">Symfony2 finder</a>.</p>

<p>At the same time we also added the <a href="http://symfony.com/doc/2.0/components/class_loader.html">ClassLoader component</a>, which replaces
our old <a href="https://github.com/congow/Orient/blob/beta-5/test/PHPUnit/bootstrap.php">PSR-0 compatible basic autoloader</a>.</p>

<h2>Compatibility with the stable OrientDB 1.2.0</h2>

<p>OrientDB is stable <a href="http://www.h-online.com/open/news/item/NoSQL-Document-Graph-database-OrientDB-1-0-released-1576260.html">since months</a>,
we couldn't release a version of our library without
upgrading the compatibility to OrientDB (we were still at version <code>1.0-rc6</code>):
we are now compatible with OrientDB <code>1.2.0</code>.</p>

<p>The move has been quite easy thanks to the test suite that we have
built so far, but we are still probably missing a few features
introduced in <code>1.1</code> and <code>1.2</code>: as soon as we will go on with the
library we will map what the OrientDB team has added to the DB -
for example, <a href="http://nuvolabase.blogspot.com/2012/09/orientdb-supports-functions.html">functions</a>.</p>

<h2>Fetchplans integrated in the Manager</h2>

<p><a href="http://code.google.com/p/orient/wiki/FetchingStrategies">Fetchplans</a> specify the way OrientDB should lazy-load records:
we have now <a href="https://github.com/congow/Orient/commit/57a5c33ebb02ba8c3d738c2abe1de1c27ba4e846">added support to them</a>,
meaning that if you dont want to lazy-load linked records (<code>*:-1</code>),
the ODM is able to read the entire result from OrientDB and
build linked records as PHP objects (or array of objects).</p>

<p>In the <a href="https://github.com/congow/Orient/commit/57a5c33ebb02ba8c3d738c2abe1de1c27ba4e846#L12L74">example</a>,
you see that <code>$post-&gt;comments</code>:</p>

<ul>
<li>is an array (which eventually contains objects)</li>
<li>is not a <code>Proxy\Collection</code>, which would mean it's a collection of lazy-loaded records</li>
</ul>


<p>by just using the correct fetchplan:</p>

<p>``` php
&lt;?php</p>

<p>$post = $this->manager->find('27:0', '*:-1');</p>

<p>var_dump($post->getComments(); // an array of objects, no lazy-loading
```</p>

<h2>Repositories</h2>

<p>We implemented the <a href="https://github.com/congow/Orient/blob/beta-5/src/Congow/Orient/ODM/Repository.php">repository pattern</a> - as
Doctrine 2 does: you are now able to access
virtual collections and retrieve records
through them:</p>

<p>``` php
&lt;?php</p>

<p>use Congow\Orient\ODM\Manager;</p>

<p>$manager    = new Manager(...);
$repository = $manager->getRepository('Users');</p>

<p>$user = $repository->find($id);
```</p>

<h2>Doctrine persistence</h2>

<p>Since one of our aims is to be as compatible
as possible with Doctrine's ODMs, we integrated
the <a href="https://github.com/congow/Orient/issues/71"><em>Persistence</em> interfaces from Doctrine 2</a>:
most of the methods are not implemented yet (<code>throw new Exception()</code>),
as actual persistence should come in <code>beta-6</code>/<code>rc-1</code>, but
the good news is that when retrieving objects from the DB
you can still use the same APIs that the Doctrine ODMs
provide you.</p>

<h2>Integration tests</h2>

<p>This release was mainly delayed because of
integration tests<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>: we promised a fully-tested
hydration mechanisms (converting DB records in
POPOs) for <code>beta-5</code> and this has been, slowly,
accomplished.</p>

<p><a href="https://github.com/congow/Orient/commit/37cfe0fdad7f0caba2b22cfdce1006ddacfc63e7">Repositories</a>,
<a href="https://github.com/congow/Orient/commit/b3706dfb3470eb27e12c4944e398a5d911fe2598">hydration</a>
and <a href="https://github.com/congow/Orient/issues/68">data types</a>
are now covered by integration tests.</p>

<h2>Refactoring proxies</h2>

<p>The way we <a href="https://github.com/nrk/Orient/commit/0bed0196f83c6048b971accbe2d80f3a8c81c31b">generate proxies</a> is one of the
most interesting parts of the library:
with this release we changed the way we
do it in order to provide
a <strong>more flexible and straightforward
mechanism for doing lazy-loading</strong>.</p>

<p>Usually when you retrieve a record in OrientDB
you won't have related records:</p>

<p>``` bash SELECT FROM Address LIMIT 1
{
  "result": [{</p>

<pre><code>    "@type": "d", 
    "@rid": "#19:0", 
    "@version": 6, 
    "@class": "Address", 
    "type": "Residence", 
    "street": "Piazza Navona, 1", 
    "city": "#21:0", 
    "nick": "Luca2"
}
</code></pre>

<p>  ]
}
```</p>

<p>as you see, by default OrientDB doesn't
retrieve the related record (<code>city</code>), but
provides a <em>pointer</em> to that record (the <code>RID</code>).</p>

<p>When you retrieve a record via the <code>Manager</code> class,
the ODM doesn't return you a <a href="https://github.com/congow/Orient/blob/beta-5/test/Integration/Document/Address.php">POPO</a>, but a <a href="https://github.com/congow/Orient/blob/beta-5/test/proxies/Congow/Orient/Proxy/test/Integration/Document/Address.php">proxy class
that overrides the POPO</a>, allowing lazy-loading.</p>

<p>Proxy classes, basically, just call parent methods,
and if the parent method has something to return:</p>

<ul>
<li>if the <em>returnable</em> is a string, an array, etc <strong>or a POPO</strong>, they return it</li>
<li>if the returnable is an <code>AbstractProxy</code> object,
it means that there is a record/collection of records
that have to be loaded from OrientDB with an extra-query</li>
</ul>


<p>``` php Code example to understand lazy-loading
&lt;?php</p>

<h1>A proxy class is returned</h1>

<p>namespace Congow\Orient\Proxy\test\Integration\Document;</p>

<p>class Address extends \test\Integration\Document\Address
{</p>

<pre><code>  public function getCity() {
    $parent = parent::getCity();

    if (!is_null($parent)) {
        if ($parent instanceOf \Congow\Orient\ODM\Proxy\AbstractProxy) {
            return $parent();
        }

        return $parent;
    }
}
public function setCity($city) {
    $parent = parent::setCity($city);

    if (!is_null($parent)) {
        if ($parent instanceOf \Congow\Orient\ODM\Proxy\AbstractProxy) {
            return $parent();
        }

        return $parent;
    }
}
</code></pre>

<p>}</p>

<h1>When calling $address->getCity(), we will actually</h1>

<h1>call the __invoke() method of a Proxy object</h1>

<p>namespace Congow\Orient\ODM;</p>

<p>use Congow\Orient\ODM\Mapper;
use Congow\Orient\ODM\Proxy\AbstractProxy;</p>

<p>class Proxy extends AbstractProxy
{</p>

<pre><code>protected $manager;
protected $rid;
protected $record;

/**
 * Istantiates a new Proxy.
 *
 * @param Mapper $manager
 * @param string $rid
 */
public function __construct(Manager $manager, $rid)
{
    $this-&gt;manager = $manager;
    $this-&gt;rid = $rid;
}

/**
 * Returns the record loaded with the Mapper.
 *
 * @return object
 */
public function __invoke()
{
    if (!$this-&gt;record) {
        $this-&gt;record = $this-&gt;getManager()-&gt;find($this-&gt;getRid());
    }

    return $this-&gt;record;
}
</code></pre>

<p>}
```</p>

<p>As you see, calling the <code>__invoke()</code> method
of a proxied object will make the manager do
an extra-query to retrieve the lazy-loaded record.</p>

<h2>Support of sessions in the HTTP client</h2>

<p><a href="https://github.com/nrk">Daniele Alessandri</a> took his time to add <a href="https://github.com/congow/Orient/pull/118">native support for cookies</a> in the
HTTP client which is used in the native HTTP binding: thanks
to this we can decide whether to re-use an existing session
while querying the DB.</p>

<h2>Simplified requirements</h2>

<p>We have now removed <a href="https://github.com/nrk/Orient/commit/bc8f94e7c07147aec1c0c4ed852b7b9d02f4a96c">APC as a requirement</a> for the library: since it
was an easy fix we thought it makes sense not to force everyone to have
APC installed everywhere<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>.</p>

<h2>Contributions</h2>

<p>I've been pretty busy over the last months, but
the efforts of the already-mentioned Daniele and
David have been <a href="https://github.com/congow/Orient/graphs/contributors?from=2012-03-31&amp;to=2012-11-18&amp;type=c">huge</a>
to release <code>beta-5</code>: I virtually clap my hands
for them, as they are the main reason behind all
of this progress.</p>

<h2>Tests and CI</h2>

<p>As always, green tests: the build is handled by
Travis-CI. Also that one <a href="https://secure.travis-ci.org/#!/congow/Orient">is green</a>.</p>

<h2>Doctrine and beta-6</h2>

<p>David is already working on refactoring the
namespaces to ask the Doctrine team to
integrate the library into their organization:
as agreed months ago, there shouldn't be a big
problem in doing so.</p>

<p>As this will be <strong>the first ODM for a GraphDB</strong>,
everyone is pretty excited about it:</p>

<ul>
<li>we will get more support and contributions for the library itself</li>
<li>it's the first GraphDB that goes into Doctrine and the PHP world - I mean, <strong>properly</strong></li>
</ul>


<p>After that, we will face the <a href="https://github.com/congow/Orient/issues?milestone=4&amp;page=1&amp;state=open">biggest challenges</a> so far:</p>

<ul>
<li>decoupling ODM, HTTP binding and Query Builder into 3 separate libraries/repositories</li>
<li>refactor a big portion of the codebase according to the feedbacks from the Doctrine community</li>
<li>implement persistence (from POPOs to DB)</li>
</ul>


<p>I'm pretty sure the next months will be
productive, intense and full of changes, but
I'd realy like to suggest you one thing before
leaving you: <strong>use this library</strong>.</p>

<p>Even though the ODM is not finished yet, <strong>HTTP binding
and Query Builder are already at a stable stage</strong>:
the first one is <strong>already faster</strong> than the <a href="https://github.com/AntonTerekhov/OrientDB-PHP">binary-protocol implementation</a>,
while the second one is a very convenient library to
help you <strong>saving a lot of time</strong> when writing OrientDB's
SQL+.</p>

<p>Again, their level of maturity is pretty high, and we
accept and review bugs/feature requests pretty fastly.</p>

<p>So, what? Now, there are <strong>no more excuses</strong>.</p>

<p><div class="footnotes">
<span>
Notes
</span>
	<ol>
		<li id='fn:1'>We have a test suite that runs "on paper", meaning that those are tests running based on the OrientDB documentation. Integration tests are done, instead, with a real OrientDB instance <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>It is used to provide a basic caching layer for annotations <a href='#fnref:2' rev='footnote'>↩</a></li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ready for europe, IPC and pizzas]]></title>
    <link href="http://www.odino.org/ready-for-europe-ipc-and-pizzas/"/>
    <updated>2012-10-14T21:21:00+04:00</updated>
    <id>http://www.odino.org/ready-for-europe-ipc-and-pizzas</id>
    <content type="html"><![CDATA[<p>In 24 hourse I'll be on a plane which is gonna bring
me in Frankfurt, to then join the <a href="http://phpconference.com/">International PHP Conference</a>
in Mainz.</p>

<!-- more -->


<p><img class="right" src="/images/ipc-slide.png"></p>

<p>I'm pretty excited since this will be my first visit
to the old continent since I moved to Dubai - almost 7 months ago -
and I'm glad I'll do that for IPC, with a brief <em>pit-stop</em> in Italy -
unfortunately not in Rome.</p>

<p>At IPC I will talk about REST, with an - I hope -
interesting introduction about this architectural style, anti-patterns
and a few tips on how to implement REST's constraints in our
architectures.</p>

<p>I will also have another chance to talk, and I'm <strong>seriously</strong>
excited about it, since, for the first time, I get the chance to
talk about the foundation of our lives in the modern era (<em>homo internectus</em>),
the <strong>HTTP protocol</strong>: I will talk a little bit about why we needed it,
with some historical notion about the web's foundation, what SPDY
brings on the table and the recent <strong>revolutions</strong> around <code>HTTP/2.0</code>.</p>

<p>On the 17th evening I will catch a flight for Venice (via Wien) and then
I'll spend some time with the rest of the family, good thing if you also
consider that for the first time in 4 years they're gonna see me for my birthday.</p>

<p><img class="left" src="/images/ale_idiot.jpeg"></p>

<p>But Italy doesn't mean that I'm going to relax <strong>at all</strong>, as I will
finally meet all the guys from the <a href="http://friuli.grusp.org/">PHP User Group Friuli</a>,
the 2nd PHP user group in Italy (considering numbers and history), that
I personally founded along with <a href="http://www.mvassociati.it/it/il-team">Steve&amp;Stefano</a> and <a href="http://it.linkedin.com/in/dlondero">Daniel</a> in front of a pizza,
but never got to join during their
monthly meetings, as I was already based in Rome at that time.</p>

<p>There is no plan about that meeting, as the topic will be "<em>Alessandro Nadalin in tour</em>":
if you are a developer, a technology enthusiast or simply a student come
and join us in Codroipo, as I will also talk about abroad work experiences as well
as scout and recruit for some companies (yes, not only <strong>my</strong> company).</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Monolog for PHP error reporting on New Relic]]></title>
    <link href="http://www.odino.org/using-monolog-for-php-error-reporting-on-new-relic/"/>
    <updated>2012-07-27T08:00:00+04:00</updated>
    <id>http://www.odino.org/using-monolog-for-php-error-reporting-on-new-relic</id>
    <content type="html"><![CDATA[<p>I <strong>do</strong> really like <a href="http://newrelic.com/">New Relic</a>, a real-time
error reporting solution available for many
platforms, so a few days ago I decided to
integrate it with <a href="https://github.com/Seldaek/monolog/">Monolog</a>, the other
main logging tool that we use here at
Rocket.</p>

<!-- more -->


<p>The idea behind it is very simple: since
New Relic is not always available on
development platforms, you first verify
that the PHP extension is loaded, then,
if it is, log a report on New Relic:
if the extension is not available, another
logging handler will act as a fallback.</p>

<p>To reach our goal we will simply need the
New Relic PHP extension, Monolog and the
Symfony2 <a href="http://symfony.com/doc/current/book/service_container.html">dependency injection container</a>.</p>

<h2>Catching the error and reporting it</h2>

<p>Let's start with a real world example, you
have a controller action that receives some
<code>POST</code> data and throws an exception whenever
the input data is missing some values<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.</p>

<p>``` php A simple action
&lt;?php</p>

<p>namespace Application\Webservice;</p>

<p>use Application\MVC\Controller as BaseController;
use Application\Webservice\Exception;</p>

<p>class Controller extends BaseController
{</p>

<pre><code>public function updateDatabaseData(array $data)
{
    try {
        $this-&gt;validateData($data);

        // ...
    } catch (Exception $e) {
        $this-&gt;container-&gt;get('logger.new-relic')-&gt;error($e-&gt;getMessage(), $data);
    }
}
</code></pre>

<p>}
```</p>

<p>So, at this point, we just need to define the <code>logger.new-relic</code>
service in the DIC configuration file:</p>

<p>``` yml The DIC configuration file
services:
  logger.new-relic:</p>

<pre><code>class: "Monolog\\Logger"
arguments:
  name: "new-relic"
calls:
  - [ pushHandler, [@log.handler.new-relic] ]
</code></pre>

<p>  log.handler.new-relic:</p>

<pre><code>class:  "\\Application\\Log\\Handler\\NewRelic"
calls:
  - [ setFallbackHandler, [@log.handler.standard] ]
</code></pre>

<p>  log.handler.standard:</p>

<pre><code>class:  "Monolog\\Handler\\StreamHandler"
arguments:
  stream: "/tmp/error-log.txt"
</code></pre>

<p>```</p>

<p>As you see we define a Monolog logger designed
specifically for New Relic (<code>logger.new-relic</code>)
and an handler that will try to log everything
on the remote NR server: this handler also has a
fallback handler, if the New Relic PHP extension is
not available, which is configurable directly
within the YAML file (<code>log.handler.error</code>).</p>

<h2>The log handler</h2>

<p>The New Relic handler is <strong>really</strong>
straightforward:</p>

<p>``` php The New Relic log handler
&lt;?php</p>

<p>/<em>*
 * Class used to log on New Relic.
 </em>/</p>

<p>namespace Application\Log\Handler;</p>

<p>use Monolog\Handler\AbstractProcessingHandler;
use Monolog\Handler;</p>

<p>class NewRelic extends AbstractProcessingHandler
{</p>

<pre><code>protected $fallbackHandler;

/**
 * Logs a $record on New Relic, providing additional parameters from the
 * record's context.
 * If the New Relic extension is not available and a fallback handler is
 * provided, it will simply log the error with a fallback.
 * 
 * @param array $record 
 */
protected function write(array $record)
{
    if (extension_loaded('newrelic')) {
        newrelic_notice_error($record['message']);

        foreach ($record['context'] as $key =&gt; $parameter) {
            newrelic_add_custom_parameter($key, $parameter);
        }
    } elseif ($this-&gt;fallbackHandler instanceOf AbstractProcessingHandler) {
        $this-&gt;fallbackHandler-&gt;write($record);
    }
}

/**
 * Sets the fallback handler to be used to log informations if the New Relic
 * extension is not available.
 *
 * @param Monolog\Handler\AbstractProcessingHandler $handler 
 */
public function setFallbackHandler(AbstractProcessingHandler $handler)
{
    $this-&gt;fallbackHandler = $handler;
}
</code></pre>

<p>}
```</p>

<p>So, the code is pretty simple: we implement the <code>write</code> method
of <code>AbstractProcessingHandler</code> in our <code>New Relic</code> class,
using New Relic's low level functions to notice the
error and add some more informations about the
context surrounding the exception: the fallback
handler will take stage only if the New Relic
extension isn't loaded.</p>

<h2>Log systems and analysis</h2>

<p>Simple but pretty useful: if you use either
New Relic or Monolog I strongly recommend you
to integrate into your log management system
the missing tool since:</p>

<ul>
<li>New Relic serves as a nice reporting tool,
giving you an overview of the amount of
errors logged over some time, letting you
define tresholds for error reporting and
grouping errors to measure the impact a code
change can have on your applications<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup></li>
<li>Monolog gives you a great abstraction and
log handlers, which can very easily ease
your job in taking the right action for
different types of errors<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>
(as you saw, with the DIC it's pure joy to
instantiate and use different handlers based
on a configuration file)</li>
</ul>


<p>At Rocket Turkey &amp; MENA we really care about logs:
being a product-based company, <strong>a bug in our
system is a bug on our core business</strong>, so we need
to easily be able to spot problems.</p>

<p>So far, using Monolog and New Relic as both standalone and combined
products has been a very good choice, since with
New Relic with have a pretty overview about
error reporting, while Monolog gives us the
ability to easily debug problems in our
integrations, since solving problems with all
the data we track with it it's really easier,
and if we need to change logs' format or add new data
to the logs because we notice that it would speed
up troubleshooting and log analysis, making
the change is relatively easy, since it's a
really well OOP-written library.</p>

<p><div class="footnotes">
<span>
Notes
</span>
	<ol>
		<li id='fn:1'>Bare in mind that I will be very brief in my examples, so you won't learn how to bootstrap the DIC here, for example <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>I say applications since, as you may know, in New Relic you can handle multiple machines to be registered as different applications (like frontend/backend/mail server/cron slave/gateway) <a href='#fnref:2' rev='footnote'>↩</a></li><li id='fn:3'>In fact,whenever an email is not delivered by your email sever, it's not a problem, but when you start seeing that the amount of mails that are not delivered are too much, you may consider to use a critical handler, specifically designed to send an SMS/email to some contacts <a href='#fnref:3' rev='footnote'>↩</a></li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Y U NO access WHOIS informations in PHP?]]></title>
    <link href="http://www.odino.org/y-u-no-access-whois-informations-in-php/"/>
    <updated>2012-04-16T00:38:00+04:00</updated>
    <id>http://www.odino.org/y-u-no-access-whois-informations-in-php</id>
    <content type="html"><![CDATA[<p><ol class="aseries">
	<p>This post is part of the "<strong>WHOIS in PHP: consuming the Robowhois API</strong>" series; here is a list of all the articles contained this series:</p>
	<li>
		<a href="/a-php-library-to-retrieve-whois-informations/">A PHP library to retrieve WHOIS informations</a>
	</li>
	<li>
		<a href="/retrieving-raw-whois-informations-in-php/">Retrieving raw WHOIS informations in PHP</a>
	</li>
	<li>
		<a href="/checking-a-domain-s-availability-with-php/">Checking a domain's availability with PHP</a>
	</li>
  <li>
    <a href="/y-u-no-access-whois-informations-in-php/">Y U NO access WHOIS informations in PHP?</a>
  </li>
</ol>
</p>

<p>In these days we finalized the last parts of the official
<a href="https://github.com/robowhois/robowhois-php">PHP client for the Robowhois API</a>
, and here are the changes for the <code>0.9.0</code> version.</p>

<!-- more -->


<h2>Parts and properties API</h2>

<p>As part of our job, we needed to implement the last
2 API endpoints provided by Robowhois, <code>properties</code>
and <code>parts</code>.</p>

<p>Everything is documented in the
<a href="https://github.com/robowhois/robowhois-php/blob/master/README.md">README</a>
but you can also follow the examples under the <code>sample/</code> directory:</p>

<p>``` php Using the properties API
&lt;?php</p>

<p>use Robowhois\Robowhois;
use Robowhois\Exception;</p>

<p>require 'vendor/.composer/autoload.php';</p>

<p>$robowhois = new Robowhois('INSERT-YOUR-API-KEY-HERE');</p>

<p>try {</p>

<pre><code>$domain = $robowhois-&gt;whoisProperties('robowhois.com');

echo $domain['properties']['created_on'] . "\n";
</code></pre>

<p>} catch (Exception $e) {</p>

<pre><code>echo "The following error occurred: " . $e-&gt;getMessage();
</code></pre>

<p>}
```</p>

<p>``` php Using the parts API
&lt;?php</p>

<p>use Robowhois\Robowhois;
use Robowhois\Exception;</p>

<p>require 'vendor/.composer/autoload.php';</p>

<p>$robowhois = new Robowhois('INSERT-YOUR-API-KEY-HERE');</p>

<p>try {</p>

<pre><code>$domain = $robowhois-&gt;whoisParts('robowhois.com');

echo $domain['parts'][0]['body'] . "\n";
</code></pre>

<p>} catch (Exception $e) {</p>

<pre><code>echo "The following error occurred: " . $e-&gt;getMessage();
</code></pre>

<p>}
```</p>

<h2>Magic objects, behaving like arrays</h2>

<p>We implemented the <code>\ArrayObject</code> interface for the objects
returned by the API, which means that now you can access
the results of an API call just like an array:</p>

<p>``` php
&lt;?php</p>

<p>$account = $robowhois->account();</p>

<p>// $account is an instance of Robowhois\Account
echo sprintf('You have %d API calls left', $account['credits_remaining']);
```</p>

<p>but, for those like us who like the OO synthax, we implemented
some magic to let you retrieve those values via getters, which
are built <em>on-the-fly</em> thanks to PHP's <code>__call()</code> method:</p>

<p>``` php
&lt;?php</p>

<p>echo $account->getCreditsRemaining();
```</p>

<p>Getters are a camelized version of the array keys, and are
built thanks to the
<a href="https://github.com/robowhois/robowhois-php/blob/master/composer.json#L28">Doctrine Inflector</a>.</p>

<h2>Mapping the existing API</h2>

<p>We renamed the methods accessing the API in order to 100% reflect
the ones exposed by the API, also used in the
<a href="https://github.com/robowhois/robowhois-ruby">Ruby client</a>: so now the
<code>Robowhois\Robowhois</code> object has:</p>

<ul>
<li><code>-&gt;account()</code></li>
<li><code>-&gt;whois()</code></li>
<li><code>-&gt;whoisProperties()</code></li>
<li><code>-&gt;whoisParts()</code></li>
<li><code>-&gt;whoisRecord()</code></li>
<li><code>-&gt;whoisAvailability()</code></li>
</ul>


<h2>Simplified exceptions</h2>

<p>We initially added tons of exceptions but we eventually
decide to keep the only <code>Robowhois\Exception</code> class.</p>

<h2>Now?</h2>

<p>Wanna retrieve WHOIS informations in PHP at a
<a href="http://www.robowhois.com/pricing">decent price</a>?</p>

<p>Start consuming the Robowhois APIs, with PHP.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Checking a domain's availability with PHP]]></title>
    <link href="http://www.odino.org/checking-a-domain-s-availability-with-php/"/>
    <updated>2012-03-20T09:49:00+04:00</updated>
    <id>http://www.odino.org/checking-a-domain-s-availability-with-php</id>
    <content type="html"><![CDATA[<p><ol class="aseries">
	<p>This post is part of the "<strong>WHOIS in PHP: consuming the Robowhois API</strong>" series; here is a list of all the articles contained this series:</p>
	<li>
		<a href="/a-php-library-to-retrieve-whois-informations/">A PHP library to retrieve WHOIS informations</a>
	</li>
	<li>
		<a href="/retrieving-raw-whois-informations-in-php/">Retrieving raw WHOIS informations in PHP</a>
	</li>
	<li>
		<a href="/checking-a-domain-s-availability-with-php/">Checking a domain's availability with PHP</a>
	</li>
  <li>
    <a href="/y-u-no-access-whois-informations-in-php/">Y U NO access WHOIS informations in PHP?</a>
  </li>
</ol>
</p>

<p>It's been a while I don't blog about the
<a href="https://github.com/robowhois/robowhois-php">Robowhois PHP client</a> that I'm developing
together with <a href="http://davidfunaro.com">David</a> so, since we recently released
the <code>0.8.0</code> version I want to share with you what you can do with it now.</p>

<!-- more -->


<h2>Checking a domain's availability</h2>

<p>The <a href="http://docs.robowhois.com/api/whois/">availability API</a> is probably the
greatest feature of the <a href="http://www.robowhois.com/">Robowhois</a> webservice,
letting you check for a domain's availability with a simple, uniform HTTP
request.</p>

<p>``` php Checking if google.com is available
&lt;?php</p>

<p>use Robowhois\Robowhois;</p>

<p>$robowhois = new Robowhois('INSERT-YOUR-API-KEY-HERE');</p>

<p>if ($robowhois->isAvailable('google.com')) {
  echo "pretty nice dream, uhm?";
}
```</p>

<p>The opposite thing is achieved using the <code>-&gt;isRegistered()</code> method.</p>

<p>You can also retrieve an array as returned from the webservice, by doing:</p>

<p>``` php
&lt;?php</p>

<p>use Robowhois\Robowhois;</p>

<p>$robowhois = new Robowhois('INSERT-YOUR-API-KEY-HERE');</p>

<p>if ($availability = $robowhois->whoisAvailability('google.com')) {
  echo $availability['available'];
  echo $availability['registered'];
  echo $availability['daystamp'];
}
```</p>

<h2>Retrieve informations about your account</h2>

<p>A <em>must-have</em>, since you should always check how many remaining credits
you have, the <code>account</code> API lets you retrieve some of your personal data
from your Robowhois.com account:</p>

<p>``` php Calculating how many left credits you have
&lt;?php</p>

<p>use Robowhois\Robowhois;</p>

<p>$robowhois = new Robowhois('INSERT-YOUR-API-KEY-HERE');</p>

<p>try {</p>

<pre><code>$credits = $robowhois-&gt;whoisAccount()-&gt;getCreditsRemaining();

    if ($credits &gt; 100) {
            echo "No problem fella!";
} else {
            echo "Time to go shopping looking for new API calls, uhm?";
}
</code></pre>

<p>} catch (Exception $e) {</p>

<pre><code>echo "The following error occurred: " . $e-&gt;getMessage();
</code></pre>

<p>}
```</p>

<h2>Minor things</h2>

<p>We also polished some code, refactored stuff and added some tests (unit and
integration ones).</p>

<p>For instance, when using the <code>record</code> API, you can retrieve the daystamp of the
response as <code>DateTime</code> object:</p>

<p>``` php retrieving the daystamp as an object or a string
&lt;?php</p>

<p>use Robowhois\Robowhois;</p>

<p>$robowhois = new Robowhois('INSERT-YOUR-API-KEY-HERE');</p>

<p>if ($whois = $robowhois->whoisRecord('google.com')) {
  // returns a DateTime object
  echo $whois->getDaystamp();</p>

<p>  // formats the DateTime
  echo $whois->getDaystamp()->format('Y-m-d');</p>

<p>  // returns a string
  echo $whois->getDaystamp(true);
}
```</p>

<p>You can download the <a href="https://github.com/robowhois/robowhois-php/tree/0.8.0">latest tag</a>
of the library (currently <code>0.8.0</code>) and start using it: the <a href="https://github.com/robowhois/robowhois-php/blob/master/README.md">README</a>
exhaustively explains what you can do with this small client, and some
<a href="https://github.com/robowhois/robowhois-php/tree/master/sample">samples</a>
are provided under the <code>sample</code> directory.</p>
]]></content>
  </entry>
  
</feed>
