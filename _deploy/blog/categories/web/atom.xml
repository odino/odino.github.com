<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Category: Web | Alessandro Nadalin]]></title>
  <link href="http://odino.org/blog/categories/web/atom.xml" rel="self"/>
  <link href="http://odino.org/"/>
  <updated>2014-06-30T00:07:06+04:00</updated>
  <id>http://odino.org/</id>
  <author>
    <name><![CDATA[Alessandro Nadalin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Increase Mobile Performances by Implementing Transparent Redirects]]></title>
    <link href="http://odino.org/increase-mobile-performances-by-implementing-transparent-redirects/"/>
    <updated>2014-03-03T17:58:00+04:00</updated>
    <id>http://odino.org/increase-mobile-performances-by-implementing-transparent-redirects</id>
    <content type="html"><![CDATA[<p>Most of you are aware that one of the biggest problems while
developing mobile apps / websites, is the reduced bandwidth / connectivity
that the user has on his phone compared to traditional devices
connected to a solid WiFi or via cable.</p>

<p>How can you actually improve connectivity to the app? There are tricks to
improve performances, like <strong>transparent redirects</strong>.</p>

<!-- more -->


<h2>An heavy stack</h2>

<p>The stack on which your web apps will run will be heavy, by definition:
HTTP wasn&rsquo;t built with performances in mind<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>, and you might
want to add SSL, to provide your users with an additional security layer,
on top of that.</p>

<p>Now imagine your users requesting <code>GET /my-page</code> and you serving a redirect:</p>

<p><code>
HTTP/1.1 302 Moved temporarily
Host: example.org
Location: /my-new-page
</code></p>

<p>Even though, semantically, this is a logic operation,
it doesnt work well with the demand of great performances, since the user will need to
make nother roundtrip connection to get the new resource</p>

<h2>Transparent redirects</h2>

<p>What you can do, instead, is to serve a <em>transparent redirect</em> to the user, so that there is
no additional request to be made:</p>

<p>```
HTTP/1.1 200 Ok
Host: example.org
Transparent-Status-Code: 302 Moved temporarily
Transparent-Location-Location: /my-new-page</p>

<p>&lt;html &hellip;
```</p>

<p>In this way the client already has all the information it needs in
order to show the user the data he requested.</p>

<p>Even better: if you are serving contents from an API you can have your main
application handle the transparent redirect with the <code>history.pushState(...)</code>
API of <code>HTML5</code>.</p>

<h2>Current implemetation</h2>

<p>At the moment you will have to be cautious with it, as current browsers (or, at least,
a few of them) treat non <code>2XX</code> status codes as errors, thing that becomes tricky when you
handle things with JS callbacks / promises:</p>

<p>```
http.get(&hellip;, onSuccess, onError)</p>

<p>// the browser will call onError if the response status code is
// different than 2XX
```</p>

<p>I remember banging our heads over our desks here at the <a href="https://www.namshi.com">Namshi</a>
office, so we decided to use a very simple approach, using <strong>custom headers</strong> with a <code>200 Ok</code>:
if the response ends up in a redirect, we use 2 custom headers (<code>N-Status-Code</code> and <code>N-Location</code>),
intercept the response in our frontends and do our trick with <code>#pushState(...)</code>.</p>

<h2>Future considerations</h2>

<p>It would be nice if, one day, the HTTP spec would be able to incorporate this
behavior natively, with a status code like <code>308 Transparent redirect</code>, so that browser will be able to
automatically update the state of the apps and the user wouldn&rsquo;t need to wait for another roundtrip
connection to see the data they have been requesting, no matter the location.</p>

<p><div class="footnotes">
<span>
Notes
</span>
	<ol>
		<li id='fn:1'>We're talking about  raw performances, scalability is another matter, which is implemented almost flawlessy in the protocol <a href='#fnref:1' rev='footnote'>â†©</a></li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[6 Takeways From the Second Day of ConFoo]]></title>
    <link href="http://odino.org/6-takeways-from-the-second-day-of-confoo/"/>
    <updated>2014-02-27T18:27:00+04:00</updated>
    <id>http://odino.org/6-takeways-from-the-second-day-of-confoo</id>
    <content type="html"><![CDATA[<p>Today it was an interesting day here at ConFoo, and I&rsquo;ve
seen some good content dealing with web performances.</p>

<!-- more -->


<h2>Don&rsquo;t pollute domain models with specifications</h2>

<p><img class="right" src="/images/odino-confoo-2.jpg"></p>

<p>During a very good talk I was waiting for since the conference started,
<a href="http://twitter.com/mathiasverraes">Mathias Verrase</a> has been talking
about DDD and domain models and has shown to the audience how you
should not pollute them with specifications.</p>

<p>The proposed approach introduces a bit more verbosity with the advantage
of having cleaner models that reflect your domain.</p>

<p>So, instead of having models knowing the business specification:</p>

<p><code>
$customer-&gt;isPremium();
</code></p>

<p>you might want to refactor the code in a way that makes the
information as part of a business rule (hence, the <em>specification</em>),
that will accept a subject in order to verify that it actually
satisfies the rule / specification:</p>

<p><code>
$premiumSpecification-&gt;isSatisfiedBy($customer);
</code></p>

<h2>Optimizing images</h2>

<p><a href="http://imageoptim.com/">Imageoptim</a> is a very handy tool to losslessly compress images
and save bandwidth while serving them.</p>

<h2>gzip_static</h2>

<p>Instead of gzipping each and every assets <em>on-the-fly</em> you can tell <code>nginx</code>
to look for a previously gzipped version of the same file.</p>

<p>Compile <code>nginx</code> with this option enabled:</p>

<p><code>
./configure --with-http_gzip_static_module
</code></p>

<p>and then turn it on:</p>

<p><code>
gzip_static on;
</code></p>

<h2>Turn off tcp_slow_start_after_idle</h2>

<p><a href="http://www.lognormal.com/blog/2012/09/27/linux-tcpip-tuning/">Turning off window resizing</a>
(or&hellip; downsizing) after a slow start will help clients who take a while
to send back packets over the same, slow, TCP connection, as it doesn&rsquo;t resize
the TCP window contrary to what the system would do by default.</p>

<h2>Pagespeed at nginx level</h2>

<p>I already knew about <a href="https://github.com/pagespeed/ngx_pagespeed">ngx_pagespeed</a>
but totally forgot to use it :)</p>

<h2>More RUM monitoring tools</h2>

<p>I&rsquo;ve come across <a href="https://mpulse.soasta.com">mpulse</a> which is another RUM platform.</p>

<p>Even though their UI is a bit old school, they&rsquo;re (of course) real-time and provide
valuable insides, like pageload times and DOM rendering performances.</p>

<p>Sign up on their site, it&rsquo;s free up to 1M visits a month!</p>

<h2>All in all</h2>

<p>Good day for optimizations and delivering a faster experience to your users, looking
forward to my third day &ndash; with my last talk, about SOAs &ndash; in this cold land!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[7 Takeways From the First Day of ConFoo]]></title>
    <link href="http://odino.org/7-takeways-from-the-first-day-of-confoo/"/>
    <updated>2014-02-26T20:34:00+04:00</updated>
    <id>http://odino.org/7-takeways-from-the-first-day-of-confoo</id>
    <content type="html"><![CDATA[<p>Today it was the first day of ConFoo here in Montreal and,
as usual, a conference is always good to wrap your head around
solutions, different standpoints and discussions with other
nerds :)</p>

<!-- more -->


<p><img class="right" src="/images/odino-confoo.jpg"></p>

<h2>Websockets to the rescue</h2>

<p>I&rsquo;ve come to learn about <a href="http://en.wikipedia.org/wiki/WebSocket">WebSocket</a>
quite a while ago but I honestly never found a practical application for our
architecture: nonetheless, in one of the talks it was <a href="http://blog.arungupta.me/2014/02/rest-vs-websocket-comparison-benchmarks/">compared to REST</a>
in a context where multiple API calls are made, and the idea of re-using the same
TCP connection is pretty handy at that point.</p>

<p>For sure, things like <a href="http://stackoverflow.com/questions/12103628/spdy-as-replacement-for-websockets">SPDY</a>
are probably already enough from that point of view, but that&rsquo;s not a valid excuse
for not digging deeper into the WS specification.</p>

<h2>Patterns of batch processing</h2>

<p>During the same talk, <a href="https://twitter.com/arungupta">Arun Gupta</a> spoke about
<a href="https://blogs.oracle.com/arungupta/entry/batch_applications_in_java_ee">JSR 352</a>,
a specification for batch processing introduced in Java EE7.</p>

<p>It was really interesting as the specification is quite &ldquo;obvious&rdquo; but anyhow
efficient, as it structures batch jobs following a few rules:</p>

<ul>
<li>every job must process a specific number of items to process</li>
<li>it is divided in steps</li>
<li>each step is then again divided into 3 different sub-steps

<ul>
<li>reading the content of the item (<code>ItemReader</code>)</li>
<li>processing it, executing transformation and any kind of magic over that content (<code>ItemProcessor</code>)</li>
<li>writing the processed content <em>somewhere</em> (<code>ItemWriter</code>)</li>
</ul>
</li>
</ul>


<p>Dividing batches into jobs of a limited number of items is a golden rule (and I would say
your number should be as close to 1 as possible), while the structure that the JSR proposes
is very clean.</p>

<h2>Xamarin</h2>

<p>This tool might be what you were looking for if you&rsquo;re into mobile development:
its aim is to write code once (in C#) that gets <strong>converted to native code</strong> for both
IOS and Android.</p>

<p>If you had to write an app twice, because you needed to go native, you might really
wanna <a href="https://xamarin.com/">have a look at it</a> as, from what I heard, it might
really simplify your life.</p>

<h2>AppDynamics</h2>

<p>My bad for not being aware of <a href="http://www.appdynamics.com/">AppDynamics</a>, but we&rsquo;re pretty
happy with one of their competitors (<a href="http://newrelic.com/">NewRelic</a>) :)</p>

<p>AD is an <strong>application performance management</strong> platform that, just like NR, provides agents for
various platforms in order to collect metrics and reports from the stuff that runs on your
production servers: definitely worth a look, at least to understand the differences between
these guys and NewRelic.</p>

<h2>Detach DOM elements while transforming them</h2>

<p>Switching to something more browser-oriented, I found out about a very simple but
effective tecnique to optimize browser rendering performances when working with DOM
elements: instead of applying a bunch of transformations on a visible element you can
simply hide it, apply them and then show the element again, so that the browser
won&rsquo;t have to repaint and reflow at every transformation but only when you eventually
make the element visible again.</p>

<p>Another way to implement the same tecnique is to clone the element (so that we are actually
just working with a <strong>virtual DOM node</strong>), apply the transformations to that element and then
replacing the existing one by calling <code>parent.innerHtml(virtualElement)</code>.</p>

<p>Pretty simple but much valuable!</p>

<h2>Optimize DOM animations</h2>

<p>Another way to optimize browser performance upon rendering is to execute animations
on elements with an absolute or fixed position.</p>

<p>Why? Again, because then the browser doesn&rsquo;t have to reflow the whole DOM.</p>

<h2>Lodash</h2>

<p>A very <a href="http://lodash.com/">handy JS library</a> that seems to be <a href="http://lodash.com/benchmarks">way faster</a>
than underscore. It is now considered a <a href="http://stackoverflow.com/questions/13789618/differences-between-lodash-and-underscore">superset of underscore</a>
and you might want to look into using it from now on, in place of its predecessor.</p>

<h2>All in all&hellip;</h2>

<p>It was a fairly good day and my <a href="/orientdb-the-fastest-document-based-graph-database/">presentation about OrientDB</a>
went pretty well, can&rsquo;t wait for tomorrow!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The State of HTTP/2.0]]></title>
    <link href="http://odino.org/the-state-of-http-slash-2-dot-0/"/>
    <updated>2012-10-15T23:45:00+04:00</updated>
    <id>http://odino.org/the-state-of-http-slash-2-dot-0</id>
    <content type="html"><![CDATA[<p>With a few days of delay I&rsquo;m here reporting and commenting
the last <strong>revolutions</strong> about the protocol of the web,
its upcoming groundbreaking new version and its state.</p>

<!-- more -->


<p>A few days back <a href="http://www.mnot.net/">Mark Nottingham</a> announced that the
group is <a href="https://twitter.com/mnot/status/253175410383278081">officially working on the new draft of <code>HTTP/2.0</code></a>:
even though rumors about the shape of this new version were
going on since a couple years, this <strong>official</strong>
news brings some fresh hope on the topic.</p>

<p>As the HTTP protocol was always directly influenced
by great minds (<a href="http://en.wikipedia.org/wiki/Tim_Berners-Lee">Tim Berners-Lee</a> and <a href="http://en.wikipedia.org/wiki/Roy_Fielding">Roy Fielding</a>, just
to mention a couple names) when I first heard about
Mark taking the responsability to publish <code>HTTP/2.0</code> I
was pretty sure something great would have come out of
his mind.</p>

<p>I wasn&rsquo;t wrong.</p>

<p>It&rsquo;s been 13 years since HTTP doesnt see a major change
in its specification (recent changes are the addition of
the <code>PATCH</code> method, for example, but we&rsquo;re talking about
<strong>minor</strong> stuff) and SPDY &ndash; a new protocol created by Google &ndash;
came out in the recent history of the web with a disruptive
force.</p>

<p>HTTP needed something.</p>

<h2>SPDY</h2>

<p>But before having a look at what <code>HTTP/2.0</code> will look like,
let&rsquo;s mention the good things that SPDY brings on the table:</p>

<ul>
<li>prioritization: it allows to send different requests and
tell the server to prioritize some of them</li>
<li>multiplexing: allows parallel requests and asynchronous
responses, unlike <em>pipelining</em> which is bound to multiple
requests/responses at the same time</li>
<li>server push: servers can now push resources to the client
without them having to ask for</li>
<li>better performances: extended compression is one of the
key FTW of SPDY</li>
</ul>


<p>But there is one things that SPDY doesn&rsquo;t change at all:
the <strong>interface</strong> between the machines.</p>

<p>As recognized worldwide, the HTTP protocol was an almost
perfect example of M2M interface which allows servers
and clients to follow DAPs (<em>domain-application protocols</em>)
according to a loosely coupled interface &ndash; the protocol itself,
with its verbs, semantics and workflows<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.</p>

<p>So SPDY, recognizing the perfection of the contract that HTTP
puts among clients and servers, isn&rsquo;t a real new protocol, it&rsquo;s
a <strong>better implementation of the same interface</strong>.</p>

<h2>HTTP/2.0 is an evolution of an evolution</h2>

<p>No wonder, then, in reading the words of Nottingham, as, after
all, he &ldquo;just&rdquo; announced that <a href="http://lists.w3.org/Archives/Public/ietf-http-wg/2012OctDec/0004.html"><code>HTTP/2.0</code> will be <strong>based on SPDY</strong></a>:
a great news that is basically telling you the &ldquo;don&rsquo;t reinvent the wheel&rdquo;
principle is even applied at the foundation of the web<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>.</p>

<p>The layers will definitely be different, but, again, I think
that having a newer version of our beloved protocol, based on a
specification which already improves it and adds tons of new and
interesting features, is going to be <strong>a game-changer for web
applications</strong>.</p>

<p>Will we see <code>HTTP/2.0</code> being deployed with multiplexing, server push,
prioritization and extended compression next year?</p>

<p><div class="footnotes">
<span>
Notes
</span>
	<ol>
		<li id='fn:1'>No wonder why Roy Fielding, after having heavily influenced the HTTP protocol and the Apache ecosystem, came out with REST, an architectural style meant for long-living and scalable architectures <a href='#fnref:1' rev='footnote'>â†©</a></li><li id='fn:2'>So, think about it, why do you need to re-write huge portions of code when better FOSS is out there? <a href='#fnref:2' rev='footnote'>â†©</a></li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Hope Is That IE Will Drown in 2 Years]]></title>
    <link href="http://odino.org/the-hope-is-that-ie-will-drown-in-2-years/"/>
    <updated>2012-08-03T18:27:00+04:00</updated>
    <id>http://odino.org/the-hope-is-that-ie-will-drown-in-2-years</id>
    <content type="html"><![CDATA[<p>More than a decade ago the first <a href="http://en.wikipedia.org/wiki/Browser_wars">browser war</a>
made his victim: it was Netscape, which
couldn&rsquo;t compete with Microsoft and its
IE: after long time, it&rsquo;s time for this
decadent winner to retreat.</p>

<!-- more -->


<p>Today I was spending a few minutes on
<a href="http://caniuse.com/">IcanUse</a>, a brilliant service which
gives you informations on features implemented
by modern web browsers: not surprisingly,
IE is a total disappointment.</p>

<p>So I decided to take a look at what the <strong>current</strong> browsers
are implementing, retrieving some nice
charts to compare them against each other:</p>

<p><img class="center <a" src="href="https://chart.googleapis.com/chart?cht=bvs&amp;chco=4D89F9,C6D9FD&amp;chd=t:31,83,94,75,65|100,100,100,100,100&amp;chxl=0:|IE|Firefox|Chrome|Safari|Opera&amp;chs=750x400&amp;chxt=x,y&amp;chbh=120&amp;chtt=Implementation%20of%20JS-related%20feature">https://chart.googleapis.com/chart?cht=bvs&amp;chco=4D89F9,C6D9FD&amp;chd=t:31,83,94,75,65|100,100,100,100,100&amp;chxl=0:|IE|Firefox|Chrome|Safari|Opera&amp;chs=750x400&amp;chxt=x,y&amp;chbh=120&amp;chtt=Implementation%20of%20JS-related%20feature</a>"></p>

<p><img class="center <a" src="href="https://chart.googleapis.com/chart?cht=bvs&amp;chco=4D89F9,C6D9FD&amp;chd=t:59,88,97,94,97|100,100,100,100,100&amp;chxl=0:|IE|Firefox|Chrome|Safari|Opera&amp;chs=750x400&amp;chxt=x,y&amp;chbh=120&amp;chtt=Implementation%20of%20SVG-related%20feature">https://chart.googleapis.com/chart?cht=bvs&amp;chco=4D89F9,C6D9FD&amp;chd=t:59,88,97,94,97|100,100,100,100,100&amp;chxl=0:|IE|Firefox|Chrome|Safari|Opera&amp;chs=750x400&amp;chxt=x,y&amp;chbh=120&amp;chtt=Implementation%20of%20SVG-related%20feature</a>"></p>

<p><img class="center <a" src="href="https://chart.googleapis.com/chart?cht=bvs&amp;chco=4D89F9,C6D9FD&amp;chd=t:63,82,89,88,73|100,100,100,100,100&amp;chxl=0:|IE|Firefox|Chrome|Safari|Opera&amp;chs=750x400&amp;chxt=x,y&amp;chbh=120&amp;chtt=Implementation%20of%20CSS-related%20feature">https://chart.googleapis.com/chart?cht=bvs&amp;chco=4D89F9,C6D9FD&amp;chd=t:63,82,89,88,73|100,100,100,100,100&amp;chxl=0:|IE|Firefox|Chrome|Safari|Opera&amp;chs=750x400&amp;chxt=x,y&amp;chbh=120&amp;chtt=Implementation%20of%20CSS-related%20feature</a>"></p>

<p><img class="center <a" src="href="https://chart.googleapis.com/chart?cht=bvs&amp;chco=4D89F9,C6D9FD&amp;chd=t:40,71,94,80,80|100,100,100,100,100&amp;chxl=0:|IE|Firefox|Chrome|Safari|Opera&amp;chs=750x400&amp;chxt=x,y&amp;chbh=120&amp;chtt=Implementation%20of%20HTML5-related%20feature">https://chart.googleapis.com/chart?cht=bvs&amp;chco=4D89F9,C6D9FD&amp;chd=t:40,71,94,80,80|100,100,100,100,100&amp;chxl=0:|IE|Firefox|Chrome|Safari|Opera&amp;chs=750x400&amp;chxt=x,y&amp;chbh=120&amp;chtt=Implementation%20of%20HTML5-related%20feature</a>"></p>

<p>It&rsquo;s not a surprise that IE9 is the worst browser out there,
but this made me think about how long it will be
a competitor in the market.</p>

<p>IE is slowly dying, <a href="http://upload.wikimedia.org/wikipedia/commons/8/86/Usage_share_of_web_browsers_%28Source_StatCounter%29.svg">we all know</a>:
just as netscape, it&rsquo;s not able to face competitors
pushing hard to deliver the best
web-browsing experience.</p>

<p>It will take a few months, maybe years, to see
IE leaving the market kicked out by the yougsters,
nontheless it will be a great day for the
internet: the day that who fights for the
innovation will definitely overwhelm who
sits on top of his past, glorious days.</p>
]]></content>
  </entry>
  
</feed>