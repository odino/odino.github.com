<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ESI | Alessandro Nadalin]]></title>
  <link href="http://www.odino.org/blog/categories/esi/atom.xml" rel="self"/>
  <link href="http://www.odino.org/"/>
  <updated>2012-10-16T00:23:35+03:00</updated>
  <id>http://www.odino.org/</id>
  <author>
    <name><![CDATA[Alessandro Nadalin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Edge Side Includes, how to spare terabytes every day]]></title>
    <link href="http://www.odino.org/edge-side-includes-how-to-spare-terabytes-every-day/"/>
    <updated>2012-01-20T14:15:00+03:00</updated>
    <id>http://www.odino.org/edge-side-includes-how-to-spare-terabytes-every-day</id>
    <content type="html"><![CDATA[<p>I have an idea for an RFC that I would like to write, based on some thoughts I
had in the last months.</p>

<!-- more -->


<p>Lots of you probably know <a href="http://www.w3.org/TR/esi-lang">ESI</a>, the specification
written by <a href="http://www.akamai.com/">Akamai</a> and <a href="http://www.oracle.com/index.html">Oracle</a>
back in 2001.</p>

<p>It basically consists in a XML dialect which lets <a href="http://en.wikipedia.org/wiki/Reverse_proxy">reverse proxies</a>
(eg. <a href="https://www.varnish-cache.org/">Varnish</a>) cache fragments of your webpages
in order not to hit your application for output fragments that can be re-used
across many clients.</p>

<p>``` html A webpage including an ESI tag
<html>
  <head></p>

<pre><code>...
</code></pre>

<p>  </head>
  <body></p>

<pre><code>...

pile of HTML

...

&lt;esi:include src="http://example.com/footer.html" /&gt;
</code></pre>

<p>  </body>
</html>
```</p>

<p>A <strong>really good presentation</strong> about ESI is <a href="http://www.slideshare.net/fabpot/caching-on-the-edge/99">Caching On The Edge</a>
, by <a href="http://fabien.potencier.org/">Fabien Potencier</a>.</p>

<h2>ESI's context</h2>

<p>ESI is a really great technology that recently gained hype, in my ecosystem (PHP),
thanks to the Symfony2 architecture, fully embracing the HTTP specification:
consider that Symfony2 has <strong>no application-level caching layer</strong>, so everything
is done with the HTTP cache, and ESI is the solution for really dynamic webpages.</p>

<p>...but who's responsible of processing ESI fragments? Digging some more, an esi
processor can be a <a href="http://rack.rubyforge.org/">middleware in your architecture</a>
, a reverse proxy or a <a href="http://symfony.com/doc/2.0/book/http_cache.html#using-edge-side-includes">software component</a>
; basically any kind of software implementing the ESI specification.</p>

<p>But hey, all this kind of things are softwares that lie on the server side.</p>

<h2>A different approch</h2>

<p>I was thinking about pushing ESI to the client side:</p>

<p>``` html The response retrieved with the browser would generate lots of subrequests
<html>
  <head></p>

<pre><code>...
</code></pre>

<p>  </head>
  <body></p>

<pre><code>&lt;esi:include src="http://example.com/header.html" /&gt;
&lt;esi:include src="http://example.com/navigation.html" /&gt;
&lt;esi:include src="http://example.com/foo.html" /&gt;
&lt;esi:include src="http://example.com/bar.html" /&gt;
&lt;esi:include src="http://example.com/footer.html" /&gt;
</code></pre>

<p>  </body>
</html>
```</p>

<p>Seems a bad idea, since, if the browser is capable to merge different fragments, retrieved
with different HTTP requests, for assembling a really simple webpage you would
need to hit your application much more times than with a single request, so there
is no real need to ask for ESI support in clients, in this scenario.</p>

<p>But there's a <em>real-world</em> application of ESI on the client side that should
<strong>save lot of traffic</strong> over the internet and <strong>lot of bandwith</strong>.</p>

<p><strong>Rarely-changing output fragments</strong>.</p>

<p>A RCOF - sorry for this bad acronym - is everything that can be <strong>cached for
relatively long time</strong> (talking more about days than hours), like Facebook's
footer or your google analytics JS code.</p>

<p><img class="center" src="/images/fb.footer.png"></p>

<h2>The use-case</h2>

<p>Why should we always transport Facebook's footer over the network?</p>

<p>We don't need it: once the user landed on his profile page, as he jumps
to other FB pages, <strong>the footer it's always the same</strong>, and <strong>should be retrieved from
the client's cache</strong> instead of being sent over the network.</p>

<p>This means that once you send your response</p>

<p>``` html Your profile page
<body></p>

<pre><code>&lt;h1&gt;My Profile!&lt;/h1&gt;

...

&lt;esi:include src="http://example.com/footer.html" /&gt;
</code></pre>

<p></body>
```</p>

<p>the browser makes an additional request to retrieve the footer and then, on subsequent
requests, also <strong>on different webpages</strong>, it can use the cached fragment:</p>

<p>``` html Facebook help center
<body></p>

<pre><code>&lt;h1&gt;Hi n00b, how can we help you?&lt;/h1&gt;

...

&lt;esi:include src="http://example.com/footer.html" /&gt;
</code></pre>

<p></body>
```</p>

<p>because it recognizes that fragment has been already retrieved once you requested
the "Your profile" page.</p>

<p>You probably don't get the great aspect of ESI on the client side, so <strong>carefully
read the next chapter</strong>.</p>

<h2>A few numbers</h2>

<p>Facebook's footer is about <code>1.4k</code>:</p>

<p>``` html</p>

<div id="pageFooter" data-referrer="page_footer">
    <div id="contentCurve"></div>
    <div class="clearfix" id="footerContainer">
        <div class="mrl lfloat" role="contentinfo">
            <div class="fsm fwn fcg">
                <span> Facebook © 2012</span> · <a rel="dialog" href="http://www.odino.org/ajax/intl/language_dialog.php?uri=http%3A%2F%2Fwww.facebook.com%2Fpress%2Finfo.php%3Fstatistics" title="Use Facebook in another language.">English (US)</a>
            </div>
        </div>
        <div class="navigation fsm fwn fcg" role="navigation">
            <a href="http://www.facebook.com/facebook" accesskey="8" title="Read our blog, discover the resource center, and find job opportunities.">About</a> · <a href="http://www.facebook.com/campaign/landing.php?placement=pf&amp;campaign_id=402047449186&amp;extra_1=auto" title="Advertise on Facebook.">Advertising</a> · <a href="http://www.facebook.com/pages/create.php?ref_type=sitefooter" title="Create a Page">Create a Page</a> · <a href="http://developers.facebook.com/?ref=pf" title="Develop on our platform.">Developers</a> · <a href="http://www.facebook.com/careers/?ref=pf" title="Make your next career move to our awesome company.">Careers</a> · <a href="http://www.facebook.com/privacy/explanation" title="Learn about your privacy and Facebook.">Privacy</a> · <a href="http://www.facebook.com/legal/terms?ref=pf" accesskey="9" title="Review our terms of service.">Terms</a> · <a href="http://www.facebook.com/help/?ref=pf" accesskey="0" title="Visit our Help Center.">
                Help
            </a>
        </div>
    </div>
</div>


<p>```</p>

<p>while an ESI fragment is <code>0.5k</code>:</p>

<p><code>xml
&lt;esi:include src="http://facebook.com/footer" /&gt;
</code></p>

<p>Calculating how much traffic the internet needs to sustain with the 2
approaches, traditional and ESIsh, is trivial:</p>

<ul>
<li>Facebook has something more than <a href="http://www.facebook.com/press/info.php?statistics">400M daily users</a></li>
<li>it has <a href="http://www.alexa.com/siteinfo/facebook.com">12 pageviews per user</a></li>
<li>retrieving the footer the traditional way, we add <code>1.5k</code> of data each users' request</li>
<li>retrieving it with ESI, we add <code>1.5k</code> of data for the first users' request,
<code>0.5k</code> for the consequent ones</li>
</ul>


<p>Then we can extrapolate some data:</p>

<p>``` html Facebook daily pageviews
daily users * avg pageviews</p>

<p>400M * 12</p>

<p>4800M
```</p>

<p>``` html Data traffic without client-side ESI
daily pageviews * footer fragment weight</p>

<p>4800M * 1.4k</p>

<p>~6.25 terabytes
```</p>

<p>``` html Data traffic with client-side ESI
(first requests * footer fragment weight) + ((daily pageviews - first pageviews) * ESI tag weight)</p>

<p>(400M * 1.4k) + ((4800M - 400M) * 0.5k)</p>

<p>~2.57 terabytes
```</p>

<p>So, just for the footer, <strong>facebook could decrease the internet traffic by 2 and a
half terabytes <em>per day</em></strong>, just looking at its footer.</p>

<p>It's obvious that <strong>this approach rewards facebook</strong> (it processes less stuff on his
side, whether it uses a reverse proxy as gateway cache or not), ISPs and the final
user, who's taking advantage of a (more) <strong>lean network</strong>.</p>

<p>If you enlarge your vision, think about sites like Google, LinkedIN, twitter and all
those web applications which send <strong>useless pieces of HTTP responses over the
internet</strong>.</p>

<h2>Client side ESI invalidation</h2>

<p>If you are scared about invalidating this kind of cache, the solution would be
really easy:</p>

<p>``` html Facebook before updating the footer
<html>
  <head></p>

<pre><code>...
</code></pre>

<p>  </head>
  <body></p>

<pre><code>...

pile of FB code

...

&lt;esi:include src="http://example.com/footer.html?v=1" /&gt;
</code></pre>

<p>  </body>
</html>
```</p>

<p>``` html Facebook after updating the footer
<html>
  <head></p>

<pre><code>...
</code></pre>

<p>  </head>
  <body></p>

<pre><code>...

pile of FB code

...

&lt;esi:include src="http://example.com/footer.html?v=2" /&gt;
</code></pre>

<p>  </body>
</html>
```</p>

<p>Note the <strong>revision change in the ESI tag</strong>, something we already, daily, use for
managing <a href="http://muffinresearch.co.uk/archives/2008/04/08/automatic-asset-versioning-in-django/">static assets' caching</a>.</p>

<h2>This is not a panacea</h2>

<p>I don't wanna sound arrogant proposing this tecnique, but I would really like to
<strong>get feedbacks about such this kind of approach</strong>: as stated, this can be a
great plus for the global network but its <strong>limited to RCOF</strong>.</p>

<p>The only aspect I haven't considered yet is the second HTTP request the browser
needs to do to retrieve the fragment, once, parsing the response, it finds an ESI
tag: since I really don't know how to calculate how it affects the network,
so any kind of help would be appreciated.</p>

<p>The aim of this post is to consider if <strong>browser vendors should really start thinking
about implementing ESI processors</strong> directly in their products, for a better, faster
and leaner web.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some common questions about Edge Side Includes]]></title>
    <link href="http://www.odino.org/some-common-questions-about-edge-side-includes/"/>
    <updated>2011-05-30T15:07:00+03:00</updated>
    <id>http://www.odino.org/some-common-questions-about-edge-side-includes</id>
    <content type="html"><![CDATA[<p>After my <a href="http://www.slideshare.net/odino/rest-in-a-mobile-peace-whymca-05212011">REST in (a mobile) peace</a> talk at the WHYMCA in Milan, 2 weeks ago, I was surrounded by a few developers trying better understand how does Edge Side Includes behave: after I realized that some concepts are not so "standard", here's a parade of little things to know about <a href="http://en.wikipedia.org/wiki/Edge_Side_Includes">ESI</a>.</p>

<!-- more -->


<h2>Is it a single-construct language?</h2>

<p>No: although the most used tag is the include one:</p>

<p><code>xml Typical ESI tag
&lt;esi:include src="http://www.example.net" /&gt;
</code></p>

<p>the ESI specification has a <a href="http://www.w3.org/TR/esi-lang">plethora of commands</a>, while the Oracle website has a specific section on more <a href="http://download.oracle.com/docs/cd/B15897_01/caching.1012/b14046/esi.htm">detailed insights</a>.</p>

<h2>If I install Varnish and use ESI, do I need to do something specific?</h2>

<p>No: after you set up Varnish in order to do <a href="http://www.varnish-cache.org/trac/wiki/ESIfeatures">ESI processing</a>, everything will magically happen :)</p>

<h2>Do I need, in my architecture, an ESI processor?</h2>

<p>Yes, otherwise the ESI tags won't be replaced.</p>

<p>Luckily, Varnish and Squid do it for free since years: the RAD framework for PHP Symfony2 implements a <a href="http://www.odino.org/343/symfony2-http-cache-the-good-parts-of-both-of-em">custom-made reverse proxy</a> and something is moving also in the <a href="https://github.com/ramsingla/rack-rsi">Ruby ecosystem</a>.</p>

<h2>Does it work with modern browsers?</h2>

<p>No: since ESI never got hype browser vendors never thought about implementing the specification.</p>

<p>The topic is also subject of <a href="/339/esi-upside-down-will-the-client-be-happier">various arguments</a>.</p>

<h2>Does ESI invalidate my output format?</h2>

<p>No: since ESI processors ( like Varnish ) work on the server side, before sending the response to the clients esi tags get replaced with the actual content.</p>

<h2>Does it work with HTML?</h2>

<p>Well, the specification works regardless the format of your response: it can be application/xml, json, html, a custom media type...</p>

<h2>How do I avoid my middleware to look for ESI tags in every response?</h2>

<p>Parsing responses, in order to look for ESI tags, is expensive, we all know.</p>

<p>In order to let your ESI processor ignore responses not containing ESI tags you can specify a declination of your content type:</p>

<p><code>bash HTTP response with profile parameter in the media type
HTTP/1.1 200 OK
Content-Type: application/xhtml+xml;profile=esi
</code></p>

<p>and make your processor checking this <code>profile</code> attribute.</p>

<p>Unfortunately, it seems that only the <code>application/xhtml+xml</code> <a href="http://www.ietf.org/rfc/rfc3236.txt">supports the <code>profile</code> attribute</a>, but you can "hack" the media type of your needs and make it support it, since you are working on the server side, without sending non-standardized media type descriptions over the internet.</p>

<h2>How does my application know if it can send ESI tags or not?</h2>

<p>There are 2 common scenarios:</p>

<ul>
<li>when a middleware supports the ESI specification, and your application can send a response with ESI tags</li>
<li>when you have no ESI processors in your architecture, and your application should assemble a single whole response</li>
</ul>


<p>In order to take this decision a custom HTTP header is used: <code>Surrogate-Capability</code>, which has been introduced in the <a href="http://www.w3.org/TR/edge-arch">edge side architectures</a> specification.</p>

<h2>Is ESI a new technology?</h2>

<p>10 years old, baby :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Real-time scaling: when NoSQL almost wins, HTTP almost wins, and the customer smiles]]></title>
    <link href="http://www.odino.org/real-time-scaling-when-nosql-almost-wins-http-almost-wins-and-the-customer-smiles/"/>
    <updated>2011-05-06T15:42:00+03:00</updated>
    <id>http://www.odino.org/real-time-scaling-when-nosql-almost-wins-http-almost-wins-and-the-customer-smiles</id>
    <content type="html"><![CDATA[<p>There's a common goal that NoSQL and ESI share together: consistency.</p>

<p>Since <a href="http://www.slideshare.net/odino/http-cache-pug-rome-03292011/2">the web is inconsistent</a>, we should be able to find some hacks to make it more consistent and satisfy both us, reducing bandwidth, traffic and CPU load, and the end-user, decreasing the latency of our services.</p>

<!-- more -->


<h2>Edge Side Includes</h2>

<p>ESI is a specification written 10 years ago in order to let the reverse proxies being able to include <em>{insert media type here}</em> fragments in HTTP responses.</p>

<p>It's so useful because it let's you take advantage of HTTP's native caching specification without recurring to application caches for really dynamic pages.</p>

<p>An ESI tag is pretty straightforward:</p>

<p>``` xml
<html>
  <head>...</head>
  <body></p>

<pre><code>...
  &lt;esi:include src="http://www.odino.org/footer.html" /&gt;
...
</code></pre>

<p>  </body>
</html>
```</p>

<p>So, as you see, caching directives for webpages' fragments are now a matter of the protocol ( HTTP, in most cases ) and not of the application ( Symfony, DotNetNuke, Joomla, WordPress, Drupal, Django, Django REST framework, Ruby, Sinatra, ... ).</p>

<p>This is so awesome because:</p>

<ul>
<li>it lets you scale when really dynamic data needs to be sent over the network</li>
<li>you don't have to re-invent the wheel with your application's caching layer</li>
<li>caching directives are a matter of the protocol, thus, if you'll change your application, caching configuration won't change</li>
</ul>


<h2>NoSQL</h2>

<p>The NoSQL movement is really old, but has been highlighted in the last 2/3 years.</p>

<p>At the italian NoSQLday I listened a talk about Redis and another one about SQL antipatterns which helped me contextualizing this DBMS: a few of them are out there in order to help you increase your performances without recurring to a caching mechanism, having the possibility to <strong>really</strong> show really real-time data.</p>

<p>Most of them are so fast, damn.</p>

<h2>A common goal</h2>

<p>Since, as we see, a few players are pointing towards a more consistent web, we should assume that this is the way to drive tecnology through: organizations like Facebook have to need to scale to milions of users mantaining the appearance of a real-time service, and the more they reach their goals, the more our customers pretend to act like them.</p>

<p>In order to "<em>real-time scale</em>" you can use a technology born a decade ago or another one which is on everyone's lips since a couple years.</p>

<p>The choice is yours: tools are always tools, but the architecture's design is something we, only we, can manage.</p>
]]></content>
  </entry>
  
</feed>
