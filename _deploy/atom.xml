<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Alessandro Nadalin]]></title>
  <link href="http://odino.org/atom.xml" rel="self"/>
  <link href="http://odino.org/"/>
  <updated>2013-08-19T00:06:11+04:00</updated>
  <id>http://odino.org/</id>
  <author>
    <name><![CDATA[Alessandro Nadalin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[WiFi not connecting or being wonky on a Dell XPS in Ubuntu 13.04]]></title>
    <link href="http://odino.org/wifi-not-connecting-or-being-wonky-on-a-dell-xps-in-ubuntu-13-dot-04/"/>
    <updated>2013-08-18T23:51:00+04:00</updated>
    <id>http://odino.org/wifi-not-connecting-or-being-wonky-on-a-dell-xps-in-ubuntu-13-dot-04</id>
    <content type="html"><![CDATA[<p>Today, even though I come from a weekend
of barely sleeping, I decided, after an entire
day unable to connect to the WiFi of the office,
to try to fix this issue that seems to be affecting
the Dell XPS harder than other laptops.</p>

<!-- more -->


<p>After googling for a while and realizing that
even at home I got no luck with my wireless,
I decided to go on with my own usual solution,
which means <strong>downgrading the kernel or grub</strong>.</p>

<p>You can get a list of the <em>installables</em> from
any terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> dpkg -l 'linux-*' | sed '/^ii/!d;/'"$(uname -r | sed "s/\(.*\)-\([^0-9]\+\)/\1/")"'/d;s/^[^ ]* [^ ]* \([^ ]*\).*/\1/;/[0-9]/!d'</span></code></pre></td></tr></table></div></figure>


<p>And since I&rsquo;m currently using <code>3.8.0-27-generic</code>
I decided to give a slightly previous one a try;
let&rsquo;s edit grub:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo /etc/kernel/postrm.d/zz-update-grub 3.8.0-19-generic /boot/vmlinuz-3.8.0-19-generic</span></code></pre></td></tr></table></div></figure>


<p>This solved the issue, at least for me ;&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello US, I'm coming to San Francisco]]></title>
    <link href="http://odino.org/hello-us-im-coming-to-san-francisco/"/>
    <updated>2013-08-01T05:24:00+04:00</updated>
    <id>http://odino.org/hello-us-im-coming-to-san-francisco</id>
    <content type="html"><![CDATA[<p>At the end of August I will
be travelling to reach SF and
the <a href="http://cakefest.org/">CakeFest</a>, the annual
conference about
<a href="http://cakephp.org/">CakePHP</a>.</p>

<!-- more -->


<p>Funny thing is, I have two talks
and none of them deals with Cake, <strong>at all</strong> :)</p>

<p>I will be talking about the
evolution of Web Protocols, in
particular HTTP/2.0 and SPDY, in a
remake of the <a href="http://www.slideshare.net/odino/http-colon-slash-slash-the-end-of-the-road">talk I gave the IPC</a>,
in Mainz, last year.</p>

<p>My second talk will be a <em>new entry</em>, a
collection of tips, advices and tricks
in order to manage a SOA, learnt <strong>the hard
way</strong>.</p>

<p>If you are going to be around San Francisco
in the first days of Semptember, feel free to
ping me!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sending HipChat notifications in PHP]]></title>
    <link href="http://odino.org/sending-hipchat-notifications-in-php/"/>
    <updated>2013-07-19T14:20:00+04:00</updated>
    <id>http://odino.org/sending-hipchat-notifications-in-php</id>
    <content type="html"><![CDATA[<p>This morning I added a couple handlers to
<a href="https://github.com/namshi/notificator">Notificator</a>, one for
RabbitMQ and another for <a href="https://hipchat.com">HipChat</a>: in
this post I would like to show you how easy is to integrate
HipChat within your systems.</p>

<!-- more -->


<p>The handler takes advantage of the
<a href="https://github.com/hipchat/hipchat-php">PHP SDK</a> that the HipChat
team built, which is very, very good and
<a href="https://packagist.org/packages/hipchat/hipchat-php">available through packagist</a>.</p>

<p>First thing you will need to do, is to create an instance of a
notification manager and adding the handler to it, with
an HipChat client and the API token you can generate from the HipChat
admin interface:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Namshi\Notificator\Manager</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Namshi\Notificator\Notification\Handler\HipChat</span> <span class="k">as</span> <span class="nx">HipChatHandler</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">HipChat\HipChat</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Namshi\Notificator\Notification\HipChat\HipChatNotification</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$hipChatClient</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">HipChat</span><span class="p">(</span><span class="s1">&#39;YOUR_API_TOKEN_HERE&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$hipChatHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">HipChatHandler</span><span class="p">(</span><span class="o">%</span><span class="nx">hipChatClient</span><span class="p">);</span>
</span><span class='line'><span class="nv">$manager</span>      <span class="o">=</span> <span class="k">new</span> <span class="nx">Manager</span><span class="p">();</span>
</span><span class='line'><span class="nv">$manager</span><span class="o">-&gt;</span><span class="na">addHandler</span><span class="p">(</span><span class="nv">$hipChatHandler</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you only need to define a notification with a few, HipChat-specific,
properties and trigger it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$notification</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">HipChatNotification</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;YOLO!&#39;</span><span class="p">,</span> <span class="c1">// message</span>
</span><span class='line'>  <span class="s1">&#39;Alex&#39;</span><span class="p">,</span>  <span class="c1">// sender</span>
</span><span class='line'>  <span class="s1">&#39;room1&#39;</span><span class="p">,</span> <span class="c1">// name of the room you want this message to appear</span>
</span><span class='line'>  <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;hipchat_notify&#39;</span>            <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span> <span class="c1">// optional: should send notifications to everyone?</span>
</span><span class='line'>      <span class="s1">&#39;hipchat_color&#39;</span>             <span class="o">=&gt;</span> <span class="nx">HipChat</span><span class="o">::</span><span class="na">COLOR_GREEN</span><span class="p">,</span> <span class="c1">// optional: background color of the notification</span>
</span><span class='line'>      <span class="s1">&#39;hipchat_message_format&#39;</span>    <span class="o">=&gt;</span> <span class="nx">HipChat</span><span class="o">::</span><span class="na">FORMAT_TEXT</span><span class="p">,</span> <span class="c1">// optional: text or html</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$manager</span><span class="o">-&gt;</span><span class="na">trigger</span><span class="p">(</span><span class="nv">$notification</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The result is pretty self-explanatory:</p>

<p><img class="center" src="http://odino.org/images/hipchat-php.png"></p>

<p>Kind of the <a href="https://github.com/namshi/notificator/blob/master/examples/hipchat.php">same code</a>
is also available, as an example,
on the <a href="https://github.com/namshi/notificator">notificator repository</a>,
under the <a href="https://github.com/namshi/notificator/tree/master/examples">examples</a> folder.</p>

<p>The greatness of Notificator are its handlers, so if you feel
we should add another, useful handler, just shout out!
Even better, you can contribute to the project by sending
a <a href="https://github.com/namshi/notificator/pulls?direction=desc&amp;page=1&amp;sort=created&amp;state=closed">pull request</a>
like <a href="https://twitter.com/cirpo">Alessandro</a>,
<a href="https://twitter.com/pborreli">Pascal</a> and
<a href="https://twitter.com/cordoval">Luis</a> already did!</p>

<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>The sad truth is that capistrano has an hipchat gem/extension, but you cant really plug it the way you want (at least this happens to non-rubiers) <a href='#fnref:1' rev='footnote'>↩</a></li>
    </ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AB testing in PHP with namshi/ab]]></title>
    <link href="http://odino.org/ab-testing-in-php-with-namshi-slash-ab/"/>
    <updated>2013-07-13T14:27:00+04:00</updated>
    <id>http://odino.org/ab-testing-in-php-with-namshi-slash-ab</id>
    <content type="html"><![CDATA[<p>AB testing is a powerful tecnique that
lets you gather metrics about different
versions of a feature: it basically
consist into displaying a number of
different variations of it to your
users and tracking the results to see
which variation performed better.</p>

<p><img class="right" src="http://odino.org/images/ab-testing.jpg"></p>

<p>An example? In an e-commerce system,
you usually have an &ldquo;Add to cart&rdquo; button:
have you ever though about the impact that
single sentence has on your customers?
What would sound better, between &ldquo;Add to cart&rdquo;
and &ldquo;Buy now&rdquo;, for example? Copywriters
away, you want <strong>data</strong> to tell you that!</p>

<p>This is why AB testing is important:
you serve different versions of something,
and track the results to improve the
experience users have while using your
application: for example, Google benchmarked
<a href="http://gigaom.com/2009/07/09/when-it-comes-to-links-color-matters/">40 different shades of blue</a>
to find out how the rate of clickthrough
would be altered.</p>

<p>At <a href="http://en-ae.namshi.com">Namshi</a> we
decided to ease AB testing by creating a
very simple library that would let you generate
and manage tests in a very easy and practical
way: that&rsquo;s how <a href="https://github.com/namshi/ab">Namshi/AB</a>
was born.</p>

<!--   more -->


<h2>Installation</h2>

<p>You can install the library via composer,
as it&rsquo;s available on <a href="https://packagist.org/packages/namshi/ab">packagist</a>.</p>

<p>Then include it, specifying a major and
minor version, in your <code>composer.json</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"namshi/ab": "1.0.*"</span></code></pre></td></tr></table></div></figure>


<h2>Creating and running tests</h2>

<p>The library is very small, and it comes bundled with
2 classes, <code>Test</code> and <code>Container</code>: as you can probably
guess, the first is a representation of an AB test and
the 2nd serves as a convenient container for all of your
test instances.</p>

<p>Here&rsquo;s how you can create a test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Namshi\AB\Test</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Namshi\AB\Container</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$cssTest</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Test</span><span class="p">(</span><span class="s1">&#39;css&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;default.css&#39;</span>   <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;new.css&#39;</span>       <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$abContainer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Container</span><span class="p">(</span><span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="nv">$cssTest</span>
</span><span class='line'><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point, for example, you can start
AB testing your website by changing the CSS
in the view:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&lt;html&gt;</span>
</span><span class='line'><span class="x">  &lt;head&gt;</span>
</span><span class='line'><span class="x">      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$abContainer</span><span class="p">[</span><span class="s1">&#39;css&#39;</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">getVariation</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x">&quot;  /&gt;</span>
</span><span class='line'><span class="x">      ...</span>
</span><span class='line'><span class="x">      ...</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>getVariation()</code> will calculate the variation
(<code>default.css</code> or <code>new.css</code>) according to the
odds of each variation (66% for the first one,
33% for the second one) and will return a string
representing the variation.</p>

<h2>Persisting the variations through an entire session</h2>

<p>Of course, you want to display variations but be
consistent with each user, so that if a user gets
a variation, it will continue getting the same variation
throughout his entire session: to do so, just calculate
a random integer (seed), store it in session and pass it to
each test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="nb">session_start</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;seed_for_example_test&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;seed_for_example_test&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">mt_rand</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$test</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Test</span><span class="p">(</span><span class="s1">&#39;example&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;a&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;b&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$test</span><span class="o">-&gt;</span><span class="na">setSeed</span><span class="p">(</span><span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;seed_for_example_test&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// as long as the seed doesn&#39;t change</span>
</span><span class='line'><span class="c1">// getVariation() will always return the</span>
</span><span class='line'><span class="c1">// same variation</span>
</span><span class='line'><span class="nv">$test</span><span class="o">-&gt;</span><span class="na">getVariation</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Soon, you will realize that having a per-test seed
is <strong>not efficient at all</strong>, that&rsquo;s why you can create
a global seed and pass it to the container: from that
seed, the container will take care of generating a seed
for each test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="nb">session_start</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;seed&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;seed&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">mt_rand</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// pass the seed into the constructor</span>
</span><span class='line'><span class="nv">$abContainer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Container</span><span class="p">(</span><span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">Test</span><span class="p">(</span><span class="s1">&#39;greet&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;Hey dude!&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;Welcome&#39;</span>   <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)),</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">Test</span><span class="p">(</span><span class="s1">&#39;background-color&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;yellow&#39;</span>    <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;white&#39;</span>     <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)),</span>
</span><span class='line'><span class="p">),</span> <span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;seed&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// or with a setter</span>
</span><span class='line'><span class="nv">$abContainer</span><span class="o">-&gt;</span><span class="na">setSeed</span><span class="p">(</span><span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;seed&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Disabling the tests</h2>

<p>Sometimes you might want to disable tests
for different purposes, for example if
the user agent who is visiting the page is a bot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$test</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Test</span><span class="p">(</span><span class="s1">&#39;my_ab_test&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;a&#39;</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;b&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$test</span><span class="o">-&gt;</span><span class="na">disable</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$test</span><span class="o">-&gt;</span><span class="na">getVariation</span><span class="p">();</span> <span class="c1">// will return &#39;a&#39;!</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you disable the test and run it,
it will always return the first variation,
no matter what its odds are, even if it&rsquo;s zero.</p>

<h2>An example</h2>

<p>I would recommend you to have a look at the
<a href="https://github.com/namshi/AB/tree/master/examples">example provided</a> under the <code>examples</code> directory:
it&rsquo;s pretty silly, but it gives you an idea of
how easy is to create and run AB tests with
this library.</p>

<p><img class="center" src="http://odino.org/images/ab.png"></p>

<p>If you look at the code, you will soon realize that
it&rsquo;s very simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">require</span> <span class="nx">__DIR__</span> <span class="o">.</span> <span class="s1">&#39;/../vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Namshi\AB\Test</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Namshi\AB\Container</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">session_start</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;seed&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;seed&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">mt_rand</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$abt</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Container</span><span class="p">(</span><span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">Test</span><span class="p">(</span><span class="s1">&#39;greet&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;Hey dude!&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;Welcome&#39;</span>   <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)),</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">Test</span><span class="p">(</span><span class="s1">&#39;background-color&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;yellow&#39;</span>    <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;white&#39;</span>     <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)),</span>
</span><span class='line'><span class="p">),</span> <span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;seed&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;html&gt;</span>
</span><span class='line'><span class="x">    &lt;head&gt;</span>
</span><span class='line'><span class="x">        &lt;style&gt;</span>
</span><span class='line'><span class="x">            * {</span>
</span><span class='line'><span class="x">                background-color: </span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$abt</span><span class="p">[</span><span class="s1">&#39;background-color&#39;</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">getVariation</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x">;</span>
</span><span class='line'><span class="x">            }</span>
</span><span class='line'><span class="x">        &lt;/style&gt;</span>
</span><span class='line'><span class="x">    &lt;/head&gt;</span>
</span><span class='line'><span class="x">    &lt;body&gt;</span>
</span><span class='line'><span class="x">        &lt;h1&gt;</span>
</span><span class='line'><span class="x">            </span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$abt</span><span class="p">[</span><span class="s1">&#39;greet&#39;</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">getVariation</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">        &lt;/h1&gt;</span>
</span><span class='line'><span class="x">        </span>
</span><span class='line'><span class="x">        &lt;div&gt;</span>
</span><span class='line'><span class="x">            Your seed is </span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;seed&#39;</span><span class="p">];</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">        &lt;/div&gt;</span>
</span><span class='line'><span class="x">    &lt;/body&gt;</span>
</span><span class='line'><span class="x">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, never write an application like this ;&ndash;)
this serves just as an example.</p>

<h2>Additional features</h2>

<p>We tried to extensively cover the available features of
the library in its <a href="https://github.com/namshi/ab">README</a>,
so I will just sum them up here:</p>

<ul>
<li>the container implements the <code>ArrayAccess</code> interface, so you can
retrieve tests like if they were stored into an array (<code>$abContainer['my_test']</code>)</li>
<li>since AB tests are very useful only when you <strong>track</strong>
the results, we added a <strong>tracking name</strong> that you can specify
for each test: this is due to the fact that your test might be
called <code>add_to_cart_text</code> but in your tracking tool, you
have to reference the test with the tracking tool&rsquo;s ID, which
might be a very clueless string (ie. <code>test_id_4njktn4t4tjjnn4on</code>)</li>
<li>you can also add an array of parameters to each test and retrieve
them later on: this is due to the fact that once you track the test&rsquo;s
result, you might want to send additional data together with the
tracking name, the variation and the result</li>
</ul>


<h2>Why not choosing an existing library</h2>

<p>Of course we checked out what the market was
offering, but weren&rsquo;t able to find out a very
good, generic-purpose, library in order to
generate AB tests:</p>

<ul>
<li><a href="https://packagist.org/packages/jm/ab-bundle">jm/ab-bundle</a>
is unfortunately coupled with Symfony2 and Twig, so
you can&rsquo;t really call it a stack-free library: even though
we <strong>love</strong> Symfony2, not all of our services run with
it and we don&rsquo;t want to <strong>force a technology just to
have a functionality</strong></li>
<li><a href="http://phpabtest.com/index">phpabtest</a> is a full-stack
service, meaning that it provides a library to register and
handle tests but also tracks stuff via Google Analytics; moreover,
<a href="https://github.com/briancray/phpA-B/blob/master/phpab.php">we didn&rsquo;t like the code that much</a></li>
</ul>


<p>At the end of the day, <code>namshi/ab</code> is a <strong>1 man-day effort</strong>, so we
spiked for a bit and decided that it was worth it.</p>

<h2>Testing this library</h2>

<p>We added a few PHPUnit tests, so you just have to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">cd /path/to/namshi/ab</span>
</span><span class='line'>
</span><span class='line'><span class="x">phpunit</span>
</span></code></pre></td></tr></table></div></figure>


<p>The funny thing is that we also added some test to check that
the library correctly <a href="https://github.com/namshi/AB/blob/master/tests/Namshi/AB/Test/TestTest.php#L161">generates variations according to their odds</a>.</p>

<h2>FOSS</h2>

<p>The library is available on
<a href="https://github.com/namshi/AB">Github</a>: please let
<a href="https://github.com/namshi">us</a> know if you
would like to see something different, have a suggestion
or whatsoever: even better than that, <strong>feel free to open
a pull request</strong> if we screwed up with anything!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notificator, sending notifications through PHP in a clean and lightweight way]]></title>
    <link href="http://odino.org/notificator-sending-notifications-through-php-in-clean-and-lightweight-way/"/>
    <updated>2013-07-11T01:20:00+04:00</updated>
    <id>http://odino.org/notificator-sending-notifications-through-php-in-clean-and-lightweight-way</id>
    <content type="html"><![CDATA[<p>While implementing various pieces of our
<a href="http://odino.org/why-we-choose-symfony2-over-any-other-php-framework/">Service-Oriented Architecture</a>
we, at <a href="http://en-ae.namshi.com">Namshi</a>,
realized that a central notification
service would have been very good in order
to abstract the way we notify our customers
and everyone in the company (ie. skype messages
when a task is due a certain date).</p>

<p>We initially implemented all of this
<a href="http://odino.org/configuring-a-symfony2-application-to-support-soa/">inside a Symfony2 bundle</a>,
but soon realized that we could
abstract and generalize our implementation
in order to extract it into a library for the public
domain, and that&rsquo;s how
<a href="https://github.com/namshi/notificator">notificator</a>
was born.</p>

<!-- more -->


<h2>Aim of the library: a monolog-like implementation for notifications</h2>

<p>The aim of this library is to provide a very
clean abstraction for a task, handling notifications,
that can be spread across multiple channels (for example
emails, skype messages, desktop notifications, &hellip;):
by following this target, we soon realized that by merging
together 2 simple things, <a href="https://github.com/Seldaek/monolog">Monolog</a>
and the concept of <a href="http://en.wikipedia.org/wiki/Observer_pattern">event dispatching</a>,
we could have easily reached our goal.</p>

<p>Honestly, it&rsquo;s true that you can achieve the same goal with
Monolog, but the problem, there, is that it&rsquo;s a library
specifically built for logging, thus, when your domain
deals with simple notifications, your code would really
be inexpressive.</p>

<p>Even though <strong>Notificator is way simpler</strong>, we took a lot
of inspiration from Monolog: for example, the concept of
handlers is a total steal ;&ndash;)</p>

<h2>Installation</h2>

<p>The library is available via composer,
as you can see from its
<a href="https://packagist.org/packages/namshi/notificator">packagist page</a>.</p>

<p>Using semantic versioning, I recommend you
to pick a minor release (<code>1.0</code>, for example)
and stick to it in your <code>composer.json</code>:
what we try to do is that, if there is a BC break
in the API, we increase the minor version (<code>1.0.X</code> to <code>1.1.X</code>, for example).</p>

<p>At the end, you <strong>should</strong> require it like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"namshi/notificator": "1.0.*"</span></code></pre></td></tr></table></div></figure>


<h2>Hello world! example</h2>

<p>Just to give a very rough and simple example on how this
library works, let&rsquo;s see how you can trigger a notification
via <strong>both</strong> email (with PHP&rsquo;s <code>mail</code> function<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>)
and the <code>notify-send</code> utility available on ubuntu (I&rsquo;ve already spoke
about it in <a href="http://odino.org/desktop-notifications-for-phpunit-tests-on-ubuntu/">a previous post</a>).</p>

<p>First of all, we would need to create a <em>plain-old-php-class</em>
representing the notification, which implements 2 interfaces:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Namshi\Notificator\Notification</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Namshi\Notificator\NotificationInterface</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">interface</span> <span class="nx">NotifySendNotificationInterface</span> <span class="k">extends</span> <span class="nx">NotificationInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getMessage</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">interface</span> <span class="nx">EmailNotificationInterface</span> <span class="k">extends</span> <span class="nx">NotificationInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getAddress</span><span class="p">();</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getSubject</span><span class="p">();</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getBody</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">DoubleNotification</span> <span class="k">extends</span> <span class="nx">Notification</span> <span class="k">implements</span> <span class="nx">NotifySendNotificationInterface</span><span class="p">,</span> <span class="nx">EmailNotificationInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$address</span><span class="p">;</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$body</span><span class="p">;</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$subject</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$address</span><span class="p">,</span> <span class="nv">$subject</span><span class="p">,</span> <span class="nv">$body</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$parameters</span> <span class="o">=</span> <span class="k">array</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">parent</span><span class="o">::</span><span class="na">__construct</span><span class="p">(</span><span class="nv">$parameters</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">address</span>  <span class="o">=</span> <span class="nv">$address</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">body</span>     <span class="o">=</span> <span class="nv">$body</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">subject</span>  <span class="o">=</span> <span class="nv">$subject</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getAddress</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">address</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getSubject</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">subject</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getBody</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">body</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getMessage</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getBody</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point we need 2 notification handlers, which
will separately handle the notification:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Namshi\Notificator\Notification\Handler\HandlerInterface</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Namshi\Notificator\NotificationInterface</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">NotifySendNotificationHandler</span> <span class="k">implements</span> <span class="nx">HandlerInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">shouldHandle</span><span class="p">(</span><span class="nx">NotificationInterface</span> <span class="nv">$notification</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$notification</span> <span class="nx">instanceOf</span> <span class="nx">NotifySendNotificationInterface</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">handle</span><span class="p">(</span><span class="nx">NotificationInterface</span> <span class="nv">$notification</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nb">shell_exec</span><span class="p">(</span><span class="nb">sprintf</span><span class="p">(</span><span class="s1">&#39;notify-send &quot;%s&quot;&#39;</span><span class="p">,</span> <span class="nv">$notification</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">()));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">EmailNotificationHandler</span> <span class="k">implements</span> <span class="nx">HandlerInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">shouldHandle</span><span class="p">(</span><span class="nx">NotificationInterface</span> <span class="nv">$notification</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$notification</span> <span class="nx">instanceOf</span> <span class="nx">EmailNotificationInterface</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">handle</span><span class="p">(</span><span class="nx">NotificationInterface</span> <span class="nv">$notification</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nb">mail</span><span class="p">(</span><span class="nv">$notification</span><span class="o">-&gt;</span><span class="na">getAddress</span><span class="p">(),</span> <span class="nv">$notification</span><span class="o">-&gt;</span><span class="na">getSubject</span><span class="p">(),</span> <span class="nv">$notification</span><span class="o">-&gt;</span><span class="na">getBody</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re basically there: with a bunch of code we can now trigger
a notification both via email and <code>notify-send</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// create the manager and assign handlers to it</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Namshi\Notificator\Manager</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$manager</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Manager</span><span class="p">();</span>
</span><span class='line'><span class="nv">$manager</span><span class="o">-&gt;</span><span class="na">addHandler</span><span class="p">(</span><span class="k">new</span> <span class="nx">NotifySendNotificationHandler</span><span class="p">());</span>
</span><span class='line'><span class="nv">$manager</span><span class="o">-&gt;</span><span class="na">addHandler</span><span class="p">(</span><span class="k">new</span> <span class="nx">EmailNotificationHandler</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$notification</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DoubleNotification</span><span class="p">(</span><span class="s1">&#39;alessandro.nadalin@gmail.com&#39;</span><span class="p">,</span> <span class="s1">&#39;Test email&#39;</span><span class="p">,</span> <span class="s1">&#39;Hello!&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  trigger the notification</span>
</span><span class='line'><span class="nv">$manager</span><span class="o">-&gt;</span><span class="na">trigger</span><span class="p">(</span><span class="nv">$notification</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="right" src="http://odino.org/images/notification-email.png"></p>

<p>At this point, if you run this example<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>, you should
see a notification popping up on your desktop and, in a few seconds,
you will also receive an email to the address you&rsquo;ve given, with the subject
&ldquo;Test email&rdquo; and &ldquo;Hello!&rdquo; in the body.</p>

<p>By the way, if you want to see some examples on
how the library works, <a href="https://github.com/namshi/notificator/tree/master/examples">check them out on github</a>.</p>

<h2>Sending notifications via RabbitMQ</h2>

<p>It is no news that we heavily rely on
<a href="http://odino.org/refactoring-your-architecture-go-for-soa/">RabbitMQ in our SOA</a>,
so it&rsquo;s pretty obvious that, to implement the notification service,
we send messages containing the notifications, that will
be intercepted by our notification service, which relies on
Notificator.</p>

<p>To do so, we take advantage of the great job done by
<a href="https://twitter.com/old_sound">Alvaro Videla</a>
on RabbitMQ for PHP and Symfony2, through the
<a href="https://github.com/videlalvaro/php-amqplib">PHP AMQP library</a>
and the <a href="https://github.com/videlalvaro/RabbitMqBundle">RabbitMQ bundle</a>.</p>

<p>If you are familiar with them, you know that in order to consume messages,
you have to declare your consumer as a callback of the actual, generic
rabbitmq consumer, through the <code>config.yml</code> file:</p>

<figure class='code'><figcaption><span>app/config/config.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">old_sound_rabbit_mq</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">consumers</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">notification</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">connection</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">default</span>
</span><span class='line'>            <span class="l-Scalar-Plain">exchange_options</span><span class="p-Indicator">:</span> <span class="p-Indicator">{</span><span class="nv">name</span><span class="p-Indicator">:</span> <span class="s">&#39;notifications&#39;</span><span class="p-Indicator">,</span> <span class="nv">type</span><span class="p-Indicator">:</span> <span class="nv">direct</span><span class="p-Indicator">}</span>
</span><span class='line'>            <span class="l-Scalar-Plain">queue_options</span><span class="p-Indicator">:</span>    <span class="p-Indicator">{</span><span class="nv">name</span><span class="p-Indicator">:</span> <span class="s">&#39;notifications&#39;</span><span class="p-Indicator">}</span>
</span><span class='line'>            <span class="l-Scalar-Plain">callback</span><span class="p-Indicator">:</span>         <span class="l-Scalar-Plain">namshi.notification.consumer</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="err">    </span><span class="l-Scalar-Plain">namshi.notification.consumer</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="err">    </span>    <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Namshi\Notificator\Messaging\RabbitMQ\Symfony2\Consumer</span>
</span><span class='line'><span class="err">    </span>    <span class="l-Scalar-Plain">arguments</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="err">@</span><span class="nv">namshi.notification.manager</span><span class="p-Indicator">]</span>
</span><span class='line'><span class="err">    </span><span class="l-Scalar-Plain">namshi.notification.manager</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="err">    </span>    <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Namshi\Notificator\Manager</span>
</span><span class='line'><span class="err">    </span>    <span class="l-Scalar-Plain">calls</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="err">    </span>      <span class="p-Indicator">-</span> <span class="p-Indicator">[</span><span class="nv">addhandler</span><span class="p-Indicator">,</span> <span class="p-Indicator">[</span><span class="err">@</span><span class="nv">namshi.notification.handler.notify_send</span><span class="p-Indicator">]</span> <span class="p-Indicator">]</span>
</span><span class='line'><span class="err">    </span><span class="l-Scalar-Plain">namshi.notification.handler.notify_send</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="err">    </span>    <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Namshi\Notificator\Notification\Handler\NotifySend</span>
</span></code></pre></td></tr></table></div></figure>


<p>We already provide a <a href="https://github.com/namshi/notificator/blob/master/src/Namshi/Notificator/Messaging/RabbitMQ/Symfony2/Consumer.php">very basic consumer callback</a>
to be used with the RabbitMQ bundle.</p>

<p>The main idea behind this is that the publisher serializes the notification
and sends it through RabbitMQ, while the consumer unserializes and
triggers it through the <code>Manager</code>. The publisher code would be very, very simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$publisher</span> <span class="o">=</span> <span class="nv">$container</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;old_sound_rabbit_mq.notifications_producer&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$notification</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MySampleNotification</span><span class="p">(</span><span class="s2">&quot;man, this comes from RabbitMQ and Symfony2!&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$publisher</span><span class="o">-&gt;</span><span class="na">publish</span><span class="p">(</span><span class="nb">serialize</span><span class="p">(</span><span class="nv">$notification</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>and to start consuming messages you would only need to
start the consumer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">php app/console rabbitmq:consumer -w notification</span>
</span></code></pre></td></tr></table></div></figure>


<h2>FOSS</h2>

<p>I&rsquo;ve tried to write a pretty extensive
<a href="https://github.com/namshi/notificator/">README</a> that you can use as a reference, on Github
(check the <a href="https://github.com/namshi/notificator/tree/master/tests">tests</a>, as well, to get an idea of the internals):
if you spot any typo or mistake, don&rsquo;t hesitate to
reach out and point it out.</p>

<p>This library is part of the efforts,
from <a href="https://github.com/namshi">Namshi</a>,
to be able to give back to the
OSS community as much as possible: you
are therefore strongly encouraged to open a PR
or express your opinion if you find that something
should be fixed or could be improved (there&rsquo;s a lot
of room for improvement, starting by implementing
many more <a href="https://github.com/namshi/notificator/tree/master/src/Namshi/Notificator/Notification/Handler">handlers</a>).</p>

<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>Only used for its simplicity here, please do not use it in production, use stuff like SwiftMailer instead! <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>I mostly took the example code from the README of the library on github, so forgive me if there are synthax errors or some typo. You can anyhow have a look at the examples (in the examples/ folder) to check some working code <a href='#fnref:2' rev='footnote'>↩</a></li>
    </ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Emailvision's CampaignCommander APIs from PHP]]></title>
    <link href="http://odino.org/using-emailvisions-campaigncommander-apis-from-php/"/>
    <updated>2013-06-28T18:38:00+04:00</updated>
    <id>http://odino.org/using-emailvisions-campaigncommander-apis-from-php</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://odino.org/images/emailvision-template.png"></p>

<p>This weekend I finally had the chance to
work a couple hours on the <code>namshi/emailvision</code>
library, which lets you integrate CampaignCommander
as (email) notification solution in your
PHP projects.</p>

<p>I already had a proof-of-concept of this library since weeks,
and it was already pushed to Github, but since I had no
valid API account to do some integration tests, I
could not really &ldquo;publicize&rdquo; it.</p>

<p>Right now I refactored the library and added a couple integration
tests which are working flawlessy, so, in this post, I&rsquo;m
going to show you how easy it is to send emails with
Emailvision&rsquo;s solution directly from PHP.</p>

<!-- more -->


<h2>Installation</h2>

<p>As usual with the latest libraries built for PHP,
the installation can simply be done with composer,
as the library itself is available over
<a href="https://packagist.org/packages/namshi/emailvision">packagist</a>:</p>

<figure class='code'><figcaption><span>composer.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="s2">&quot;namshi/emailvision&quot;</span>: <span class="s2">&quot;dev-master&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>then you simply have to run a <code>php composer.phar update</code> and
you can start utilizing it in your codebase (the namespace is
<code>Namshi\Emailvision</code>, as this library has been built in the
context of our company, <a href="http://en-ae.namshi.com">namshi.com</a>).</p>

<p>As of today, the latest stable release is <code>1.0.0</code>, which is the
one we recommend to run in production &ndash; keep an eye on packagist
if we come up with changes, but I bet it won&rsquo;t change that much
in the near future, as emailvision&rsquo;s API is pretty simple.</p>

<h2>Usage</h2>

<p>After you configure transactional email templates in the
CampaignCommander web interface, you just need to keep in mind
(and in your code) the unique identifier and the security tag
of the template; the rest is very straightforward:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Namshi\Emailvision\Client</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$config</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;random&#39;</span>            <span class="o">=&gt;</span> <span class="s1">&#39;UNIQUE_IDENTIFIER&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;encrypt&#39;</span>           <span class="o">=&gt;</span> <span class="s1">&#39;SECURITY_TAG&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;senddate&#39;</span>          <span class="o">=&gt;</span> <span class="k">new</span> <span class="nx">\DateTime</span><span class="p">(),</span>
</span><span class='line'>    <span class="s1">&#39;uidkey&#39;</span>            <span class="o">=&gt;</span> <span class="s1">&#39;EMAIL&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;stype&#39;</span>             <span class="o">=&gt;</span> <span class="s1">&#39;NOTHING&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$emailvisionClient</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">(</span><span class="nv">$config</span><span class="p">);</span>
</span><span class='line'><span class="nv">$emailvisionClient</span><span class="o">-&gt;</span><span class="na">sendEmail</span><span class="p">(</span><span class="s2">&quot;someone@gmail.com&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The nice thing here is that Emailvision lets you schedule
emails, so you can just play with the <code>senddate</code> parameter
and set it to the future &ndash; just be aware that it needs to
be a <code>DateTime</code> instance:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Namshi\Emailvision\Client</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$date</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\DateTime</span><span class="p">(</span><span class="s1">&#39;2025-01-01 12:45:00&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$config</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;random&#39;</span>            <span class="o">=&gt;</span> <span class="s1">&#39;UNIQUE_IDENTIFIER&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;encrypt&#39;</span>           <span class="o">=&gt;</span> <span class="s1">&#39;SECURITY_TAG&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;senddate&#39;</span>          <span class="o">=&gt;</span>  <span class="nv">$date</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;uidkey&#39;</span>            <span class="o">=&gt;</span> <span class="s1">&#39;EMAIL&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;stype&#39;</span>             <span class="o">=&gt;</span> <span class="s1">&#39;NOTHING&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$emailvisionClient</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">(</span><span class="nv">$config</span><span class="p">);</span>
</span><span class='line'><span class="nv">$emailvisionClient</span><span class="o">-&gt;</span><span class="na">sendEmail</span><span class="p">(</span><span class="s2">&quot;someone@gmail.com&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code will tell CampaignCommander to trigger
the email on the 1st of January 2025, at 12:45.</p>

<h2>Dynamic content in your emails</h2>

<p>If we would stop here, the library would be pretty
useless, since the power of transactional emails
is to be able to serve dynamic content: in fact, the API
allows you to pass as much variables as you want
that can be configured and used in the email templates
you&rsquo;ve created in emailvision&rsquo;s web interface.</p>

<p>To do so, once you call the <code>sendEmail</code> method of the
client, just pass an array of variables (strings) as second
argument:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$emailvisionClient</span><span class="o">-&gt;</span><span class="na">sendEmail</span><span class="p">(</span><span class="s2">&quot;someone@gmail.com&quot;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Alex!&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>and then you will start receiving personalized emails:</p>

<p><img class="center" src="http://odino.org/images/emailvision-received.png"></p>

<h2>Running the tests</h2>

<p>Of course, we&rsquo;ve added some unit and <strong>integration</strong>
tests which let us refactor the library and add
functionalities to it without regressions; to run
the test suite, just use <code>phpunit</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /path/to/namshi/emailvision
</span><span class='line'>
</span><span class='line'>phpunit
</span></code></pre></td></tr></table></div></figure>


<p>You will notice that even though the tests should contain
some actual HTTP calls, they are very fast: this is because,
unless you provide some real credentials for emailvision,
integration tests aren&rsquo;t run by default.</p>

<p>To run them, you will have to create a new dummy email template
on CampaignCommander and store the credentials you get
after saving it and the email address that is going to
receive the test emails in a file named <code>emailvision.config</code>
in your system&rsquo;s temporary folder (you can get it by
running <code>php -r "echo sys_get_temp_dir();"</code>):</p>

<figure class='code'><figcaption><span>/tmp/emailvision.config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$encrypt</span>  <span class="o">=</span> <span class="s1">&#39;email_template_security_tag&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$random</span>   <span class="o">=</span> <span class="s1">&#39;email_template_unique_id&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$email</span>    <span class="o">=</span> <span class="s1">&#39;your.address@gmail.com&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beautifying JSON data from the shell]]></title>
    <link href="http://odino.org/beautifying-json-data-from-the-shell/"/>
    <updated>2013-06-22T15:36:00+04:00</updated>
    <id>http://odino.org/beautifying-json-data-from-the-shell</id>
    <content type="html"><![CDATA[<p>Yesterday I bumped into a very
handly utility to beautify JSON
data directly from your command
line.</p>

<!-- more -->


<p>Let&rsquo;s say that, with a command, you
are retrieving some data in JSON
format<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -X POST --user admin:admin <span class="se">\</span>
</span><span class='line'>http://localhost:2480/command/temp/sql/select%20from%20person
</span><span class='line'>
</span><span class='line'><span class="o">{</span><span class="s2">&quot;result&quot;</span>:<span class="o">[{</span><span class="s2">&quot;@type&quot;</span>:<span class="s2">&quot;d&quot;</span>,<span class="s2">&quot;@rid&quot;</span>:<span class="s2">&quot;#9:2&quot;</span>,<span class="s2">&quot;@version&quot;</span>:0,<span class="s2">&quot;@class&quot;</span>:<span class="s2">&quot;person&quot;</span>,<span class="s2">&quot;name&quot;</span>:<span class="s2">&quot;Luca&quot;</span><span class="o">}</span>, <span class="o">{</span><span class="s2">&quot;@type&quot;</span>:<span class="s2">&quot;d&quot;</span>,<span class="s2">&quot;@rid&quot;</span>:<span class="s2">&quot;#9:3&quot;</span>,<span class="s2">&quot;@version&quot;</span>:0,<span class="s2">&quot;@class&quot;</span>:<span class="s2">&quot;person&quot;</span><span class="o">}</span>, <span class="o">{</span><span class="s2">&quot;@type&quot;</span>:<span class="s2">&quot;d&quot;</span>,<span class="s2">&quot;@rid&quot;</span>:<span class="s2">&quot;#9:4&quot;</span>,<span class="s2">&quot;@version&quot;</span>:0,<span class="s2">&quot;@class&quot;</span>:<span class="s2">&quot;person&quot;</span><span class="o">}]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, the result doesn&rsquo;t really look
readable, but thanks to a python
utility we can directly expand and beautify
our JSON by piping:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -X POST --user admin:admin <span class="se">\</span>
</span><span class='line'>http://localhost:2480/command/temp/sql/select%20from%20person <span class="se">\</span>
</span><span class='line'>| python -mjson.tool
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;result&quot;</span>: <span class="o">[</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;@class&quot;</span>: <span class="s2">&quot;person&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;@rid&quot;</span>: <span class="s2">&quot;#9:2&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;@type&quot;</span>: <span class="s2">&quot;d&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;@version&quot;</span>: 0,
</span><span class='line'>            <span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;Luca&quot;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;@class&quot;</span>: <span class="s2">&quot;person&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;@rid&quot;</span>: <span class="s2">&quot;#9:3&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;@type&quot;</span>: <span class="s2">&quot;d&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;@version&quot;</span>: 0
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;@class&quot;</span>: <span class="s2">&quot;person&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;@rid&quot;</span>: <span class="s2">&quot;#9:4&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;@type&quot;</span>: <span class="s2">&quot;d&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;@version&quot;</span>: 0
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s all, folks!</p>

<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>In my case, I am retrieving data from OrientDB, a NoSQL graph=document DB which handles data in JSON format over its HTTP interface <a href='#fnref:1' rev='footnote'>↩</a></li>
    </ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Desktop notifications for PHPUnit tests on Ubuntu]]></title>
    <link href="http://odino.org/desktop-notifications-for-phpunit-tests-on-ubuntu/"/>
    <updated>2013-06-21T03:48:00+04:00</updated>
    <id>http://odino.org/desktop-notifications-for-phpunit-tests-on-ubuntu</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://odino.org/images/phpunit-notification-ko.png"></p>

<p>As everyone knows, automated tests are great
since they let you test a system without the need
of proactively checking anything: you launch your suite
and you get a feedback; moreover, systems like Jenkins or Travis-CI allow you
to even forget about checking the status of
a build since they can do all of this work for you:
the problem, instead, happens when you need
to run the tests locally, as you always need to
check the shell to know whether the tests passed or not.</p>

<p>A solution would be to launch the tests and mind
your own business, instead of having to check the CLI
output, waiting for a notification that tells
use about the tests&#8217; result.</p>

<!-- more -->


<h2>Notifications to the rescue</h2>

<p>A very simple program, written for Linux, can help
you with this task: it&rsquo;s <code>notify-send</code>.</p>

<p>Given that you have PHPUnit installed via composer
(so the binary is accessible at <code>./vendor/bin/phpunit</code>)
you can simply use a small shell function that can
sends notifications about the tests&#8217; results, that I
put on <a href="https://github.com/odino/phpunit-notifications">Github</a>.</p>

<h2>Installation</h2>

<p>Clone the repository and add the shell function to your
shell profile<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd wherever
</span><span class='line'>
</span><span class='line'>git clone git@github.com:odino/phpunit-notifications.git
</span><span class='line'>
</span><span class='line'>chmod +x phpunit-notifications/phpunit-notifications.sh
</span><span class='line'>
</span><span class='line'>echo 'source wherever/phpunit-notifications/phpunit-notifications.sh' &gt;&gt; ~/.zshrc</span></code></pre></td></tr></table></div></figure>


<h2>Usage</h2>

<p>At this point you can open a new shell and run your tests with
the <code>phpunit</code> commmand:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ~/projects/my-project
</span><span class='line'>
</span><span class='line'>phpunit
</span><span class='line'>
</span><span class='line'>// or
</span><span class='line'>
</span><span class='line'>phpunit -c config
</span><span class='line'>
</span><span class='line'>// or
</span><span class='line'>
</span><span class='line'>phpunit tests/My/Example/ClassTest.php</span></code></pre></td></tr></table></div></figure>


<p><img class="left" src="http://odino.org/images/phpunit-notification-ok.png"></p>

<p>and see that as soon as the tests are over you will
see one of those usual notifications on the top right
of your screen, hopefully telling you that the automated
tests suite is greener than ever.</p>

<p>The <code>notify-send</code> utility is probably not available on
Macs, but I guess you can just replace it with <code>growlnotify</code>.</p>

<p>If you are interested into digging deeper into the topic,
I would suggest you to read a very nice article from
Giulio Di Donato which explains how to <a href="http://welcometothebundle.com/automate-test-and-code-inspection-in-php-with-guard-and-symfony2/">run PHPUnit tests for Symfony2 as soon as any file in your filesystem changes, and get the same type of notifications</a>:
even though I personally think this approach is a little
bit too extreme<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>, it is anyhow interesting as
it pushes automation and time-management to their best limits.</p>

<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>Or, for example, to empty the tables of the right database after each test (there are different databases for each website) <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>I am personally using ZSH: https://github.com/robbyrussell/oh-my-zsh <a href='#fnref:2' rev='footnote'>↩</a></li><li id='fn:3'>If you modify 5 files and your test suite is 30secs long, woul will already have to wait 2 and a half minutes <a href='#fnref:3' rev='footnote'>↩</a></li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP User Group Dubai, here we start again!]]></title>
    <link href="http://odino.org/php-user-group-dubai-here-we-start-again/"/>
    <updated>2013-06-18T13:38:00+04:00</updated>
    <id>http://odino.org/php-user-group-dubai-here-we-start-again</id>
    <content type="html"><![CDATA[<p>After launching a couple
PHP User Groups in Italy
(<a href="http://roma.grusp.org">Rome</a> and <a href="http://friuli.grusp.org">Friuli</a>),
I started to feel kind of lost here in
Dubai, a place that gathers together lots
of talents but doesn&rsquo;t have that much of
knowledge-sharing culture.</p>

<p>Given this and the pro-active involvement of
some of my colleagues from <a href="http://en-ae.namshi.com">Namshi</a>,
I really wanted to see some sort of community
raise in this desert.</p>

<!-- more -->


<p>So a couple weeks ago I opened a
<a href="https://groups.google.com/forum/?fromgroups#!forum/php-user-group-dubai">google group</a>
for the PHP User Group Dubai &ndash; pretty empty right now &ndash; which is the place
where we&rsquo;re going to discuss meetings, ask for support
and <em>chillax</em> in a nerdy way.</p>

<p>Yesterday we had our first meeting, where 7 of us
discussed on the directions that we should initially take to gain the attention of others in the development community and
which kind of formats to use during our meetings; the main points that came out of the meeting are:</p>

<ul>
<li>we will try to meet once a month</li>
<li>we will try to set and prepare the next meeting before the beginning of Ramadan (~10 July)</li>
<li>everyone will try to bring a new joiner (friend, colleague, etc.) to the next meeting</li>
<li>we will have a talk and a discussion after that, most probably in front of a dinner accompanied by some <em>sheesha</em></li>
<li>most probably, since not everyone is aware of the potential and benefits of automated testing, we will prepare a talk on
PHPUnit</li>
</ul>


<p>So, if you are a PHP developer based in the UAE
&ndash; not necessarily Dubai &ndash; why don&rsquo;t you subscribe
to our <a href="http://groups.google.com/forum/?fromgroups#!forum/php-user-group-dubai">PHP User Group Dubai google group</a> and
introduce yourself? Do you want to understand why testing your applications manually it&rsquo;s a waste of your energies and of money of your company? Do you know about <a href="http://twig.sensiolabs.org">Twig</a>? Have you ever tried developing an application with <a href="http://angularjs.org/">AngularJS</a> and some HTTP APIs as the backend of that app? How can you <a href="http://odino.org/securing-your-http-api-with-javascript-object-signing-and-encryption/">integrate the JWS authentication mechanism in your PHP code</a>?</p>

<p>It would be great to see you at the next meeting!<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup></p>

<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>By the way, we will decide the date, location and topic of the meeting with a discussion in the google group <a href='#fnref:1' rev='footnote'>↩</a></li>
    </ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrating Twig in your legacy code, Part 2: a less wild approach]]></title>
    <link href="http://odino.org/integrating-twig-in-your-legacy-code-part-2-a-less-wild-approach/"/>
    <updated>2013-06-18T12:07:00+04:00</updated>
    <id>http://odino.org/integrating-twig-in-your-legacy-code-part-2-a-less-wild-approach</id>
    <content type="html"><![CDATA[<p>In my last post I wrote about
<a href="http://odino.org/integrating-twig-in-your-legacy-php-code/">integrating Twig into your legacy code</a>
with a really <strong>wild</strong>
approach.</p>

<p>Today I came up with a better
solution that lets you take advantage
of Twig full features without any hack
(like the <code>partial</code> tag I was
talking about in my previous post).</p>

<!-- more -->


<p>Instead of parsing the generated output
as a string with Twig, we can store it
into a template, which lets us use
features like <code>use</code>, <code>extends</code>, <code>include</code>,
thing that is almost impossible &ndash; in a clean way &ndash;
if we use the Twig string loader:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Framework_Base_Controller</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">render</span><span class="p">(</span><span class="nv">$templateName</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$parameters</span> <span class="o">=</span> <span class="k">array</span><span class="p">())</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ....</span>
</span><span class='line'>      <span class="c1">// do stuff to render your template</span>
</span><span class='line'>      <span class="c1">// we have the HTML output in the $templateOutput variable</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$twig</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Twig_Environment</span><span class="p">(</span><span class="k">new</span> <span class="nx">Twig_Loader_String</span><span class="p">(),</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>          <span class="s1">&#39;autoescape&#39;</span> <span class="o">=&gt;</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>      <span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$twig</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="nv">$templateOutput</span><span class="p">,</span> <span class="nv">$parameters</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead of using the <code>Twig_String_Loader</code> we would use an array
loader, and store <code>$templateOutput</code> in a unique template, called <code>__MAIN__</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Framework_Base_Controller</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">render</span><span class="p">(</span><span class="nv">$templateName</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$parameters</span> <span class="o">=</span> <span class="k">array</span><span class="p">())</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ....</span>
</span><span class='line'>      <span class="c1">// do stuff to render your template</span>
</span><span class='line'>      <span class="c1">// we have the HTML output in the $templateOutput variable</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">$finder</span>     <span class="o">=</span> <span class="k">new</span> <span class="nx">Symfony\Component\Finder\Finder</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$templates</span>  <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">foreach</span> <span class="p">(</span><span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">in</span><span class="p">(</span><span class="s1">&#39;/path/to/twig/templates&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="nv">$file</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$file</span><span class="o">-&gt;</span><span class="na">isDir</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>              <span class="nv">$templates</span><span class="p">[</span><span class="nv">$file</span><span class="o">-&gt;</span><span class="na">getRelativePathName</span><span class="p">()]</span> <span class="o">=</span> <span class="nv">$file</span><span class="o">-&gt;</span><span class="na">getContents</span><span class="p">();</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">$loader</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Twig_Loader_Array</span><span class="p">(</span><span class="nv">$templates</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$loader</span><span class="o">-&gt;</span><span class="na">setTemplate</span><span class="p">(</span><span class="s1">&#39;__MAIN__&#39;</span><span class="p">,</span> <span class="nv">$templateOutput</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">$twig</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Twig_Environment</span><span class="p">(</span><span class="nv">$loader</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>          <span class="s1">&#39;autoescape&#39;</span> <span class="o">=&gt;</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>      <span class="p">));</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">twig</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="nv">$templateName</span><span class="p">,</span> <span class="nx">Alice_Component_Registry</span><span class="o">::</span><span class="na">getAll</span><span class="p">());</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">Twig_Error_Loader</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">twig</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="s2">&quot;__MAIN__&quot;</span><span class="p">,</span> <span class="nx">Alice_Component_Registry</span><span class="o">::</span><span class="na">getAll</span><span class="p">());</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s it!</p>

<p>Now you can write your own <code>$templateName</code>:</p>

<figure class='code'><figcaption><span>/path/to/twig/templates/$templateName</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">{</span> % extends <span class="s1">&#39;__MAIN__&#39;</span> % <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">{</span> % use <span class="s1">&#39;whatever&#39;</span> % <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">{</span> % block somewhat % <span class="o">}</span>
</span><span class='line'>  some content
</span><span class='line'><span class="o">{</span> % endblock % <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrating Twig in your legacy PHP code]]></title>
    <link href="http://odino.org/integrating-twig-in-your-legacy-php-code/"/>
    <updated>2013-06-15T23:15:00+04:00</updated>
    <id>http://odino.org/integrating-twig-in-your-legacy-php-code</id>
    <content type="html"><![CDATA[<p>It might happen that you are working
on a legacy code that is years old,
with its own templating mechanism<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>
that doesn&rsquo;t really allow you to take
advantage of the benefits that a structured
and object-oriented engine like
<a href="http://twig.sensiolabs.org/">Twig</a>.</p>

<p>In this situations, when a complete replacement
would cost too much to your organization,
you can take advantage of a <em>wild</em> integration between
this advanced template engine and your
existing code.</p>

<!-- more -->




<p class='info info' data-title='Outdated'>This article is outdated! A better approach was described here:<br/> http://integrating-twig-in-your-legacy-code-part-2-a-less-wild-approach/</p>


<h2>Approach</h2>

<p>The main idea is that you should anyway
have a man function which outputs
what is being rendered on the view, so that
you can capture that output and parse it via
Twig, something like a <code>render</code> function
in your controllers:</p>

<figure class='code'><figcaption><span>Example controller</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">My_Controller</span> <span class="k">extends</span> <span class="nx">Framework_Base_Controller</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">indexAction</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ....</span>
</span><span class='line'>      <span class="c1">// do stuff</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="s1">&#39;my_template&#39;</span><span class="p">,</span> <span class="nv">$parametersForTheView</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Example of a base controller</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Framework_Base_Controller</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">render</span><span class="p">(</span><span class="nv">$templateName</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$parameters</span> <span class="o">=</span> <span class="k">array</span><span class="p">())</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ....</span>
</span><span class='line'>      <span class="c1">// do stuff to render your template</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$templateOutput</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// will become</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">twig</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="nv">$templateOutput</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point the only thing that
you need is to inject the Twig engine
into your base controller and parse the
output of your legacy templates with Twig<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// your actual rendering:</span>
</span><span class='line'><span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">twig</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="nv">$templateOutput</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// which means:</span>
</span><span class='line'><span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">twig</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="s1">&#39;&lt;html&gt;&lt;head&gt;&lt;title&gt;Hello world&lt;/title&gt;...&lt;/html&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// so that you can actually write twig in your templates:</span>
</span><span class='line'><span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">twig</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="s1">&#39;&lt;html&gt;&lt;head&gt;&lt;title&gt;{ % block title % }Hello world{ % endblock % }&lt;/title&gt;...&lt;/html&gt;&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<p class='info warning' data-title='Attention'>The &#8216;block&#8217; tag in the example above is having a space between curly brackets and the percentage char since my blog engine (octopress) doesn&#8217;t allow those tags them in code blocks.<br/>In all of the next examples you will see Twig tags written like that.</p>


<h2>Rendering content via Twig</h2>

<p>To integrate Twig in your application
it it really a matter of a few minutes:
first, you will have to download and move
the library inside your codebase, then,
thanks to the PSR-0 autoloading (here we
will be using Symfony2&rsquo;s autoloader, but
you can use any PSR-0 compliant autoloader) you just
need to include it and setup Twig&rsquo;s own
autoloader:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">require_once</span> <span class="nx">__DIR__</span><span class="o">.</span><span class="s1">&#39;/vendor/symfony/Symfony/Component/ClassLoader/UniversalClassLoader.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\ClassLoader\UniversalClassLoader</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$loader</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UniversalClassLoader</span><span class="p">();</span>
</span><span class='line'><span class="nv">$loader</span><span class="o">-&gt;</span><span class="na">register</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$loader</span><span class="o">-&gt;</span><span class="na">registerNamespaces</span><span class="p">(</span><span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;Twig&#39;</span> <span class="o">=&gt;</span> <span class="nx">__DIR__</span> <span class="o">.</span> <span class="s1">&#39;/vendor/twig/lib/&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="k">require_once</span> <span class="nx">__DIR__</span> <span class="o">.</span> <span class="s1">&#39;/vendor/twig/lib/Twig/Autoloader.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">Twig_Autoloader</span><span class="o">::</span><span class="na">register</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point, let&rsquo;s get back to our <code>render</code>
function, which we will need to modify in order
to include Twig:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Framework_Base_Controller</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">render</span><span class="p">(</span><span class="nv">$templateName</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$parameters</span> <span class="o">=</span> <span class="k">array</span><span class="p">())</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ....</span>
</span><span class='line'>      <span class="c1">// do stuff to render your template</span>
</span><span class='line'>      <span class="c1">// we have the HTML output in the $templateOutput variable</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$twig</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Twig_Environment</span><span class="p">(</span><span class="k">new</span> <span class="nx">Twig_Loader_String</span><span class="p">(),</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>          <span class="s1">&#39;autoescape&#39;</span> <span class="o">=&gt;</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>      <span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$twig</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="nv">$templateOutput</span><span class="p">,</span> <span class="nv">$parameters</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point we would be already able to write
Twig code inside our templates:</p>

<figure class='code'><figcaption><span>my_index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">{ % set posts = registry.get(&#39;blog_post&#39;).findByUser($user.id) % }</span>
</span><span class='line'><span class="x">&lt;p&gt;</span>
</span><span class='line'><span class="x">  { % for post in posts % }</span>
</span><span class='line'><span class="x">      ...</span>
</span><span class='line'><span class="x">  { % else % }</span>
</span><span class='line'><span class="x">      This user didn&#39;t write any post</span>
</span><span class='line'><span class="x">  { % endfor % }</span>
</span><span class='line'><span class="x">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>A new tag</h2>

<p>Unfortunately, to support some kind of
inheritance, which is one of the greatest
features of Twig, the situation becomes a little
bit trickier: first of all, we will need to add
to the parsed HTML some extra content to override
blocks, then we will need to create a new Twig
token parser in order to allow declaring multiple
blocks with the same name, which is not allowed by the
<code>block</code> tag.</p>

<p>Let&rsquo;s say that all of your templates are including
a base layout made of a very clean HTML structure:</p>

<figure class='code'><figcaption><span>Base layout of your framework</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&lt;html&gt;</span>
</span><span class='line'><span class="x">  &lt;head&gt;</span>
</span><span class='line'><span class="x">      &lt;title&gt;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$title</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x">&lt;/title&gt;</span>
</span><span class='line'><span class="x">      ...</span>
</span><span class='line'><span class="x">      ...</span>
</span><span class='line'><span class="x">  &lt;/head&gt;</span>
</span><span class='line'><span class="x">  &lt;body&gt;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$content</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;/body&gt;</span>
</span><span class='line'><span class="x">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point, since we are able to parse generated
HTMLs with Twig, you can simply add a couple blocks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&lt;html&gt;</span>
</span><span class='line'><span class="x">  &lt;head&gt;</span>
</span><span class='line'><span class="x">      &lt;title&gt;</span>
</span><span class='line'><span class="x">          { % block title % }</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$title</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x">{ % endblock % }</span>
</span><span class='line'><span class="x">      &lt;/title&gt;</span>
</span><span class='line'><span class="x">      ...</span>
</span><span class='line'><span class="x">      ...</span>
</span><span class='line'><span class="x">  &lt;/head&gt;</span>
</span><span class='line'><span class="x">  &lt;body&gt;</span>
</span><span class='line'><span class="x">      { % block content % }</span>
</span><span class='line'><span class="x">          </span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$content</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      { % endblock% }</span>
</span><span class='line'><span class="x">  &lt;/body&gt;</span>
</span><span class='line'><span class="x">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After we do it, how can we override these blocks
differently from each controllers&#8217; actions?
You simply include other Twig content at the end of the
generated HTML:</p>

<figure class='code'><figcaption><span>Adding support for basic inheritance</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Framework_Base_Controller</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">render</span><span class="p">(</span><span class="nv">$templateName</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$parameters</span> <span class="o">=</span> <span class="k">array</span><span class="p">())</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ....</span>
</span><span class='line'>      <span class="c1">// do stuff to render your template</span>
</span><span class='line'>      <span class="c1">// we have the HTML output in the $templateOutput variable</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$twig</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Twig_Environment</span><span class="p">(</span><span class="k">new</span> <span class="nx">Twig_Loader_String</span><span class="p">(),</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>          <span class="s1">&#39;autoescape&#39;</span> <span class="o">=&gt;</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>      <span class="p">));</span>
</span><span class='line'>      <span class="nv">$twigTemplate</span> <span class="o">=</span> <span class="nb">sprintf</span><span class="p">(</span><span class="s2">&quot;path/to/twig/templates/%s.twig&quot;</span><span class="p">,</span> <span class="nv">$templateName</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nb">file_exists</span><span class="p">(</span><span class="nv">$twigTemplate</span><span class="p">)))</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$templateOutput</span> <span class="o">.=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="nv">$twigTemplate</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$twig</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="nv">$templateOutput</span><span class="p">,</span> <span class="nv">$parameters</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then override the content with your own twig template:</p>

<figure class='code'><figcaption><span>path/to/twig/templates/templateName.twig</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">{</span> % block title % <span class="o">}</span>
</span><span class='line'>  About: this is our about page
</span><span class='line'><span class="o">{</span> % endblock % <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After you setup everything, you will realize that
there is a huge problem here: since Twig doesn&rsquo;t allow
to declare blocks Twig, you can use the <code>block</code> tag!</p>

<p>To overcome the problem, you can simply add a new tag,
<code>partial</code>:</p>

<figure class='code'><figcaption><span>The new tag is implemented via a token parser</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Token parser for the twig engine that adds support to redefinable blocks,</span>
</span><span class='line'><span class="sd"> * under the &#39;partial&#39; alias.</span>
</span><span class='line'><span class="sd"> * </span>
</span><span class='line'><span class="sd"> * IE:</span>
</span><span class='line'><span class="sd"> * { % partial myPartial % }First{ % endpartial %}</span>
</span><span class='line'><span class="sd"> * { % partial myPartial % }Second{ % endpartial %}</span>
</span><span class='line'><span class="sd"> * </span>
</span><span class='line'><span class="sd"> * will render &quot;Second&quot;.</span>
</span><span class='line'><span class="sd"> * </span>
</span><span class='line'><span class="sd"> * This is needed since the { % block % } tag doesnt support redefining blocks</span>
</span><span class='line'><span class="sd"> * with the string loader, it just supports it via inheritance.</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">PartialTokenParser</span> <span class="k">extends</span> <span class="nx">Twig_TokenParser_Block</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Parses the twig token in order to replace the &#39;partial&#39; block.</span>
</span><span class='line'><span class="sd">     * </span>
</span><span class='line'><span class="sd">     * @param Twig_Token $token</span>
</span><span class='line'><span class="sd">     * @return Twig_Node_BlockReference</span>
</span><span class='line'><span class="sd">     * @throws Twig_Error_Syntax</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">parse</span><span class="p">(</span><span class="nx">Twig_Token</span> <span class="nv">$token</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$lineno</span> <span class="o">=</span> <span class="nv">$token</span><span class="o">-&gt;</span><span class="na">getLine</span><span class="p">();</span>
</span><span class='line'>        <span class="nv">$stream</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">parser</span><span class="o">-&gt;</span><span class="na">getStream</span><span class="p">();</span>
</span><span class='line'>        <span class="nv">$name</span> <span class="o">=</span> <span class="nv">$stream</span><span class="o">-&gt;</span><span class="na">expect</span><span class="p">(</span><span class="nx">Twig_Token</span><span class="o">::</span><span class="na">NAME_TYPE</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">getValue</span><span class="p">();</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">parser</span><span class="o">-&gt;</span><span class="na">setBlock</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span> <span class="nv">$block</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Twig_Node_Block</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span> <span class="k">new</span> <span class="nx">Twig_Node</span><span class="p">(</span><span class="k">array</span><span class="p">()),</span> <span class="nv">$lineno</span><span class="p">));</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">parser</span><span class="o">-&gt;</span><span class="na">pushLocalScope</span><span class="p">();</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">parser</span><span class="o">-&gt;</span><span class="na">pushBlockStack</span><span class="p">(</span><span class="nv">$name</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$stream</span><span class="o">-&gt;</span><span class="na">test</span><span class="p">(</span><span class="nx">Twig_Token</span><span class="o">::</span><span class="na">BLOCK_END_TYPE</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$stream</span><span class="o">-&gt;</span><span class="na">next</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="nv">$body</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">parser</span><span class="o">-&gt;</span><span class="na">subparse</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="nv">$this</span><span class="p">,</span> <span class="s1">&#39;decideBlockEnd&#39;</span><span class="p">),</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nv">$stream</span><span class="o">-&gt;</span><span class="na">test</span><span class="p">(</span><span class="nx">Twig_Token</span><span class="o">::</span><span class="na">NAME_TYPE</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$value</span> <span class="o">=</span> <span class="nv">$stream</span><span class="o">-&gt;</span><span class="na">next</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getValue</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nv">$value</span> <span class="o">!=</span> <span class="nv">$name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">throw</span> <span class="k">new</span> <span class="nx">Twig_Error_Syntax</span><span class="p">(</span><span class="nb">sprintf</span><span class="p">(</span><span class="s2">&quot;Expected endblock for block &#39;</span><span class="si">$name</span><span class="s2">&#39; (but %s given)&quot;</span><span class="p">,</span> <span class="nv">$value</span><span class="p">),</span> <span class="nv">$stream</span><span class="o">-&gt;</span><span class="na">getCurrent</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getLine</span><span class="p">(),</span> <span class="nv">$stream</span><span class="o">-&gt;</span><span class="na">getFilename</span><span class="p">());</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$body</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Twig_Node</span><span class="p">(</span><span class="k">array</span><span class="p">(</span>
</span><span class='line'>                <span class="k">new</span> <span class="nx">Twig_Node_Print</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">parser</span><span class="o">-&gt;</span><span class="na">getExpressionParser</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">parseExpression</span><span class="p">(),</span> <span class="nv">$lineno</span><span class="p">),</span>
</span><span class='line'>            <span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nv">$stream</span><span class="o">-&gt;</span><span class="na">expect</span><span class="p">(</span><span class="nx">Twig_Token</span><span class="o">::</span><span class="na">BLOCK_END_TYPE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$block</span><span class="o">-&gt;</span><span class="na">setNode</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">,</span> <span class="nv">$body</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">parser</span><span class="o">-&gt;</span><span class="na">popBlockStack</span><span class="p">();</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">parser</span><span class="o">-&gt;</span><span class="na">popLocalScope</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nx">Twig_Node_BlockReference</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span> <span class="nv">$lineno</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getTag</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Returns the tag this parses will look for.</span>
</span><span class='line'><span class="sd">     * </span>
</span><span class='line'><span class="sd">     * @return string</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getTag</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s1">&#39;partial&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Decides when to stop parsing for an open &#39;partial&#39; tag.</span>
</span><span class='line'><span class="sd">     * </span>
</span><span class='line'><span class="sd">     * @param Twig_Token $token</span>
</span><span class='line'><span class="sd">     * @return bool</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">decideBlockEnd</span><span class="p">(</span><span class="nx">Twig_Token</span> <span class="nv">$token</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$token</span><span class="o">-&gt;</span><span class="na">test</span><span class="p">(</span><span class="s1">&#39;endpartial&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you just need to tell the Twig environment to
add this token parser:</p>

<figure class='code'><figcaption><span>While bootstrapping Twig:</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$twig</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Twig_Environment</span><span class="p">(</span><span class="k">new</span> <span class="nx">Twig_Loader_String</span><span class="p">(),</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;autoescape&#39;</span> <span class="o">=&gt;</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'><span class="p">));</span>
</span><span class='line'><span class="nv">$twig</span><span class="o">-&gt;</span><span class="na">addTokenParser</span><span class="p">(</span><span class="k">new</span> <span class="nx">PartialTokenParser</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>and at this point you can use it in your templates:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&lt;html&gt;</span>
</span><span class='line'><span class="x">  &lt;head&gt;</span>
</span><span class='line'><span class="x">      &lt;title&gt;</span>
</span><span class='line'><span class="x">          { % partial title % }</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$title</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x">{ % endpartial % }</span>
</span><span class='line'><span class="x">      &lt;/title&gt;</span>
</span><span class='line'><span class="x">      ...</span>
</span><span class='line'><span class="x">      ...</span>
</span><span class='line'><span class="x">  &lt;/head&gt;</span>
</span><span class='line'><span class="x">  &lt;body&gt;</span>
</span><span class='line'><span class="x">      { % partial content % }</span>
</span><span class='line'><span class="x">          </span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$content</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      { % endpartial% }</span>
</span><span class='line'><span class="x">  &lt;/body&gt;</span>
</span><span class='line'><span class="x">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>path/to/twig/templates/templateName.twig</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">{</span> % partial title % <span class="o">}</span>
</span><span class='line'>  About: this is our about page
</span><span class='line'><span class="o">{</span> % endpartial % <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>So?</h2>

<p>If you spot any typo /
mistake please do let me know: I wrote the
example code adapting the one I had from a previous
project so it might be that something slipped my
mind.</p>

<p>Since I never dug <strong>that deep</strong> into
Twig it might be that some things
could be done in a cleaner way, so if
you have suggestions or feedbacks I would
strongly encourage you to go
<em>berserk mode</em> in the comments section below.</p>

<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>Being PHP or something like Smarty or xTemplate <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>Unfortunately, to do so we will have to turn off Twig&#8217;s default escaping strategy <a href='#fnref:2' rev='footnote'>↩</a></li>
    </ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuring a Symfony2 application to support SOA]]></title>
    <link href="http://odino.org/configuring-a-symfony2-application-to-support-soa/"/>
    <updated>2013-06-06T13:00:00+04:00</updated>
    <id>http://odino.org/configuring-a-symfony2-application-to-support-soa</id>
    <content type="html"><![CDATA[<p>When you think in terms of
<a href="http://odino.org/refactoring-your-architecture-go-for-soa/">Service Oriented Architecture</a>
one of the tricky things is to decide
how to organize your development workflow
in order to develop <strong>architecture</strong>,
not a single application: for example, how would
you configure deployments (when you need
to deploy <strong>part</strong> of your architecture, not
just a web application) or push cross-service
features to your SCM?</p>

<!-- more -->


<p>This article gives an overview of the constraints
and preferences that we wanted to implement
in our SOA, which is mainly done with Symfony2,
but most of it can be read in a
framework/language-agnostic key.</p>

<h2>Problems</h2>

<p>We can at least identify 3 problems which pop
up after you decide to layer your architecture
and avoid <a href="http://www.slideshare.net/odino/the-rocket-internet-experience-phptostart-2013-in-turin/103">a monolithic approach</a>:</p>

<ul>
<li><p>given that every of your service will require
some time (1~5 minutes) to be deployed, how do you
ensure that you can release a new version of a service
without the need of updating <strong>all</strong> the other
services?
If you have, for example, 9 machines and 3 services
(A, B and C, 3 machines for each service),
you cant really afford to <strong>deploy everywhere</strong>
when you need to update just the service A, because
you might need to shutdown service B and C during the
deployment, while they dont really need to be updated.
The solution here would be to update just a bunch of
your servers</p></li>
<li><p>how do you create <em>Pull Requests</em> and organize your
repositories? This is not a trivial question: if you
need a feature that involves changes in services A and B,
and you have 2 repositories you will need to add some
overhead on top of every single operation that you
would usually do with a new feature</p></li>
<li><p>is your software able to automatically support SOA?
By this I mean, when you want to add a new service,
how easy is to configure your architecture to be able
to support the new layer? Of course, you would need
something that lets you do this in a matter of a minute</p></li>
</ul>


<h2>Deployments</h2>

<p>As I stated earlier, the solution is to be able
to specify, upon deployments, which services need
to be updated, and your best friend, here, could
be something like <a href="https://github.com/capistrano/capistrano">Capistrano</a>.</p>

<p>If you ever worked with capistrano, you know
that deployments basically depend on the <code>deploy.rb</code> file,
in which you can configure different <strong>stages</strong> of your
architecture:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:stages</span><span class="p">,</span> <span class="sx">%w(live staging)</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:default_stage</span><span class="p">,</span> <span class="s2">&quot;staging&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/ext/multistage&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the example, weare declaring that our application
can be deployed on 2 stages, <code>live</code> and <code>staging</code>; by doing a
<code>cap live deploy</code> or <code>cap deploy</code> you are ready to either deploy to your live
servers or staging ones, after configuring the staging
files (<code>live.rb</code> and <code>staging.rb</code>):</p>

<figure class='code'><figcaption><span>An example live.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">role</span> <span class="ss">:web</span><span class="p">,</span>        <span class="s2">&quot;company.com&quot;</span>
</span><span class='line'><span class="n">role</span> <span class="ss">:app</span><span class="p">,</span>        <span class="s2">&quot;company.com&quot;</span><span class="p">,</span> <span class="ss">:primary</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="n">role</span> <span class="ss">:db</span><span class="p">,</span>         <span class="s2">&quot;company.com&quot;</span><span class="p">,</span> <span class="ss">:primary</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:app_environment</span><span class="p">,</span> <span class="s2">&quot;live&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span>   <span class="s2">&quot;/var/www/htdocs/</span><span class="si">#{</span><span class="n">application</span><span class="si">}</span><span class="s2">.</span><span class="si">#{</span><span class="n">app_environment</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This still doesn&rsquo;t solve the problem of
<strong>just deploying a single service</strong>, but to
overcome it, thanks to the capistrano <code>multistage</code>
extension, it&rsquo;s a matter of configuring a few deployment
files.</p>

<p>For example, here&rsquo;s how you would write your deployment
files once you have a couple services (<code>A</code> and <code>B</code>):</p>

<figure class='code'><figcaption><span>deploy.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:stages</span><span class="p">,</span> <span class="sx">%w(a-live a-staging b-live b-staging, live, staging)</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:default_stage</span><span class="p">,</span> <span class="s2">&quot;staging&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/ext/multistage&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>a-live.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">role</span> <span class="ss">:web</span><span class="p">,</span>        <span class="s2">&quot;a.company.com&quot;</span>
</span><span class='line'><span class="n">role</span> <span class="ss">:app</span><span class="p">,</span>        <span class="s2">&quot;a.company.com&quot;</span><span class="p">,</span> <span class="ss">:primary</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="n">role</span> <span class="ss">:db</span><span class="p">,</span>         <span class="s2">&quot;a.company.com&quot;</span><span class="p">,</span> <span class="ss">:primary</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:app_environment</span><span class="p">,</span> <span class="s2">&quot;live&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span>   <span class="s2">&quot;/var/www/htdocs/</span><span class="si">#{</span><span class="n">application</span><span class="si">}</span><span class="s2">.</span><span class="si">#{</span><span class="n">app_environment</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you see, we are creating a few different stages:</p>

<ul>
<li><code>serviceName-environment</code> (ie. a-live), which includes servers for a
specific environment of a service</li>
<li><code>environment</code> (ie. live), which includes the entire architecture,
useful in those cases when you really want to deploy
the entire architecture<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup></li>
</ul>


<p>For Symfony2, to ease your job, you can use
<a href="http://capifony.org/">capifony</a> which takes
care of configure the remaining,
specific, crucial parts of the deployment for the
framework (such as clearing and warming up the cache,
installing the dependencies via composer and so on).</p>

<h2>Software lifecycle</h2>

<p><img class="left" src="http://odino.org/images/cylinders.png"></p>

<p>Ah, good old SCM problems!</p>

<p>Let&rsquo;s say your are working on a traditional, monolithic application:
you branch to implement a new feature, commit, push, open
a pull request, the PR gets merged, deployed on staging, tested and
then goes to live; very simple as well as efficient:
<strong>zero overhead</strong>.</p>

<p>You might think that in SOAs this is not different: you <code>cd</code> into a
specific&rsquo;s service repository, branch to
implement a new feature, commit, push, open
a pull request, the PR gets merged in that repository, the service gets deployed
on its staging servers, tested and then goes to live;
very simple as well as efficient?</p>

<p>No, at all.</p>

<p>Thing is, often you will need to develop <strong>cross-service
features</strong>, which require code to be updated in N different
repositories: as a result, you will need to open N pull requests;
<span class='pullquote-right' data-pullquote='to be on the safe side, being able to rollback the
entire architecture is a must'>
if you think that this is not a problem, consider what happens
once you pack and test everything and are ready to go live:
a critical bug is found, and it couldn&rsquo;t have been discovered
earlier since it just happens due to some specific configuration
that you have on the live environments: time to <strong>rollback N new services</strong>.</p>

<p>Since rollbacking is a very critical operation<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>, you
want to rollback each of the affected services separately, which makes your
downtimes N times slower than a usual, monolithic rollback: in these
cases, to be on the safe side, being able to rollback the
entire architecture is a must.
</span></p>

<p>That&rsquo;s why I would advice to keep all of your services under
one repositories, to avoid overheads:</p>

<ul>
<li>N projects in your IDE</li>
<li>N SCM operations (<code>git checkout -b myBranch</code> as well as <code>git push origin myBranch</code>)</li>
<li>N pull requests</li>
<li>N code reviews</li>
</ul>


<p>Due to this, honestly, I don&rsquo;t really see the need of separating services
into different repositories: when you deploy, you deploy a tag of the architecture
itself (only on the servers which host the services to be updated with that tag),
when you rollback, you rollback the entire architecture to a specific
version.</p>

<p><img class="left" src="http://odino.org/images/baby-birds.jpg"></p>

<p>This seems to go against what I preached earlier, while talking
about deployments, but the truth is that you want to be on the safe side
once something goes wrong: you can optimize deployments so that you can
just deploy some services, but in case of rollback, you need to take an
immediate, &ldquo;total&rdquo; action to <strong>restore all of your services</strong>.</p>

<p>Consider the situation from a very similar perspective coming
from a very, very different context: cultivate an healthy colony of newborns
in nature &ndash; as opposed to maintaining an healthy architecture on the internets.</p>

<p>Exactly like the mom of newborn birds, when it comes to feed (update)
them, you would give the weaker ones, in order to help them develop as healthy
as their stronger brothers, the biggest meals; but when it comes
to rescue (rollback) them from a predator, you would crave for having an
option to move them all in one go, without the risk of moving them one by
one, leaving the unluckiest ones defenseless against their own fate.</p>

<h2>Configuring new services in Symfony2</h2>

<p><img class="right" src="http://odino.org/images/cubic-architecture.jpg"></p>

<p>This post has to come to an end dealing with Symfony2,
since, in our experience,
<a href="http://odino.org/why-we-choose-symfony2-over-any-other-php-framework/">we have decided to go SOA with this framework</a>:
all in all, we found that due to the integration with capistrano
and the concept of bundles, together with the ability to have
per-bundle specific hostnames, this framework is pretty friendly
towards the ideas and constraints that we want to implement in
our SOA: what we&rsquo;ve seen is no rocket science, and even
the approach that we are using with Symfony2 is nothing
extraordinary, but it helps maintaining a very clean and
efficient workflow while developing a SOA.</p>

<p>As I said, for deploying you might want to use capifony,
and when it comes to isolate services in just one repository
we realized that a good solution would be to have <strong>one
Symfony2 application</strong> and create <strong>a bundle for each service</strong>
that we need.</p>

<p>Thanks for the capabilities of Symfony2&rsquo;s routing
mechanism, you can also bind a subdomain to a specific
bundle; once you create the bundle, you can tell symfony
that the routes of that specific bundle can be matched only
if the subdomain of the application matches a particular
string:</p>

<figure class='code'><figcaption><span>app/config/routing.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mycompany_service_a:
</span><span class='line'>    resource: <span class="s2">&quot;@AcmeServiceABundle/Resources/config/routing.yml&quot;</span>
</span><span class='line'>    prefix:   /
</span><span class='line'>    host:     service-a.mycompany.com
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>src/Acme/ServiceABundle/Resources/config/routing.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mycompany_service_a_index:
</span><span class='line'>    pattern:  /index/<span class="o">{</span>whateverParameter<span class="o">}</span>
</span><span class='line'>    defaults: <span class="o">{</span> _controller: AcmeServiceABundle:Default:index <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, the route <code>mycompany_service_a_index</code> will only
be matched when the URL is using the hostname
<code>service-a.mycompany.com</code>: for example, <code>http://mycompany.com/index/param</code>
won&rsquo;t match it; this is pretty interesting since it gives you the
flexibility to develop features in just once repository, on
<strong>as many services as you want</strong>.</p>

<p>We are still heavily experimenting, but out of a few approaches &ndash;
for example <a href="http://symfony.com/doc/2.0/book/routing.html#prefixing-imported-routes">route prefixing</a> &ndash;
we decided to go on with the ones I explained here for cleanness,
clarity, efficiency and security of your development cycles
and architecture: if your experience suggests something different
or you want to share doubts, feel free to abuse of the comments
section, since I am very open and interested to discuss this topic.</p>

<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>Cases such as disaster recovery or deployments to a brand new servers&#8217; set (for example, if you want to switch from AWS to another provider) <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>Rollbacking, per se, shouldn&#8217;t be a pain in the ass, but you need to focus on it in order to reduce mistakes in an already-critical situation <a href='#fnref:2' rev='footnote'>↩</a></li>
    </ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Securing your HTTP API with JavaScript Object Signing and Encryption]]></title>
    <link href="http://odino.org/securing-your-http-api-with-javascript-object-signing-and-encryption/"/>
    <updated>2013-06-04T00:31:00+04:00</updated>
    <id>http://odino.org/securing-your-http-api-with-javascript-object-signing-and-encryption</id>
    <content type="html"><![CDATA[<p>One thing that is always difficult, enough to
deserve <a href="http://www.amazon.com/Ajax-Security-Billy-Hoffman/dp/0321491939">its own book</a>,
is to <strong>secure HTTP API</strong> that interact with client-side
applications: today, after a discussion about how to face
the problem in our company, we bumped into the
<a href="http://datatracker.ietf.org/doc/draft-ietf-jose-json-web-signature/?include_text=1">JOSE</a>
&ndash; JavaScript Object Signing and Encryption &ndash;
specification.</p>

<!-- more -->


<p>Basically, the specification defines 4 entities:</p>

<ul>
<li>JWS, <a href="http://tools.ietf.org/html/draft-jones-json-web-signature-04">JSON Web Signature</a>,
a signed representation of data</li>
<li>JWT, <a href="http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html">JSON Web Token</a>,
a representation of data
(it differs from JWS as JWT is not signed)</li>
<li>JWE, <a href="http://self-issued.info/docs/draft-ietf-jose-json-web-encryption.html">JSON Web Encryption</a>,
an encrypted JSON representation of data</li>
<li>JWA, <a href="http://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms-00">JSON Web Algorithms</a>,
a list of safe algorithms to be used with JWS and JWE</li>
</ul>


<p>For the sake of basic knowledge, we will only have a look
at JWS and JWT / JWE now: the specifications about these
entities are quite extensive and not very straightforward,
so for further details you should <strong>really</strong> give them
a look.</p>

<p><img class="right" src="http://odino.org/images/jws.png"></p>

<h2>JWT</h2>

<p>Basically, the token (JWT) is the simplest structure
that you will deal with while implementing JOSE in our
architecture; it is a string representation of some data
base64 encoded (other types of encoding might be applied, but
this is not madatory): the JWT differs from raw base64-encoded
data since it also includes informations about the encoding
itself, in the token&rsquo;s header; by concatenating the base64-encoded
version of the token header and payload (the actual data) you
obtain what the specification calls <strong>signature input</strong>, which will
then be used to create the signature (JWS).</p>

<h2>JWS and JWE</h2>

<p>After the JWT comes the JWS, which is a signed representation
of the JWT; it differs from the token just because of the
signature; on an higher step of the ladder comes the JWE instead,
which lets you encrypt the data in order to achieve an higher security
level: the <a href="http://self-issued.info/docs/draft-ietf-jose-json-web-encryption.html#JWEExamples">examples in the ietf draft</a>
show you how to create JWEs with a pair of private /
public keys.</p>

<h2>Use case: how to authenticate stateless AJAX calls?</h2>

<p><img class="left" src="http://odino.org/images/jsw-auth.png"></p>

<p>One of the needs that you might have is to,
from JavaScript, make authenticated HTTP calls to
one of your webservices: since you don&rsquo;t want to
expose the WS credentials on the JS service (the
credentials would be readable by any client) a good
solution might be to generate a JWS with a private
OpenSSL key in your webservice, store it into a cookie
accessible to the JS service, which would execute
those calls including that cookie<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>, which you can then
verify while authenticating the call.</p>

<p>This workflow is pretty easy to understand, but the actual
implementation is more than tricky, since the
specification is quite abundant &ndash; especially about
encryption algorithms.</p>

<p>In PHP we can use at least 3 libraries: one of them,
<a href="https://github.com/ritou/php-Akita_JOSE">Akita_JOSE</a>,
is pretty old (since the last commit was more than
7 months ago) but is very understandable and quite
easy to use; another one, <a href="https://packagist.org/packages/gree/jose">gree/jose</a>,
has itw own package on packagist and can be easily
installed via composer: from a fast look at the
<a href="https://github.com/gree/jose">source code on GitHub</a> it looks good,
even though it needs the <a href="http://phpseclib.sourceforge.net/">phpsec</a>
library to be able to work<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>.</p>

<p>The third option, which is the one that <a href="https://github.com/namshi/jose">I built in the last couple of hours</a>,
is <a href="https://packagist.org/packages/namshi/jose">namshi/jose</a>,
which is very, very easy to use<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>: it currently only
supports the <a href="https://github.com/namshi/jose/blob/master/src/Namshi/JOSE/Signer/RS256.php">RSA algorithm</a>
with <code>sha256</code> hashing, but I guess that implementing other
algorithms is less than trivial.</p>

<p>For example, let&rsquo;s see how you would generate the JWS
to be stored in a cookie:</p>

<figure class='code'><figcaption><span>Generating a JWS after authentication and storing it into a cookie</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Namshi\JOSE\JWS</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$username</span> <span class="o">==</span> <span class="s1">&#39;correctUsername&#39;</span> <span class="o">&amp;&amp;</span> <span class="nv">$pass</span> <span class="o">=</span> <span class="s1">&#39;ok&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$user</span> <span class="o">=</span> <span class="nx">Db</span><span class="o">::</span><span class="na">loadUserByUsername</span><span class="p">(</span><span class="nv">$username</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$jws</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">JWS</span><span class="p">(</span><span class="s1">&#39;RS256&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$jws</span><span class="o">-&gt;</span><span class="na">setPayload</span><span class="p">(</span><span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;uid&#39;</span> <span class="o">=&gt;</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="na">getid</span><span class="p">(),</span>
</span><span class='line'>    <span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$privateKey</span> <span class="o">=</span> <span class="nb">openssl_pkey_get_private</span><span class="p">(</span><span class="s2">&quot;file://path/to/private.key&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$jws</span><span class="o">-&gt;</span><span class="na">sign</span><span class="p">(</span><span class="nv">$privateKey</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">setcookie</span><span class="p">(</span><span class="s1">&#39;identity&#39;</span><span class="p">,</span> <span class="nv">$jws</span><span class="o">-&gt;</span><span class="na">getTokenString</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and then the apps that want to execute authenticated
calls on behalf of the user by using this cookie just need
to include it in these calls; the server will just need
to verify that the JWS in the cookie is valid:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Namshi\JOSE\JWS</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$jws</span>        <span class="o">=</span> <span class="nx">JWS</span><span class="o">::</span><span class="na">load</span><span class="p">(</span><span class="nv">$_COOKIE</span><span class="p">[</span><span class="s1">&#39;identity&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="nv">$public_key</span> <span class="o">=</span> <span class="nb">openssl_pkey_get_public</span><span class="p">(</span><span class="s2">&quot;/path/to/public.key&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$jws</span><span class="o">-&gt;</span><span class="na">verify</span><span class="p">(</span><span class="nv">$public_key</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$paylod</span> <span class="o">=</span> <span class="nv">$jws</span><span class="o">-&gt;</span><span class="na">getPayload</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">echo</span> <span class="nb">sprintf</span><span class="p">(</span><span class="s2">&quot;Hey, my JS app just did an action authenticated as user #%s&quot;</span><span class="p">,</span> <span class="nv">$payload</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it: far from being a stable library, this is more a
proof of concept that we, an Namshi, would like to see developing
in the next weeks / months.</p>

<p>As always, comments, rants or &ndash; even better &ndash; pull requests are
<strong>more than welcome</strong>!</p>

<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>One of the disadvantages of this approach is that it relies on cookies, only available in the HTTP protocol. If you want to use another protocol for you application - a very rare and extreme use case - this wouldn&#8217;t work for you. <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>I honestly never heard of this library before, so I can&#8217;t really say what it does and why it&#8217;s needed <a href='#fnref:2' rev='footnote'>↩</a></li><li id='fn:3'>Since I&#8217;m not an expert in encryption and security, I would suggest to give it a look and come up with feedbacks <a href='#fnref:3' rev='footnote'>↩</a></li>
    </ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why our business choose Symfony2 over any other PHP framework]]></title>
    <link href="http://odino.org/why-we-choose-symfony2-over-any-other-php-framework/"/>
    <updated>2013-05-27T22:16:00+04:00</updated>
    <id>http://odino.org/why-we-choose-symfony2-over-any-other-php-framework</id>
    <content type="html"><![CDATA[<p>Everyone knows that I am a big fan of the
Symfony2 ecosystem, and going SOA with
this framework was a very trivial decision
for us at <a href="http://en-ae.namshi.com">Namshi</a>;
all in all, besides personal preferences,
there is a plethora of reasons to choose
this framework among the others available
in PHP, so I am going to list the most
important factors that influenced our
decision.</p>

<p>Believe it or not, all of the following
factors matter <strong>first for the business</strong>,
then for the developers.</p>

<!-- more -->


<h2>Testing</h2>

<p><img class="right" src="http://odino.org/images/behat.png"></p>

<p>We are firm believers in automated test practices,
and providing a layer that integrates very easily
with testing tools (such as Behat or PHPUnit) is a
must for us.</p>

<p>Symfony2 is a testing-prone framework because:</p>

<ul>
<li>it is well decoupled, so <em>unit testing</em> becomes very easy
since you can mock objects, isolate classes and inject stub
dependencies very easily</li>
<li>it provides a first layer for functional testing (with PHPUnit):
being an HTTP-centric framework, it provides a <a href="http://symfony.com/doc/2.0/book/testing.html#your-first-functional-test">base class</a>
that lets you simulate HTTP requests and examine the output; needless
to say, these kind of tests are way faster than the ones that you
would write with tools like Selenium, since they don&rsquo;t have the
overhead of testing with an actual browser</li>
<li>there is a <a href="http://extensions.behat.org/symfony2/">Behat extension</a>
that lets you integrate the framework with this behavioral testing tool</li>
</ul>


<p>At the end, you can see how Symfony2 and the ecosystem around it
provide the proper toolset to run <strong>unit</strong>, <strong>functional</strong> and
<strong>behavioral</strong> tests.
If you do care about testing, this is already a
huge point: we can&rsquo;t afford our developers to <strong>waste</strong>
a huge portion of their time doing manual testing, and
we don&rsquo;t want to increase overhead to build a
manual QA team; since we are a technology startup,
we should take advantage of technology to automate
expensive tasks that harm the business, like
manual testing<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.</p>

<h2>Debugging</h2>

<p>I kind of had so much fun when, while still working
with symfony 1.4, I saw people developing with
frameworks like Yii or Zend Framework 1,
beating their heads on their desks tying to
understand which view to modify, var_dumping
SQL queries to output them and so on:
symfony 1.4 already had a very powerful
debug toolbar that would present all of these
informations in order to ease debugging.</p>

<p>Symfony2 goes beyond what we had before,
providing a way more powerful, extensible
toolbar and an integrated profiler.</p>

<p><img class="right" src="http://odino.org/images/symfony2-profiler.png"></p>

<p>Database inspection will let you realize
how many queries you are running and see the
SQL of all of them, with a nice overview of the
time they take, while the profiler itself
includes informations about every step
of the application: for example, with Joomla,
can you tell this easily how long it took to
render a particular view and how much memory
was used to execute a controller&rsquo;s action?</p>

<p>Now, imagine each of your developers
(let&rsquo;s say you have a team of 6),
spending 1 hour (very conservative estimate)
out of 40 (a working week) trying to obtain
informations that debugging tools natively give you:
it&rsquo;s almost a day per week; multiply that day for 52
weeks in a year and you will end up loosing
one of your developers for two moths.</p>

<p>We <strong>all</strong> honestly can&rsquo;t afford to let a guy
leave the company for 2 months for free, so why
would we keep using counterproductive tools?</p>

<h2>Doctrine 2</h2>

<p>It is no news that we, at Namshi,
<a href="http://odino.org/refactoring-your-architecture-go-for-soa/">are working with a Service-Oriented Architecture</a>,
and we are highly benefiting from the easy
integration that Symfony2 provides for
Doctrine.</p>

<p>One of the rules of thumb of designing
SOAs is that you can provide access to the
same data source to different services:
in simple terms, instead of talking via
webservices or messaging queues, services
can simply access the data stored <em>somewhere</em>
by other ones.</p>

<p><img class="left" src="http://odino.org/images/doctrine-cli.png"></p>

<p>Well, Doctrine 2 is the cherry on top of the
cake to access that <em>somewhere</em>: natively
providing support for multiple DB connections
and object-relational mappings, you can safely
use this tool, within Symfony2, to handle read
and writes to different databases without
polluting the domain model of each of the services
that take advantage of Doctrine; in addition to this,
I should enumerate the huge list of good things that
working with a data mapper like Doctrine 2 brings
on the table.</p>

<p>On another note, sharing the data model among different services
helps you overcoming though situations
where webservices or messaging queues are not
enough: think about a service which, due to
an update, needs to modify half a milion records
that &ldquo;belong&rdquo; to another service; of course,
istantly having 500k messages in a queue implies
a long, very long time to process them, while
a webservice might not be fully ok with sending
a huge payload over the HTTP protocol &ndash; and,
moreover, how do you start testing this feature,
when your developers need to send a lot of MB
through their browser? It is painful, believe me.</p>

<p>At this point, the ability of directly accessing
different DBs come out as a swiss-army knife, as
you can directly execute the 500k updates, in
batch, from the original service.</p>

<h2>Deployments</h2>

<p>Symfony2 has an <em>out of the box</em>
<a href="http://capifony.org/">integration with Capistrano</a>,
the most popular automated
deployment tool in the market.</p>

<p>This means that you should forget about
wasting time, money and energy to develop
your own in-house solution to automate
deployments or, even worse, rely on
manual procedure, which are prone to
errors where it hurts the most, on the
&ldquo;live server&rdquo;.</p>

<h2>DIC</h2>

<p>Let&rsquo;s say that you, for example, are
using <a href="http://graylog2.org/">Graylog2</a>
to handle logs in your application:
while you are developing locally, you
won&rsquo;t have a graylog2 server to connect to,
since it might be that you want to keep
your machine a bit cleaner and you might
find more useful to read local logs
from a file in the filesystem, or directly
output them to the browser.</p>

<p>In Symfony2, thanks to the <a href="http://symfony.com/doc/master/book/service_container.html">dependency-injection container</a>,
you can define the logger as a service:</p>

<figure class='code'><figcaption><span>config.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>logger:
</span><span class='line'>    class: <span class="s1">&#39;Monolog\Logger&#39;</span>
</span><span class='line'>    arguments:
</span><span class='line'>        name:           <span class="s2">&quot;applicationName-%kernel.environment%&quot;</span>
</span><span class='line'>    calls:
</span><span class='line'>        - <span class="o">[</span> pushHandler, <span class="o">[</span> @monolog_handler.graylog <span class="o">]</span> <span class="o">]</span>
</span><span class='line'>monolog_handler.graylog:
</span><span class='line'>    class: <span class="s1">&#39;Monolog\Handler\GelfHandler&#39;</span>
</span><span class='line'>    arguments:
</span><span class='line'>        publisher: @gelf.message_publisher
</span><span class='line'>        level:     200
</span></code></pre></td></tr></table></div></figure>


<p>and, for development environments, you
can simply override the configuration in
the <code>config_dev.yml</code> file:</p>

<figure class='code'><figcaption><span>config_dev.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>monolog_handler.graylog:
</span><span class='line'>    class: <span class="s1">&#39;Monolog\Handler\StreamHandler&#39;</span>
</span><span class='line'>    arguments:
</span><span class='line'>      stream: <span class="s2">&quot;php://stdout&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will allow you to output errors that
would normally go to graylog2 directly to
the developer&rsquo;s browser, easing debugging
when you can afford to display errors in
the browser &ndash; thing that is not possible
who&rsquo;s viewing your application is a
potential customer.</p>

<p>Apart from all the technicalities involved
in using a DIC, I would like to focus on
one point: again, simplicity and speed to implement a
solution to a problem (having different log
handlers depending on the application&rsquo;s environment,
in this case) are a winning factor for your
development team, which is translated in <strong>more
productivity for your company</strong>.</p>

<h2>Bundles</h2>

<p>When we kickstarted our first Symfony2-based
service in our architecture, we decided to meld
together 2 applications that support our CRM
and ERP systems: being inside Symfony2, these
layers are <strong>fully isolated</strong> in separate bundles,
giving us the ability of phisically decoupling them
in 2 installations in a matter of minutes.</p>

<p>Bundles are probably one of the most powerful
concepts of Symfony2, since they are
micro-applications inside your main application:
being able to totally separate logics from different
domains helps you in keeping a clean separation
of concerns and autonomously develop every single
feature of your domain.</p>

<h2>Declarative code</h2>

<p>Consider the following snippet, written using the
<a href="http://symfony.com/doc/master/components/finder.html">Symfony2 Finder component</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\Finder\Finder</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Zend_Service_Amazon_S3</span> <span class="k">as</span> <span class="nx">Amazon_S3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$s3</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Amazon_S3</span><span class="p">(</span><span class="nv">$key</span><span class="p">,</span> <span class="nv">$secret</span><span class="p">);</span>
</span><span class='line'><span class="nv">$s3</span><span class="o">-&gt;</span><span class="na">registerStreamWrapper</span><span class="p">(</span><span class="s2">&quot;s3&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$finder</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Finder</span><span class="p">();</span>
</span><span class='line'><span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">(</span><span class="s1">&#39;photos*&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">size</span><span class="p">(</span><span class="s1">&#39;&lt; 100K&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">date</span><span class="p">(</span><span class="s1">&#39;since 1 hour ago&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">in</span><span class="p">(</span><span class="s1">&#39;s3://bucket-name&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="nv">$file</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">print</span> <span class="nv">$file</span><span class="o">-&gt;</span><span class="na">getFilename</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After your <strong>first</strong> look at this code, you already know
what it is doing: now imagine that your team of developers
need to, instead, try to understand how the Drupal
framework works.</p>

<p>Taken from <a href="https://github.com/drupal/drupal/blob/7.x/modules/comment/comment.admin.inc#L271">Drupal&rsquo;s source code</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Process comment_confirm_delete form submissions.</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">function</span> <span class="nf">comment_confirm_delete_submit</span><span class="p">(</span><span class="nv">$form</span><span class="p">,</span> <span class="o">&amp;</span><span class="nv">$form_state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$comment</span> <span class="o">=</span> <span class="nv">$form</span><span class="p">[</span><span class="s1">&#39;#comment&#39;</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// Delete the comment and its replies.</span>
</span><span class='line'>  <span class="nx">comment_delete</span><span class="p">(</span><span class="nv">$comment</span><span class="o">-&gt;</span><span class="na">cid</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">drupal_set_message</span><span class="p">(</span><span class="nx">t</span><span class="p">(</span><span class="s1">&#39;The comment and all its replies have been deleted.&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="nx">watchdog</span><span class="p">(</span><span class="s1">&#39;content&#39;</span><span class="p">,</span> <span class="s1">&#39;Deleted comment @cid and its replies.&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;@cid&#39;</span> <span class="o">=&gt;</span> <span class="nv">$comment</span><span class="o">-&gt;</span><span class="na">cid</span><span class="p">));</span>
</span><span class='line'>  <span class="c1">// Clear the cache so an anonymous user sees that his comment was deleted.</span>
</span><span class='line'>  <span class="nx">cache_clear_all</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$form_state</span><span class="p">[</span><span class="s1">&#39;redirect&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;node/</span><span class="si">$comment-&gt;nid</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m far from saying that Drupal sucks, but some
questions rise into my mind:</p>

<ul>
<li>why do I have a <code>$form</code> and a separate <code>$form_state</code>?</li>
<li>what is <code>watchdog()</code> doing? Is it used for
logging? Or to display flash messages?</li>
<li>what is a <code>cid</code>? And what about the <code>nid</code>?</li>
<li>why should I clear my entire application&rsquo;s
cache to notify a user of a change?</li>
</ul>


<p>See, you don&rsquo;t want your developers to have to go
through an entire application to understand what
a piece of code does.</p>

<h2>Best practices</h2>

<p>Symfony2 is a framework made to take advantage
of clean and clear tested patterns as well as
tools to improve the final developer&rsquo;s
productivity: imagine your team, working
six months on this framework; how much would
they learn? How many structural changes
would they be able to do on your application without
introducing regressions?</p>

<p><img class="right" src="http://odino.org/images/best-practice.jpg"></p>

<p>For startups, by the way, a huge plus comes from
the fact that being highly decoupled, Symfony2 helps
when you want to drastically replace a piece of software,
or an adapter, with another one: for example,
thanks to the dependency-injection container,
you would be able to replace application services
with others that have the same API, but a different
implementation.</p>

<p>It is clear enough that Symfony2 provides the
flexibility you need to reach a very short
<em>time to market</em> and increases your developers&#8217;
awareness and efficiency by giving them the
guidance and the tools they need to care about
the domain of your services and not about how
many bugs they would introduce by changing an
untested piece of code.</p>

<h2>All in all&hellip;is it Symfony2?</h2>

<p>A very simple question that you should ask
yourself at the end of this reading is:
but, all in all, is this all thanks to
Symfony2 or its surrounding environment?</p>

<p>It is its surrounding environment, which
was born thanks to the framework itself:
when Symfony2 was released, no other framework
had the same level of quality that the open source
product from SensioLabs could offer;
a natural effect of this was that the
majority of well-known open source
PHP developers got amused by this framework
and embraced its way.</p>

<p>Basically, Symfony2 is a framework chosen by
the community, thus it can take advantage of
all the efforts of the OS developers around it:
from automated deployment tools to fully integrated
ORMs, from testing frameworks to tutorials
and best practices, through native, advanced
debugging tools, Symfony2 is, as of today the most
complete framework available in the PHP ecosystem
when you take in consideration learning curve,
integrations, stability and performances (don&rsquo;t forget
that one of <a href="http://highscalability.com/blog/2012/4/2/youporn-targeting-200-million-views-a-day-and-beyond.html">top 100 website in the Alexa rank</a>
is powered by Symfony2<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>).</p>

<p>Can other frameworks do all of this?</p>

<p>For the benefit of your <strong>business</strong>, this
is the main question that you should ask
yourself.</p>

<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>But - drumroll - since we are an e-commerce company, we always need to ensure that some critical parts of the system, like checkouts, are tested by a human reenacting our customers&#8217; behavior. So yes, for a few, business-critical things, we really *want* to do manual tests. <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>Even though I am sorry for using *that* website as an example, it is a very useful use-case when you consider its technical stack. <a href='#fnref:2' rev='footnote'>↩</a></li>
    </ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automated tests from a novice's perspective]]></title>
    <link href="http://odino.org/automated-tests-from-a-novice-perspective/"/>
    <updated>2013-05-27T22:01:00+04:00</updated>
    <id>http://odino.org/automated-tests-from-a-novice-perspective</id>
    <content type="html"><![CDATA[<p>Today I got one of those moments of pride
when one of our developers, who is working
since &ndash; roughly &ndash; a year, decided to send an
email to the team after working on automated
tests for the first weeks of his career:</p>

<blockquote><p>Automated testing is great idea </p><p>If you have a ticket which requires a lot of changes (20 files, for example) Automated tests are very helpful and save your time, it saves about 30% of your time; even if it&#8217;s still not perfect, its good<br/>For example look at this PR [link to a PR on Github], if i want to test all cases i need about half a day but it only took half an hour</p></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Doctrine 80% faster?]]></title>
    <link href="http://odino.org/doctrine-80-percent-faster/"/>
    <updated>2013-04-21T10:54:00+04:00</updated>
    <id>http://odino.org/doctrine-80-percent-faster</id>
    <content type="html"><![CDATA[<p>A post in the <em>doctrine-dev</em> mailing list
caught my attention last week, and I want to
share its insights with you.</p>

<!-- more -->


<p>The good <a href="https://github.com/Ocramius">Marco Pivetta</a>
took initiative in adding proxy generation for hydrators,
and in <a href="https://github.com/Ocramius/ProxyManager/pull/29">a lonely branch</a>
he&rsquo;s pretty far with the progress on the matter: his
latest tests show that the <a href="https://travis-ci.org/Ocramius/ProxyManager/jobs/6485136#L127">hydration process is improved by 80%</a>
which is a very good news, considered metadata-based
software usually need to find a way to drastically
improve performances because of the basic lack of
performances due to having to read metadata.</p>

<p>Hoping to see this changes integrated in a stable
branch very soon!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My experience with our development team in Dubai: in between business, SOA and sun]]></title>
    <link href="http://odino.org/my-experience-with-our-development-team-in-dubai-in-between-business-soa-and-sun/"/>
    <updated>2013-03-29T18:08:00+04:00</updated>
    <id>http://odino.org/my-experience-with-our-development-team-in-dubai-in-between-business-soa-and-sun</id>
    <content type="html"><![CDATA[<p>Today I had the opportunity to share with the
people at the <a href="http://www.phptostart.it/">PHP.TO.START</a>
in Turin my 1-year experience in Namshi, one of
Rocket Internet&rsquo;s ventures in the Middle East.</p>

<!-- more -->


<p><img class="left" src="http://odino.org/images/phptostart2013.jpg"></p>

<p>Luckily, this was a great opportunity to meet some good
old friends and the talk went very well: of course,
the reharsal at the <a href="http://roma.grusp.org">PHP User Group in Rome</a>
earlier this week was a bless.</p>

<p>It basically deals with the phases that I experienced
with our team in Namshi, with some spicy details on
recruiting (from looking for talents to conducting
interviews), how to <strong>change processes to help people improving</strong>
(and not change people to improve processes) and
a big picture on what we were able to plan and achieve
in this year together, from a technical point of view.</p>

<p>At the end of the talk I invited everyone interested, and
I will repeat myself here, to look for the open positions
on <a href="http://en-ae.namshi.com/careers/">our careers site</a>,
since we are currently hiring a Lead Developer and a
PHP Developer (a junior or an intermediate, it&rsquo;s more
about the approach rather than the hands-on experience).</p>

<p>Here are the slides of the talk, in a slightly better (and more colored)
version compared to the ones I used in Rome:</p>

<iframe src="http://www.slideshare.net/odino/slideshelf" width="760px" height="570px" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:none;" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A brief visit to the cold lands of Italy]]></title>
    <link href="http://odino.org/a-brief-visit-to-the-cold-lands-of-italy/"/>
    <updated>2013-03-29T14:14:00+04:00</updated>
    <id>http://odino.org/a-brief-visit-to-the-cold-lands-of-italy</id>
    <content type="html"><![CDATA[<p>I&rsquo;m enjoying a relatively long &ndash; at least for me &ndash; 2 weeks &ldquo;vacation&rdquo;
back in Italy, since I was missing my friends in Rome
since <strong>exactly</strong> a year and the last time my parents saw me it
was 6 months ago.</p>

<!-- more -->


<p>Fun thing is, since I can&rsquo;t miss the opportunity
of getting back in touch with a few people, I will
be joining 4 tech events:</p>

<ul>
<li><a href="http://rome.codemotionworld.com/">Codemotion</a> &ndash; already happened, I was there on the 23rd &ndash; the conference open to
all the programming languages, in Rome</li>
<li><a href="http://roma.grusp.org/">PHP User group Rome</a>, a meetup that is held monthly, for one of
the user groups that I helped launching here in Italy, again in Rome, where I gave
a talk about assembling a mid-sized PHP team</li>
<li><a href="http://www.phptostart.it/">PHP.TO.START</a> &ndash; happening <strong>right now </strong>&ndash; a yearly event for the
north-western italian PHP community, where I&rsquo;ll be presenting the same talk I had at
the PUG Rome</li>
<li><a href="http://friuli.grusp.org/">PHP User Group Friuli</a>, another meetup organized by one of the
italian PHP User Groups, where I&rsquo;ll be presenting an <em>unknown</em> topic (at least for now)</li>
</ul>


<p>An <strong>important thing</strong>: I am actively recruiting for our company,
<a href="http://en-ae.namshi.com/careers/technology/">Namshi</a>, so if you
are interested in one of the open positions that we have right now
(in particular, Lead Developer and PHP Developer), feel free to approach
me if you find me at the upcoming events (in Turin and Udine).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring your architecture understanding SOA]]></title>
    <link href="http://odino.org/refactoring-your-architecture-go-for-soa/"/>
    <updated>2013-03-23T17:35:00+04:00</updated>
    <id>http://odino.org/refactoring-your-architecture-go-for-soa</id>
    <content type="html"><![CDATA[<p>It is no news that I work for <a href="http://en-ae.namshi.com">a company</a>
supported by <a href="http://www.rocket-internet.de">a mothership</a>
that helps most of his affiliates with know-how
and basic tools.</p>

<p>But to aim expansion, one needs to go beyond those
shared layers and start customizing his
products and services, and in terms of software development
nothing can help you more than
<a href="http://en.wikipedia.org/wiki/Service-oriented_architecture">service-oriented architectures</a>,
or <em>SOA</em>.</p>

<!-- more -->


<p>So, what&rsquo;s the goal of this post? Basically
providing our view on how we are going to
shift from our current architecture, which
is already a composite, to a more powerful
layer of services.</p>

<h2>Identifying the service</h2>

<p>One of the first steps in order to dig
into the implementation is to actually identity
a first bunch of functionalities that should be
incorporated as standalone services.</p>

<p>Usually, opportunities for new services pop up
when it&rsquo;s time to <strong>introduce a new functionality</strong>
or the cost of fixing / implementation of a
change request are too high: for example, if you
want to add the ability to send SMSes from your website,
a good service would be one which just deals with
the receiving an input event, assembling a message
and contacting the <em>real</em> SMS provider via webservice
in order to dispatch the message; another good example is
<strong>identity</strong>: if you are struggling with different userbases
that need to be in sync, a good solution would be to
centralize identities and provide a service which does,
at least, authentication.</p>

<h2>Data</h2>

<p>Another tipical question is how to manage and organize
data when you have a de-centralized architecture.</p>

<p>In SOA terms, usually data is shared among the
services but this doesnt mean that each service can&rsquo;t
have its own data-layer: it is often seen a very old
fashioned RDBMS shared across all the services and
some of them using a less traditional solution, like
a NoSQL DB; this is mainly done to achieve better
performances and different data-retrieval patterns</p>

<p>Think about legacy applications that have a model which can be
extensively customized by the end user, that usually
implement the <a href="http://en.wikipedia.org/wiki/Entity%E2%80%93attribute%E2%80%93value_model">EAV pattern</a>,
getting stuck into <strong>performance bottlenecks</strong>, while
a document-db like MongoDB or CouchDB would
perfectly solve the issue.</p>

<p>If you are running, for example, an e-commerce system,
you may want to have transactions and identities in a
solid and robust system like MSSQL, while your
frontend can actually run with MongoDB: once the user
purchases a product, via webservice you store it into
MSSQL.</p>

<h2>Services need</h2>

<p>One typical aspect, in SOA terms, is seeking answers
to our questions (read getting <em>responses</em> for our <em>requests</em>),
a problem which we can overcame with a simple solution:
when a service <strong>needs</strong> another one, we talk about APIs.</p>

<p>For example, your frontend might offer authentication, while
the Identity manager is a service providing identities to
multiple layers of your architecture: when the frontend needs
to authenticate a user, it will directly rely on the
Identity service, asking him to authenticate the user with the
credentials he or she submitted to the frontend.</p>

<p>APIs can be traditionally categorized into <a href="http://nordsc.com/ext/classification_of_http_based_apis.html">a few types</a>:</p>

<ul>
<li>mess: &ldquo;messy&rdquo; API don&rsquo;t follow structured rules (it cab be <em>plain-old XML over HTTP</em>
or a replication of DB writes and reads in JSON format); they can
be <strong>very useful</strong> when you need to kickstart a new, small and simple
API</li>
<li>HTTP API: services that semantically expose their domain model
in terms of resources, embracing the HTTP specification</li>
<li><a href="http://odino.org/hypermedia-services-beyond-rest-architectures/">REST</a>: hypermedia services</li>
<li>SOAP: services using strict interfaces between clients and servers,
following the SOAP spec</li>
</ul>


<p>No matter what, you will always find yourself dealing with APIs
if you decided to go for SOA: it is the simplest way to
provide <strong>data-exchange mechanisms to layers that don&rsquo;t fully
know each other&rsquo;s domain</strong>.</p>

<h2>Services listen</h2>

<p>Another <strong>very common</strong> scenario, is when services &ldquo;listen&rdquo;,
waiting for notifications sent across by other components of
the architecture: you are probably already thinking about
messaging queues and message notifications, and you are right.</p>

<p>A event-driven process can be achieved when we have tools
such as <a href="http://www.rabbitmq.com/">RabbitMQ</a> helping in gathering
and dispatching notifications to various parts of the architecture:
with Rabbit, a service can dispatch a message to a queue
and another one (or <strong>ones</strong>), through a daemon, consumes the message.</p>

<p>Thinking about what I mentioned earlier, an SMS-dispatching mechanism
could fit in this context really well: think about SMSes that are sent
once the user completes certain actions on your frontend (by gaining credits,
placing an order on your e-commerce or so on); once the user
completes an action, a notification will be sent out and
whoever needs to listen to that message will catch
and process it.</p>

<h2>So far so good</h2>

<p>In our fast and new journey towards integrating services into
our architecture, we are finding ourselves pretty well: it is
no news that we are using RabbitMQ and <a href="http://symfony.com">Symfony2</a>
for our new, isolated services, and that we already identified
a few services that can run on their own, decoupled context.</p>

<p>Thinking in SOA terms, by the way, brings out a new set of problems, like
thinking in terms of architecture, and not of application: you
don&rsquo;t deploy a new version of your application, you <strong>update a part
of the architecture</strong>; your system is decoupled, from the code to the
processes you use to handle them. And what about the complications in the
development environments? And which monitoring tool should I use to
understand that all the components are working alltogether? And&hellip;</p>

<p>There&rsquo;s room for generic problems that everyone faced and that we will
face as well, and I think it will be very interesting to share our
approach and the vision we had in our own context.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Symfony2 console: permission denied during autocompletion]]></title>
    <link href="http://odino.org/symfony2-console-permission-denied-during-autocompletion/"/>
    <updated>2013-03-11T10:11:00+04:00</updated>
    <id>http://odino.org/symfony2-console-permission-denied-during-autocompletion</id>
    <content type="html"><![CDATA[<p>Yesterday I faced a pretty cryptic issue
while using the Symfony2 console (<code>app/console</code>).</p>

<!-- more -->


<p>I guess the error is pretty common, and it&rsquo;s really
easy to fix, since the problem is that
<a href="https://github.com/hacfi/oh-my-zsh/commit/8c74d80fd6cdc7e1b48e7eb321a3e3a22674c3be">the binary is not executable</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chmod +x app/console</span></code></pre></td></tr></table></div></figure>


<p>&hellip;and you&rsquo;re done.</p>
]]></content>
  </entry>
  
</feed>
