<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Alessandro Nadalin]]></title>
  <link href="http://odino.org/atom.xml" rel="self"/>
  <link href="http://odino.org/"/>
  <updated>2012-05-14T01:54:34+04:00</updated>
  <id>http://odino.org/</id>
  <author>
    <name><![CDATA[Alessandro Nadalin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Use the Strategy to avoid the Switch-Case antipattern]]></title>
    <link href="http://odino.org/use-the-strategy-to-avoid-the-switch-case-antipattern/"/>
    <updated>2012-05-14T00:28:00+04:00</updated>
    <id>http://odino.org/use-the-strategy-to-avoid-the-switch-case-antipattern</id>
    <content type="html"><![CDATA[<p>In PHP we have tons of bad constructs/functions that don&#8217;t actually
help newcomers on writing good code: the <code>SWITCH/CASE</code> statement is one
of those that I hate the most, although very few developers rely on
it.</p>

<!-- more -->


<p>The statement is pretty straightfoward</p>

<figure class='code'><figcaption><span>Simple SWITCH/CASE statement</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Logger</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">logMessage</span><span class="p">(</span><span class="nv">$message</span> <span class="o">=</span> <span class="s2">&quot;CRITICAL::The system encountered a problem&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="nv">$parts</span> <span class="o">=</span> <span class="nb">explode</span><span class="p">(</span><span class="s1">&#39;::&#39;</span><span class="p">,</span> <span class="nv">$message</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$level</span> <span class="o">=</span> <span class="nv">$parts</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">switch</span> <span class="p">(</span><span class="nv">$var</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">case</span> <span class="s1">&#39;notice&#39;</span><span class="o">:</span>
</span><span class='line'>              <span class="o">...</span>
</span><span class='line'>              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="s1">&#39;critical&#39;</span><span class="o">:</span>
</span><span class='line'>              <span class="o">...</span>
</span><span class='line'>              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="s1">&#39;catastrophe&#39;</span><span class="o">:</span>
</span><span class='line'>              <span class="o">...</span>
</span><span class='line'>              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and is intended to make multiple IFs more readable.</p>

<p>It may seem useful, but at first you should recognize that <strong>multiple
IFs are already a bad smell</strong>, so, from the beginning there is something
with a code trying to make them look nicer.</p>

<p>The <a href="http://en.wikipedia.org/wiki/Strategy_pattern">Strategy pattern</a>,
one of my favourites, is a simple but powerful way to avoid writing
procedural code that relies on IFs.</p>

<p>The main concept is that you should contextualize the application&#8217;s
workflow at runtime, deciding which steps (methods) to run based on
data which is external to the method itself.</p>

<figure class='code'><figcaption><span>silly implementation of Strategy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Logger</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">logMessage</span><span class="p">(</span><span class="nv">$message</span> <span class="o">=</span> <span class="s2">&quot;CRITICAL::The system encountered a problem&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="nv">$parts</span>  <span class="o">=</span> <span class="nb">explode</span><span class="p">(</span><span class="s1">&#39;::&#39;</span><span class="p">,</span> <span class="nv">$message</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$level</span>  <span class="o">=</span> <span class="nv">$parts</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>      <span class="nv">$method</span> <span class="o">=</span> <span class="nb">sprintf</span><span class="p">(</span><span class="s1">&#39;log%sMessage&#39;</span><span class="p">,</span> <span class="nb">ucfirst</span><span class="p">(</span><span class="nv">$level</span><span class="p">));</span>
</span><span class='line'>      <span class="nv">$output</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nv">$method</span><span class="p">(</span><span class="nv">$parts</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this way we are able to isolate and keep clean the implementations
of the methods, thus the logic behind the application.</p>

<p>This means that we only need to implement submethods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">logNoticeMessage</span><span class="p">(</span><span class="nv">$message</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">logCriticalMessage</span><span class="p">(</span><span class="nv">$message</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">logCatastropheMessage</span><span class="p">(</span><span class="nv">$message</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>If this doesn&#8217;t seem important to you, consider this scenario:
you are shipping a library with the <code>SWITCH/CASE</code> in the first example;
what would happen if another developer using that library would only
like to edit the logic when a <code>catastrophe</code> message is received?</p>

<p>Yes, he would need to override the entire <code>logMessage</code> method,
<strong>loosing the possibility to benefit of future software updates</strong>
for that specific method.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Back in track with OrientDB]]></title>
    <link href="http://odino.org/back-in-track-with-orientdb/"/>
    <updated>2012-04-20T15:26:00+04:00</updated>
    <id>http://odino.org/back-in-track-with-orientdb</id>
    <content type="html"><![CDATA[<p>It&#8217;s been a while since I don&#8217;t release any update about
Orient, the PHP data mapper for OrientDB: we recently got
back on track and I have a few interesting news.</p>

<!-- more -->


<p>I just moved to Dubai, as you may know, so the last couple
of months have been a huge mess for me, while David was
doing some <a href="https://github.com/congow/Orient/tree/persistence">major experiments</a>
for the library: we only had the time, at the end of March,
to talk about OrientDB and the ODM at the
<a href="http://www.slideshare.net/ingdavidino/graph-db-inphp">Codemotion</a>.</p>

<p>Since in the last week we restarted pairing together to
finalize a few open things in the library, I will explain what
is the current status of Orient.</p>

<h2>Beta-5</h2>

<p>We decided to put back our effort on the <code>beta-5</code> release,
instead of letting me complete the issues still belonging
to this version by myself.</p>

<p>In these days we are finalizing the integration tests for
OrientDB&#8217;s native data types, and refactoring a bit the
implementation of the <strong>hydration mechanism</strong>, which will be more
configurable: we will release an ODM able to let the developer
decide what to do when an hydration error occurs (in other words,
you mapped an attribute as integer but in the OrientDB record
that attribute is mistakenly set as a date): before this
refactoring process <code>null</code> was returned by default, but now
you&#8217;ll be able to decide whether to <a href="https://github.com/congow/Orient/blob/master/src/Congow/Orient/Formatter/Caster.php#L520">force the casting or raise an exception</a> for these errors.</p>

<p>As we complete these 2 tasks, we will remove the TODOs from
the codebase and then we will release this version which,
I remind it for those who are not up-2-date with the library&#8217;s
lifecycle, is the one introducing <strong>hydration</strong>, which is the
ability to run SQL queries against an OrientDB instance and map
the results as PHP objects.</p>

<p>Similarly to Doctrine2, Orient offers the ability to map objects
from PHP to OrientDB via annotations:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Congow\Orient\ODM\Mapper\Annotations</span> <span class="k">as</span> <span class="nx">ODM</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd">* @ODM\Document(class=&quot;Address&quot;)</span>
</span><span class='line'><span class="sd">*/</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Address</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @ODM\Property(type=&quot;link&quot;)</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="nv">$city</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Doctrine ODM</h2>

<p>From the beginning, we&#8217;ve been committed in finding a way to make
<a href="https://github.com/congow/Orient/blob/master/src/Congow/Orient/Contract/Protocol/Adapter.php#L23">interoperability</a>
a feature of Orient: another side of this issue is the fact that
we tried to stick to Doctrine2&#8217;s design for lots of our problems,
from the implementation of mapping to lazy-loading through
auto-generated proxy classes.</p>

<p>In the last weeks I pro-actively asked the Doctrine2 community if they
would be happy in welcoming this project in their community, and the
responses we received were positive: as a result, after going out with
the <code>beta-5</code> release we will refactor the library&#8217;s namespaces and move
the repository on Github.</p>

<p>There will be lots of things to do, lot of code to refactor, lot of
complaints from the Doctrine2 core members because of our &#8220;strange&#8221;
code, but this is a huge step towards a more robust PHP library
for OrientDB.</p>

<h2>Beta-6</h2>

<p>After the incubation inside the Doctrine organization we will re-start
working on the <code>beta-6</code> version, which will bundle <strong>persistence</strong> - the
ability to persist mapped PHP objects into OrientDB, using a couple
well known design patterns like the <a href="http://martinfowler.com/eaaCatalog/unitOfWork.html">unit of work</a>
and the <a href="http://martinfowler.com/eaaCatalog/identityMap.html">identity map</a>.</p>

<p>I won&#8217;t commit myself in an estimate: <strong>this will take a long time</strong>,
especially if only me and <a href="http://davidfunaro.com">David</a> will keep
the good work on this library.</p>

<p>But since we had <strong>huge contributions</strong> from
<a href="https://github.com/nrk">Daniele Alessandri</a> and
are gonna be part of the Doctrine community, I bet we will be able to
deliver what promised in less than then what I currently think.</p>

<h2>RC</h2>

<p>Last but not least, there will be a few planned refactorings and feature
add-ons that we don&#8217;t need now but are mandatory for a decent stable
version, which will come as we roll out our first <code>RC</code>.</p>

<h2>Thanks, again</h2>

<p>I could not keep my effort and motivation constant during
<a href="https://github.com/congow/Orient/commit/65929ec57a2e2cb1f4af034d722e17b5339b9d48">this year</a>
without your many &#8220;thank you&#8221;, your enthusiasm and
encouraging words: this is what makes me eager to type
with my fat fingers new LoCs dealing with PHP and NoSQL.</p>

<p>This won&#8217;t be a library I wrote<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>, this is something an entire
community was waiting for and contributed to.</p>

<p>So, <em>thank y&#8217;all</em>.</p>

<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>Although I still remember the first commit on Github: I was only wearing my underwear, alone in the hall of my flat <a href='#fnref:1' rev='footnote'>↩</a></li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Y U NO access WHOIS informations in PHP?]]></title>
    <link href="http://odino.org/y-u-no-access-whois-informations-in-php/"/>
    <updated>2012-04-16T00:38:00+04:00</updated>
    <id>http://odino.org/y-u-no-access-whois-informations-in-php</id>
    <content type="html"><![CDATA[<ol class="aseries">
    <p>This post is part of the &#8221;<strong>WHOIS in PHP: consuming the Robowhois API</strong>&#8221; series; here is a list of all the articles contained this series:</p>
    <li>
        <a href="http://odino.org/a-php-library-to-retrieve-whois-informations/">A PHP library to retrieve WHOIS informations</a>
    </li>
    <li>
        <a href="http://odino.org/retrieving-raw-whois-informations-in-php/">Retrieving raw WHOIS informations in PHP</a>
    </li>
    <li>
        <a href="http://odino.org/checking-a-domain-s-availability-with-php/">Checking a domain&#8217;s availability with PHP</a>
    </li>
  <li>
    <a href="http://odino.org/y-u-no-access-whois-informations-in-php/">Y U NO access WHOIS informations in PHP?</a>
  </li>
</ol>


<p>In these days we finalized the last parts of the official
<a href="https://github.com/robowhois/robowhois-php">PHP client for the Robowhois API</a>
, and here are the changes for the <code>0.9.0</code> version.</p>

<!-- more -->


<h2>Parts and properties API</h2>

<p>As part of our job, we needed to implement the last
2 API endpoints provided by Robowhois, <code>properties</code>
and <code>parts</code>.</p>

<p>Everything is documented in the
<a href="https://github.com/robowhois/robowhois-php/blob/master/README.md">README</a>
but you can also follow the examples under the <code>sample/</code> directory:</p>

<figure class='code'><figcaption><span>Using the properties API</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Robowhois\Robowhois</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Robowhois\Exception</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">require</span> <span class="s1">&#39;vendor/.composer/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$robowhois</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Robowhois</span><span class="p">(</span><span class="s1">&#39;INSERT-YOUR-API-KEY-HERE&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$domain</span> <span class="o">=</span> <span class="nv">$robowhois</span><span class="o">-&gt;</span><span class="na">whoisProperties</span><span class="p">(</span><span class="s1">&#39;robowhois.com&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$domain</span><span class="p">[</span><span class="s1">&#39;properties&#39;</span><span class="p">][</span><span class="s1">&#39;created_on&#39;</span><span class="p">]</span> <span class="o">.</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">Exception</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;The following error occurred: &quot;</span> <span class="o">.</span> <span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Using the parts API</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Robowhois\Robowhois</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Robowhois\Exception</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">require</span> <span class="s1">&#39;vendor/.composer/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$robowhois</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Robowhois</span><span class="p">(</span><span class="s1">&#39;INSERT-YOUR-API-KEY-HERE&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$domain</span> <span class="o">=</span> <span class="nv">$robowhois</span><span class="o">-&gt;</span><span class="na">whoisParts</span><span class="p">(</span><span class="s1">&#39;robowhois.com&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$domain</span><span class="p">[</span><span class="s1">&#39;parts&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;body&#39;</span><span class="p">]</span> <span class="o">.</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">Exception</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;The following error occurred: &quot;</span> <span class="o">.</span> <span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Magic objects, behaving like arrays</h2>

<p>We implemented the <code>\ArrayObject</code> interface for the objects
returned by the API, which means that now you can access
the results of an API call just like an array:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$account</span> <span class="o">=</span> <span class="nv">$robowhois</span><span class="o">-&gt;</span><span class="na">account</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// $account is an instance of Robowhois\Account</span>
</span><span class='line'><span class="k">echo</span> <span class="nb">sprintf</span><span class="p">(</span><span class="s1">&#39;You have %d API calls left&#39;</span><span class="p">,</span> <span class="nv">$account</span><span class="p">[</span><span class="s1">&#39;credits_remaining&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>but, for those like us who like the OO synthax, we implemented
some magic to let you retrieve those values via getters, which
are built <em>on-the-fly</em> thanks to PHP&#8217;s <code>__call()</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span> <span class="nv">$account</span><span class="o">-&gt;</span><span class="na">getCreditsRemaining</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Getters are a camelized version of the array keys, and are
built thanks to the
<a href="https://github.com/robowhois/robowhois-php/blob/master/composer.json#L28">Doctrine Inflector</a>.</p>

<h2>Mapping the existing API</h2>

<p>We renamed the methods accessing the API in order to 100% reflect
the ones exposed by the API, also used in the
<a href="https://github.com/robowhois/robowhois-ruby">Ruby client</a>: so now the
<code>Robowhois\Robowhois</code> object has:</p>

<ul>
<li><code>-&gt;account()</code></li>
<li><code>-&gt;whois()</code></li>
<li><code>-&gt;whoisProperties()</code></li>
<li><code>-&gt;whoisParts()</code></li>
<li><code>-&gt;whoisRecord()</code></li>
<li><code>-&gt;whoisAvailability()</code></li>
</ul>


<h2>Simplified exceptions</h2>

<p>We initially added tons of exceptions but we eventually
decide to keep the only <code>Robowhois\Exception</code> class.</p>

<h2>Now?</h2>

<p>Wanna retrieve WHOIS informations in PHP at a
<a href="http://www.robowhois.com/pricing">decent price</a>?</p>

<p>Start consuming the Robowhois APIs, with PHP.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Search engines are making the web slower]]></title>
    <link href="http://odino.org/search-engines-are-making-the-web-slower/"/>
    <updated>2012-04-07T10:00:00+04:00</updated>
    <id>http://odino.org/search-engines-are-making-the-web-slower</id>
    <content type="html"><![CDATA[<p>Like it or not, pushing the work to the clients is
a tecnique which made the web able to scale the way
it is now: <strong>search engines are making it slower</strong> and
less scalable, as they don&#8217;t want us to do so.</p>

<!-- more -->


<p>The problem is that JavaScript - the <em>creepy</em> JavaScript -
is now recognized as a first-level programming language<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>,
although SE are around since more than a decade: thus,
crawlers and spiders, although able to interpretate basic
JS code, cannot do more complex stuff, like managing
<a href="http://handlebarsjs.com/">Handlerbars</a> or <a href="http://mnot.github.com/hinclude/">HInclude</a>.</p>

<p>Or, at least, we don&#8217;t know if they can.</p>

<p>There would be a workaround to this kind of issue, by just
<strong>serving different content for JS-aware clients</strong>, so that a
spider could see the whole resource without the need of
executing JS code: a workaround that would cost in terms of
development time, but still an acceptable workaround.</p>

<p>The problem, here, is that tis tecnique, known as <a href="http://en.wikipedia.org/wiki/Cloaking">cloacking</a>
is part of the <a href="http://en.wikipedia.org/wiki/Search_engine_optimization#White_hat_versus_black_hat">black hat SEO</a> list, so you basically can&#8217;t take
advantage of it as malicious web developers would use
cloacking to serve keyword-stuffed contents to bots and
&#8220;normal&#8221; webpages to humans, and this is something you
really want to avoid, since SERPs&#8217; relevance is an
important part of a user&#8217;s eb experience.</p>

<p>But, at least, we don&#8217;t know how search engines would react
to the workaround I just explained.</p>

<h2>What do we need?</h2>

<p>We should have clarifications from SE vendors, to know whether
they are able or not to let us take advantage of great JS-based
technologies able to make our applications scale better, or - better -
have fully JS-aware spiders and crawlers, able to elaborate
resources like real-world browsers.</p>

<p>It&#8217;s not about me, it&#8217;s not about you, it&#8217;s about the web: a faster,
and <strong>definitely better</strong>, web.</p>

<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>Mainly because of the NodeJS hype <a href='#fnref:1' rev='footnote'>↩</a></li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wanna be hired? Go get yourself a blog and a github profile]]></title>
    <link href="http://odino.org/wanna-be-hired-go-get-yourself-a-blog-and-a-github-profile/"/>
    <updated>2012-03-27T11:32:00+04:00</updated>
    <id>http://odino.org/wanna-be-hired-go-get-yourself-a-blog-and-a-github-profile</id>
    <content type="html"><![CDATA[<p>As part of my last days in <a href="http://dnsee.com">DNSEE</a> and first days in
<a href="http://rocket-internet.de">Rocket</a> I&#8217;m involved in two recruitment processes
and after the huge amount of CVs we got for DNSEE after the
<a href="http://www.codemotion.it/">Codemotion</a> I thought it would be good to
share some thoughts about <strong>my</strong> recruiting habits.</p>

<!-- more -->


<h2>European format</h2>

<p>First of all, <strong>forget about the <a href="http://en.wikipedia.org/wiki/Europass">european CV format</a></strong>:
it works when you want to work in a body rental Java company and want to
be identified with a mere number (and if you want to end up like that,
stop reading this article)<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.</p>

<p><img class="left" src="http://odino.org/images/hipster.glasses.jpg"></p>

<p>Some months ago someone on Twitter was suggesting to move the CV on
<a href="http://slideshare.net">slideshare</a>, something I really wanted to do - but
I never took the time to do so: bare in mind that reading a CV can be
funny at the beginning of the hiring process, but as you get tons of
applies, it becomes - as everything - a repetitive, thus annoying,
activity, so putting a bit of creativity on your CV will be considered
as a huge plus; <strong>the more you attract, the less you&#8217;ll be considered
the average</strong>.</p>

<p>The european format just does not work when you need to highlight
your motivation and expertise you have on interesting practices,
which is what I basically look for, at least for a first glance.</p>

<h2>It&#8217;s not where you worked unless it was The Place</h2>

<p><img class="right" src="http://odino.org/images/virgin.jpg"></p>

<p>It&#8217;s pretty common to see dozens of working experiences in a CV,
without a deep description of the position held and a summary of
your daily duties.</p>

<p>Do you think people care about <strong>where</strong> you worked or <strong>what</strong> you did?</p>

<p>Unless you have been working for some major, people won&#8217;t care about
your employer because it will never add anything to your profile, it&#8217;s
just a (bad) sign that you worked for N years at this place.</p>

<p>What I suggest is to <strong>add various aspects of your working experience</strong>,
like big customers you had to deal with, good practices like TDD or
- in general - automated test and what you brought inside the company,
like a new approach to development or a (new) technology which was
suitable for their use-case.</p>

<h2>Ideal code VS production one</h2>

<blockquote><p>Any developer can show you diamonds, but a few are able not to deliver crap to your customers.</p></blockquote>


<p>Let&#8217;s be honest for a moment: <strong>production code isn&#8217;t ideal code</strong><sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>.</p>

<p>Technical debt is something we are used to deal with and it&#8217;s not <em>that</em> big issue:
I like when developers admit that under difficult circumstances,
they took creepy shortcuts to overcome an issue which needed to
be fixed in a relatively short amount of time.</p>

<p>So, given that you won&#8217;t show your next employer your production code
(since it is intellectual property of your current company or customers)
it would be nice if you show them the top line of your skiils, maybe
via a Github profile; doing so, you give the chance to take a
look at your best code.</p>

<p><img class="right" src="http://odino.org/images/hand.jpg"></p>

<h2>Why don&#8217;t you share your thoughts with me?</h2>

<p>A big plus would be reading your blog wherever - blogspot,
posterous, etc - to gain confidence with your ideas and
what you like to talk about when not (necessarily) coding
for your current company.</p>

<p>Blogging, also once in a month, gives you the possibility
to be evaluated without the need to do anything: reading your
posts will make recruiters get in touch with you, as a person,
your style, coding skills, aims and so on.</p>

<h2>MS Excel, really?</h2>

<p>Please stop mentioning know-how on the following subjects:</p>

<ul>
<li>MS Word</li>
<li>MS Excel</li>
<li>Photoshop</li>
<li>Dreamweaver</li>
<li><em>stuff like that</em></li>
</ul>


<p>because they will make you look like <strong>a developer who doesn&#8217;t understand
its precise scope</strong>.</p>

<h2>So what?</h2>

<p>Do I have to mention that I would like to see great people joining me
and <a href="http://www.linkedin.com/company/rocket-internet-gmbh/careers">Rocket</a>
in Dubai or my former <a href="http://www.linkedin.com/company/dnsee/careers">DNSEE colleagues</a>
in Rome?</p>

<p>I did it :)</p>

<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>I give this advice although I have an Europass CV, but - as I like to say - it&#8217;s a raped-european-format CV, so not as standard as you might think <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>Since production code has a deadline and ideal code is a never-ending refactoring, I won&#8217;t listen to any objection here <a href='#fnref:2' rev='footnote'>↩</a></li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Checking a domain's availability with PHP]]></title>
    <link href="http://odino.org/checking-a-domain-s-availability-with-php/"/>
    <updated>2012-03-20T09:49:00+04:00</updated>
    <id>http://odino.org/checking-a-domain-s-availability-with-php</id>
    <content type="html"><![CDATA[<ol class="aseries">
    <p>This post is part of the &#8221;<strong>WHOIS in PHP: consuming the Robowhois API</strong>&#8221; series; here is a list of all the articles contained this series:</p>
    <li>
        <a href="http://odino.org/a-php-library-to-retrieve-whois-informations/">A PHP library to retrieve WHOIS informations</a>
    </li>
    <li>
        <a href="http://odino.org/retrieving-raw-whois-informations-in-php/">Retrieving raw WHOIS informations in PHP</a>
    </li>
    <li>
        <a href="http://odino.org/checking-a-domain-s-availability-with-php/">Checking a domain&#8217;s availability with PHP</a>
    </li>
  <li>
    <a href="http://odino.org/y-u-no-access-whois-informations-in-php/">Y U NO access WHOIS informations in PHP?</a>
  </li>
</ol>


<p>It&#8217;s been a while I don&#8217;t blog about the
<a href="https://github.com/robowhois/robowhois-php">Robowhois PHP client</a> that I&#8217;m developing
together with <a href="http://davidfunaro.com">David</a> so, since we recently released
the <code>0.8.0</code> version I want to share with you what you can do with it now.</p>

<!-- more -->


<h2>Checking a domain&#8217;s availability</h2>

<p>The <a href="http://docs.robowhois.com/api/whois/">availability API</a> is probably the
greatest feature of the <a href="http://www.robowhois.com/">Robowhois</a> webservice,
letting you check for a domain&#8217;s availability with a simple, uniform HTTP
request.</p>

<figure class='code'><figcaption><span>Checking if google.com is available</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Robowhois\Robowhois</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$robowhois</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Robowhois</span><span class="p">(</span><span class="s1">&#39;INSERT-YOUR-API-KEY-HERE&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$robowhois</span><span class="o">-&gt;</span><span class="na">isAvailable</span><span class="p">(</span><span class="s1">&#39;google.com&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s2">&quot;pretty nice dream, uhm?&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The opposite thing is achieved using the <code>-&gt;isRegistered()</code> method.</p>

<p>You can also retrieve an array as returned from the webservice, by doing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Robowhois\Robowhois</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$robowhois</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Robowhois</span><span class="p">(</span><span class="s1">&#39;INSERT-YOUR-API-KEY-HERE&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$availability</span> <span class="o">=</span> <span class="nv">$robowhois</span><span class="o">-&gt;</span><span class="na">whoisAvailability</span><span class="p">(</span><span class="s1">&#39;google.com&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">echo</span> <span class="nv">$availability</span><span class="p">[</span><span class="s1">&#39;available&#39;</span><span class="p">];</span>
</span><span class='line'>  <span class="k">echo</span> <span class="nv">$availability</span><span class="p">[</span><span class="s1">&#39;registered&#39;</span><span class="p">];</span>
</span><span class='line'>  <span class="k">echo</span> <span class="nv">$availability</span><span class="p">[</span><span class="s1">&#39;daystamp&#39;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Retrieve informations about your account</h2>

<p>A <em>must-have</em>, since you should always check how many remaining credits
you have, the <code>account</code> API lets you retrieve some of your personal data
from your Robowhois.com account:</p>

<figure class='code'><figcaption><span>Calculating how many left credits you have</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Robowhois\Robowhois</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$robowhois</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Robowhois</span><span class="p">(</span><span class="s1">&#39;INSERT-YOUR-API-KEY-HERE&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$credits</span> <span class="o">=</span> <span class="nv">$robowhois</span><span class="o">-&gt;</span><span class="na">whoisAccount</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getCreditsRemaining</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nv">$credits</span> <span class="o">&gt;</span> <span class="mi">100</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">echo</span> <span class="s2">&quot;No problem fella!&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">echo</span> <span class="s2">&quot;Time to go shopping looking for new API calls, uhm?&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">Exception</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;The following error occurred: &quot;</span> <span class="o">.</span> <span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Minor things</h2>

<p>We also polished some code, refactored stuff and added some tests (unit and
integration ones).</p>

<p>For instance, when using the <code>record</code> API, you can retrieve the daystamp of the
response as <code>DateTime</code> object:</p>

<figure class='code'><figcaption><span>retrieving the daystamp as an object or a string</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Robowhois\Robowhois</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$robowhois</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Robowhois</span><span class="p">(</span><span class="s1">&#39;INSERT-YOUR-API-KEY-HERE&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$whois</span> <span class="o">=</span> <span class="nv">$robowhois</span><span class="o">-&gt;</span><span class="na">whoisRecord</span><span class="p">(</span><span class="s1">&#39;google.com&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// returns a DateTime object</span>
</span><span class='line'>  <span class="k">echo</span> <span class="nv">$whois</span><span class="o">-&gt;</span><span class="na">getDaystamp</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// formats the DateTime</span>
</span><span class='line'>  <span class="k">echo</span> <span class="nv">$whois</span><span class="o">-&gt;</span><span class="na">getDaystamp</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">format</span><span class="p">(</span><span class="s1">&#39;Y-m-d&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// returns a string</span>
</span><span class='line'>  <span class="k">echo</span> <span class="nv">$whois</span><span class="o">-&gt;</span><span class="na">getDaystamp</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can download the <a href="https://github.com/robowhois/robowhois-php/tree/0.8.0">latest tag</a>
of the library (currently <code>0.8.0</code>) and start using it: the <a href="https://github.com/robowhois/robowhois-php/blob/master/README.md">README</a>
exhaustively explains what you can do with this small client, and some
<a href="https://github.com/robowhois/robowhois-php/tree/master/sample">samples</a>
are provided under the <code>sample</code> directory.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving to Dubai]]></title>
    <link href="http://odino.org/moving-to-dubai/"/>
    <updated>2012-03-05T10:00:00+04:00</updated>
    <id>http://odino.org/moving-to-dubai</id>
    <content type="html"><![CDATA[<p>Yes, you got it.</p>

<!-- more -->


<p>Last thursday I resigned from my lead developer position at <a href="http://dnsee.com">DNSEE</a>
to be able to join <a href="http://www.rocket-internet.de/">Rocket Internet</a> for their exciting projects
in the middle east area.</p>

<p>After more than 2 years in DNSEE, I really owe everyone a hug, and I gotta
say I&#8217;m pretty excited for my relocation, which is gonna lead me to Dubai on the 30 or 31
of this month.</p>

<p>I will be in charge of one of the teams in Dubai, reporting to <a href="http://de.linkedin.com/in/halilkoklu">Halil</a>, as a team leader.</p>

<p>I have no words, really: after a brief visit to my parents (it has been a very sad weekend, believe me),
I&#8217;m just <strong>so excited</strong> to start this new challenge.</p>

<p>Wish me luck guys, wish me luck.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scaling asynchronously through HInclude]]></title>
    <link href="http://odino.org/scaling-through-hinclude/"/>
    <updated>2012-02-24T10:50:00+04:00</updated>
    <id>http://odino.org/scaling-through-hinclude</id>
    <content type="html"><![CDATA[<p>Since it&#8217;s been a while that I spread the idea of
having <a href="http://odino.org/edge-side-includes-how-to-spare-terabytes-every-day/">ESI on the client side</a>,
someone pointed out that a good solution, technically
different from the one I personally proposed, would
be to use JavaScript to and asynchronous sub-requests.</p>

<!-- more -->


<p>There is a small JS library, written by the good
<a href="http://www.mnot.net/">Mark Nottingham</a><sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>,
called <a href="http://mnot.github.com/hinclude/">HInclude</a>,
which does this kind of job.</p>

<h2>The problem</h2>

<p>Consider that you have an high-traffic websites which has
some parts of its webpages that rarely change, like the header,
the footer and some sidebars: why should you regenerate all
those parts at every request?</p>

<p><a href="http://www.w3.org/TR/esi-lang">ESI</a> solves this kind
of problem, but requires you to make a request through the
network, as you need, at least, to hit the reverse proxy,
which then handles the composition on a resource with
sub-resources.</p>

<p>As I <a href="http://odino.org/edge-side-includes-how-to-spare-terabytes-every-day/">stated earlier</a>,
this is not an optimal approach for every <em>use-case</em>, so you
definitely should try to use local caches (your users) to
scale better.</p>

<h2>The solution</h2>

<p>HInclude fits perfectly in this context, as you only need to
include the JS and add a namespace declaration to your documents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  <span class="nt">&lt;html</span> <span class="na">xmlns:hx=</span><span class="s">&quot;http://purl.org/NET/hinclude&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;</span>
</span><span class='line'>      <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/lib/hinclude.js&quot;</span>
</span><span class='line'>       <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>whenever you need to aggregate data from a sub-resource you
only need to <strong>add an hinclude tag</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;hx:include</span> <span class="na">src=</span><span class="s">&quot;/header.html&quot;</span><span class="nt">&gt;&lt;/hx:include&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can specify a default content - if the user has not javascript
or whatever - and it provides a nice behaviour when the sub-request
generates an error (status codes different from <code>200</code> and <code>304</code>), as
it adds an <code>hinclude_$statusCode</code> class to the tag.</p>

<h2>A dummy benchmark</h2>

<p>I provide here a benchmark, a simple and silly one, as you should be
already able to understand the power of HInclude.</p>

<p>First of all let&#8217;s create a simple response, which aggregates header
and footer directly from PHP, as we are used to do:</p>

<figure class='code'><figcaption><span>index_no_hinclude.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&lt;html&gt;</span>
</span><span class='line'><span class="x">    &lt;head&gt;</span>
</span><span class='line'><span class="x">    &lt;/head&gt;</span>
</span><span class='line'><span class="x">    &lt;body&gt;</span>
</span><span class='line'><span class="x">      &lt;p&gt;</span>
</span><span class='line'><span class="x">        </span><span class="cp">&lt;?php</span> <span class="k">include</span> <span class="s1">&#39;header.php&#39;</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      &lt;/p&gt;</span>
</span><span class='line'><span class="x">      &lt;div class=&quot;main&quot;&gt;</span>
</span><span class='line'><span class="x">        &lt;!-- start slipsum code --&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">        Look, just because I don&#39;t be givin&#39; no man a foot massage don&#39;t make it right for Marsellus to throw Antwone into a glass motherfuckin&#39; house, fuckin&#39; up the way the nigger talks. Motherfucker do that shit to me, he better paralyze my ass, &#39;cause I&#39;ll kill the motherfucker, know what I&#39;m sayin&#39;?</span>
</span><span class='line'>
</span><span class='line'><span class="x">        &lt;!-- please do not remove this line --&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">        &lt;div style=&quot;display:none;&quot;&gt;</span>
</span><span class='line'><span class="x">        &lt;a href=&quot;http://slipsum.com&quot;&gt;lorem ipsum&lt;/a&gt;&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">        &lt;!-- end slipsum code --&gt;</span>
</span><span class='line'><span class="x">      &lt;/div&gt;</span>
</span><span class='line'><span class="x">      &lt;p&gt;</span>
</span><span class='line'><span class="x">        </span><span class="cp">&lt;?php</span> <span class="k">include</span> <span class="s1">&#39;footer.php&#39;</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      &lt;/p&gt;</span>
</span><span class='line'><span class="x">    &lt;/body&gt;</span>
</span><span class='line'><span class="x">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and then the header and footer files:</p>

<figure class='code'><figcaption><span>header.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span> <span class="nb">usleep</span><span class="p">(</span><span class="mi">200000</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;!-- start slipsum code --&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">You think water moves fast? You should see ice. It moves like it has a mind. Like it knows it killed the world once and got a taste for murder. After the avalanche, it took us a week to climb out. Now, I don&#39;t know exactly when we turned on each other, but I know that seven of us survived the slide... and only five made it out. Now we took an oath, that I&#39;m breaking now. We said we&#39;d say it was the snow that killed the other two, but it wasn&#39;t. Nature is lethal but it doesn&#39;t hold a candle to man.</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;!-- please do not remove this line --&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;div style=&quot;display:none;&quot;&gt;</span>
</span><span class='line'><span class="x">&lt;a href=&quot;http://slipsum.com&quot;&gt;lorem ipsum&lt;/a&gt;&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;!-- end slipsum code --&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>footer.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span> <span class="nb">usleep</span><span class="p">(</span><span class="mi">200000</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;!-- start slipsum code --&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">Normally, both your asses would be dead as fucking fried chicken, but you happen to pull this shit while I&#39;m in a transitional period so I don&#39;t wanna kill you, I wanna help you. But I can&#39;t give you this case, it don&#39;t belong to me. Besides, I&#39;ve already been through too much shit this morning over this case to hand it over to your dumb ass.</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;!-- please do not remove this line --&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;div style=&quot;display:none;&quot;&gt;</span>
</span><span class='line'><span class="x">&lt;a href=&quot;http://slipsum.com&quot;&gt;lorem ipsum&lt;/a&gt;&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;!-- end slipsum code --&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bear in mind that I use</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span> <span class="nb">usleep</span><span class="p">(</span><span class="mi">200000</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>to simulate some php code execution (<code>200ms</code> seems a
reasonable amount of time - inspired by one of our
live projects).</p>

<p>I took a look at Chrome&#8217;s timeline bar to get an idea of
the average time spent for rendering this resource, and it
was <code>~450ms</code>.</p>

<p>If you try to use HInclude, just create a new page:</p>

<figure class='code'><figcaption><span>index_hinclude.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html</span> <span class="na">xmlns:hx=</span><span class="s">&quot;http://purl.org/NET/hinclude&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;</span>
</span><span class='line'>      <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;src/hinclude.js&quot;</span>
</span><span class='line'>       <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;body&gt;</span>
</span><span class='line'>      <span class="nt">&lt;p&gt;</span>
</span><span class='line'>        <span class="nt">&lt;hx:include</span> <span class="na">src=</span><span class="s">&quot;header.php&quot;</span><span class="nt">&gt;&lt;/hx:include&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;main&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- start slipsum code --&gt;</span>
</span><span class='line'>
</span><span class='line'>        Look, just because I don&#39;t be givin&#39; no man a foot massage don&#39;t make it right for Marsellus to throw Antwone into a glass motherfuckin&#39; house, fuckin&#39; up the way the nigger talks. Motherfucker do that shit to me, he better paralyze my ass, &#39;cause I&#39;ll kill the motherfucker, know what I&#39;m sayin&#39;?
</span><span class='line'>
</span><span class='line'>        <span class="c">&lt;!-- please do not remove this line --&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&quot;display:none;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://slipsum.com&quot;</span><span class="nt">&gt;</span>lorem ipsum<span class="nt">&lt;/a&gt;&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c">&lt;!-- end slipsum code --&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;p&gt;</span>
</span><span class='line'>        <span class="nt">&lt;hx:include</span> <span class="na">src=</span><span class="s">&quot;footer.php&quot;</span><span class="nt">&gt;&lt;/hx:include&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and add, in <code>header.php</code> and <code>footer.php</code>, a caching header,
which HInclude will made the browser take advantage of:</p>

<figure class='code'><figcaption><span>At the top of header.php and footer.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span> <span class="nb">header</span><span class="p">(</span><span class="s1">&#39;Cache-Control: max-age=3600&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>For the first user requests it will require <code>~220ms</code> to render
the whole page: this is a pretty good starting gain, as we are
<strong>requesting header and footer in parallel</strong>, but as you retrieve
the page for the second time, performances will incredibly
improve, down to <code>~40/50ms</code>: it&#8217;s, basically, a <strong>90% performance
gain</strong>, but you should be aware that the biggest load time should
be spent within the main body of the page, that I just ignored in
this example; but gaining almost a half second for each pageview
is just a great goal achieved.</p>

<p>As pointed out by other people on twitter, HInclude has a few
drawbacks - think about
<a href="https://twitter.com/#!/lyrixx/status/172849248868646912">SEO</a> -
but you should be able to use it with contents that rarely need
to play a major role in your SEO strategy (eg. never use HInclude
to retrieve the body of a blog post<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>).</p>

<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>You should know him for his contributions to the HTTP specification, httpbis, cache channels and - in general - the HTTP cache <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>Recently Matt Cutts came out with the assertion that Googlebot is capable to understand basic JS redirects, so&#8230; there&#8217;s hope <a href='#fnref:2' rev='footnote'>↩</a></li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book review: Data-Intensive Text Processing with MapReduce]]></title>
    <link href="http://odino.org/book-review-data-intensive-text-processing-with-mapreduce/"/>
    <updated>2012-02-23T12:57:00+04:00</updated>
    <id>http://odino.org/book-review-data-intensive-text-processing-with-mapreduce</id>
    <content type="html"><![CDATA[<p>As part of my studies not directly connected to my job,
in the last month I&#8217;ve finished this interesting book, which
gives you a good overview about
<a href="http://en.wikipedia.org/wiki/MapReduce">MapReduce</a>.</p>

<!-- more -->


<p><img class="right" src="http://odino.org/images/mapreduce.book.jpg"></p>

<p><a href="http://www.umiacs.umd.edu/~jimmylin/">Jimmy Lin</a> and Chris
Dyer nailed this one: the book is really clear and leaves
room for further studies, maybe more practical ones: the book
starts with the definition of MapReduce, from the algorithm to
the execution framework and the analyzes each part of the
algorithm and theyr variants in some frameworks, like
Hadoop<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.</p>

<p>After studying the components of MapReduce you will
take a practical look at possible implementations<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>,
from graph algorithms to the pagerank one: note that there are
so many references in the book, so if you will be into it, you&#8217;re
gonna find yourself screwed in a <em>nerdy</em> loop :)</p>

<p>The EM chapter (dealing with <em>expectation-maximization</em> algorithms)
was pretty difficult for me, as it&#8217;s too much time that I don&#8217;t
take math <em>that</em> seriously, but I - however - was able to
follow all the theory explained there.</p>

<p>Something that I really appreciated was the closing remark stating that,
just like every technology, is not the right pick for every problem -
think about <strong>stateful</strong> large scale data-processing algorithms.</p>

<p>I strongly recommend you to read such this kind of book: the approach
followed by the writers is so engineered and some examples they give,
like the <a href="http://odino.org/quality-isnt-always-better-than-quality/">stupid backoff</a>,
are pearls for your working experience.</p>

<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>But please remember, this book is not any kind of Hadoop guide <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>Which are code-agnostic, as everything is written in a pretty clear pseudo-code <a href='#fnref:2' rev='footnote'>↩</a></li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to argue with junior and stubborn developers]]></title>
    <link href="http://odino.org/how-to-argue-with-junior-and-stubborn-developers/"/>
    <updated>2012-02-23T12:00:00+04:00</updated>
    <id>http://odino.org/how-to-argue-with-junior-and-stubborn-developers</id>
    <content type="html"><![CDATA[<p>In these days I had a nice chat with
<a href="http://www.linkedin.com/in/gogebakan">Önder Göğebakan</a> to exchange
some views about <strong>team leading</strong>: one of the points I loved to face
was how to deal with arrogant coders that <strong>don&#8217;t want to consider
the indications received from their technical lead</strong>.</p>

<!-- more -->


<h2>Pulling responsabilites is not that bad</h2>

<p>It makes no difference the reason why the developers is going against your
opinion/advice/dictation: it may be due to inexperience or attitude, and this
is not <em>that</em> bad.</p>

<p><img class="right" src="http://odino.org/images/rooster.jpg"></p>

<p>A developer which pulls responsabilities shows a good attitude, as it
demonstrates that he wants to take a decision based on different variables
evaluated differently than you: passive coders<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup> are just a bad
smell within your organization, because they won&#8217;t ever be as productive
as you might need; don&#8217;t get me wrong on this: <strong>passive developers are
a valuable asset</strong>, as you can&#8217;t rely on a team of cocks, but you
shouldn&#8217;t hire too many passives, since, in a team of 4~6 people there
will be room for 1, maybe 2, washermen.</p>

<p>Push systems are just a bad idea: if you throw duties and responsabilities
to your developers they won&#8217;t feel comfortable with them and will suddenly
fear the assigned tasks; make a developer pull his responsabilities and you
will be able to work in a strongy energized, motivated, self aware and
fast growing team<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>.</p>

<p>If you will ever be in troubles when a proactive developer go against
your decision, I want to share with you a few thoughts on that.</p>

<h2>Use exampl&#8230;your experience</h2>

<p>Being a CTO, team leader, technical fellow or whatever, you gained
so much experience from your previous &#8220;developer&#8217;s years&#8221; that you have
an unvaluable knowledge about problem solving, and when I say
unvaluable I mean that there&#8217;s no inexperienced brain that could
overcome a seasoned veteran.</p>

<p><img class="left" src="http://odino.org/images/jordan.jpg"></p>

<p>Think about the way you solved that technical problem earlier in your
career and start adding examples to your cause: don&#8217;t pretend to
think that this new problem &#8220;it&#8217;s just the same I saw in <code>some company</code>
back in 2001&#8221;, because the developer will think that your are
just scratching the surface of the issue and will look at you
with no trust.</p>

<p>When Michael Jordan got back into the NBA for the second time,
with the partially self-owned team of the Washington Wizards,
he was 38, and wasn&#8217;t able to provide the physical strength,
speed and responsiveness that he had back on his 20s.</p>

<p>Although all of this, the great thing that Mike did was to <strong>take
advantage of his experience</strong> to overcome youger players and
rough defenders: without a fully-supporting body, he was able to
perform great games, with a
<a href="http://www.basketball-reference.com/boxscores/200112290WAS.html">51-points legendary performance</a>
against the Charlotte Hornets, just to mention one episode.</p>

<p>At 38.</p>

<p>Don&#8217;t think your technical knowledge will be as exhaustive as
during your full-development period, but take advantage of the
situations occurred during those valuable years.</p>

<h2>Approach the problem from different points of view</h2>

<p><img class="right" src="http://odino.org/images/sheldon.board.jpg"></p>

<p><a href="http://en.wikipedia.org/wiki/Sheldon_Cooper">Sheldon Cooper</a>
has a huge problem in his life: he&#8217;s not open to
look at the situations he faces from perspectives different
from his own one.</p>

<p>This makes impossible, for him, to solve decisional problems
taking different looks, from different point of views: one
aspect of your job is to provide different solutions to the
same problem instead.</p>

<p>Solutions may be incomplete, or may be not suitable for the
developer against you, but will help you in gaining trust when
explaining your points: someone stucked to his view may be
considered stubborn and not qualificated, but if you are able
to <strong>provide different pros and cons to different solutions</strong>
you will get respect from the person at the other side of
the argument, as you will be recognized not as a firm
believer, but as a thinker.</p>

<h2>Make spikes</h2>

<p>It may sound inefficient, but spikes are a good way to bring your
result home: you are not meant to directly write a spike for a
<em>use case</em> but you should <strong>encourage the counterpart to start
writing small and rough pieces of code</strong> to test if some of the
solutions he thiks are gonna work seem to be working fine.</p>

<p><img class="left" src="http://odino.org/images/lego.technic.jpg"></p>

<p>This makes the developer feel that he&#8217;s  gaining trust from you,
as he is allowed to actually spend some billable time on his
implementation, but as some problem comes out ask him how to
solve it: a good developer may immediately find that he was wrong
about it, so your problem is solved; if he keeps trying to follow
this deadly way - maybe for <a href="http://c2.com/cgi/wiki?CowboyCoder">pride</a>
- just move at the subsequent step, which means making the
developer recognise he needs help.</p>

<p>Bear in mind that whenever you decide to make a spike, something
practical actually happens, and it could turn out that the
implementation you were criticizing may accomplish its duty:
since no one is perfect prepare your words to congratulate with
the developer and thank him for the good approach, <strong>without
feeling embarassed</strong>.</p>

<p><img class="right" src="http://odino.org/images/socrates.gif"></p>

<h2>Consolidate doubts</h2>

<p>With a <a href="http://en.wikipedia.org/wiki/Socratic_method">socratic approach</a>,
as you see that he is developing some spikes but <strong>comes to
unacceptable endpoints</strong>, start smashing his beliefs pointing
out the flaws his design has, the possible problems that you are
going to face and the limitations that this piece of code will
bring to his direct components - just to mention a few possible
type of problems.</p>

<p>I strongly recommend you to read
<a href="http://en.wikipedia.org/wiki/The_Republic_(Plato)">The Republic</a>,
by Plato, to understand how the socratic approach works in
practice: it&#8217;s a really good practice to <strong>rely on ancient wisdom</strong>
to solve inter-people issues, as this kind of knowledge is
transversal to any kind of context.</p>

<h2>Give trust, feed the monster and save him before death</h2>

<p>May 8, 1970: <a href="http://en.wikipedia.org/wiki/Willis_Reed">Willis Reed</a>,
captain and leader of the
<a href="http://www.nba.com/knicks/">New York Knickerbockers</a> is
injured, and the Knicks need to defeat the Los Angeles Lakers
in game 7 (last game of a 3-3 tied series) to become NBA champions.</p>

<p><img class="right" src="http://odino.org/images/walt.frazier.jpg"></p>

<p>Willis starts the game, sinks down the first two points for New York
with a perimetral shot and, well, then he stops there.</p>

<p>Your developer is Reed: he&#8217;s under pressure, feels he can&#8217;t solve
the situation but dramatically tries not to drown; <strong>there comes Walt</strong>.</p>

<p><a href="http://en.wikipedia.org/wiki/Walt_Frazier">Walt Frazier</a> is a
tiny little point guard, a decent scorer: he&#8217;s facing
LA&#8217;s <a href="http://en.wikipedia.org/wiki/Jerry_West">Jerry West</a>, one of the
legends of the NBA, named Mr. Clutch due to his ability to stay
focused and sink shots in high-pressure conditions.</p>

<p>Walt does not care: inspired by his captain, he puts together an awesome
performance, scoring 36 points, serving 19 assists and stealing several
balls from West&#8217;s hands.</p>

<p>Now it&#8217;s time - for you - to play as Walt &#8216;Clyde&#8217; Frazier: as the developer
is drowning down you need to come there, <strong>give him the advices</strong> to fix his
implementation and to get out of that situation, <strong>pair with him</strong> and make
him feel that <strong>you could also be in that situation</strong>, it&#8217;s not such a big
problem: doing this he will firmly listen to you, as you are leading
him out of troubles, the best way to gain respect from others.</p>

<h2>Gain trust</h2>

<p>The key to lead a team is gain trust from its components: it is rarely acceptable
that a team leader could lead his team with a cocky behaviour, so you are
going to fail if your only aim is to do <strong>people management</strong>, and not team
leading.</p>

<p>Letting people pull responsabilities, giving them trust, analyzing with the
team the problems which may occur after a decision (an implementation, or
the change of a process), involving everyone in your job.</p>

<p>As I like to state:</p>

<blockquote><p>Great leaders let other leaders emerge.</p></blockquote>


<h2>Be humble and step back</h2>

<p>What if you were wrong? It may happen, and it&#8217;s perfectly acceptable:
don&#8217;t be rude when supporting your ideas, because as it turns out
that you were wrong, this may harm your position.</p>

<p>If you sell yourself as a humble guy, you will get the trust of your
team, because <strong>they will recognize you as a wise guide</strong>, not a tyrant.</p>

<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>Monkeys <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>Worth to mention, the recruiting process plays a big role in this process <a href='#fnref:2' rev='footnote'>↩</a></li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create a Composer command line installer with the Symfony2 CLI]]></title>
    <link href="http://odino.org/install-composer-dependencies-with-the-symfony2-cli/"/>
    <updated>2012-02-21T10:51:00+04:00</updated>
    <id>http://odino.org/install-composer-dependencies-with-the-symfony2-cli</id>
    <content type="html"><![CDATA[<ol class="aseries">
    <p>This post is part of the &#8221;<strong>Symfony2 components in your own userland</strong>&#8221; series; here is a list of all the articles contained this series:</p>
    <li>
        <a href="http://odino.org/using-the-symfony2-dependency-injection-container-as-a-standalone-component/">Using the Symfony2 Dependency Injection Container as a standalone component</a>
    </li>
    <li>
        <a href="http://odino.org/launching-phpunit-tests-from-a-browser-with-symfony2/">Launching PHPUnit tests from a browser with Symfony2</a>
    </li>
    <li>
        <a href="http://odino.org/install-composer-dependencies-with-the-symfony2-cli/">Using the Console component to write an interactive installer for Composer</a>
    </li>
</ol>


<p>Today we are going to see the power of Symfony2&#8217;s
<a href="https://github.com/symfony/console">Console component</a>,
which lets us build powerful interactive command line applications
in pure PHP.</p>

<!-- more -->


<p><img class="right" src="http://odino.org/images/installer.png"></p>

<p>In this episode we are going to create an interactive shell
able to generate new composer-based projects: we will have a
command to define which dependencies we need and another one
to:</p>

<ul>
<li>create the installation directory</li>
<li>download composer</li>
<li>generate  a <code>composer.json</code> according to the required dependencies</li>
<li>run a <code>php composer.phar install</code> to install everything</li>
</ul>


<p>The approach we&#8217;re going to use will be very rough and incomplete: no
error handling, no decent abstraction, but is intended to give you a
clue about the potentiality of the CLI tool and to show you how you can
easily create PHP command line applications without the need to
write too much good code.</p>

<h2>Approach and installation</h2>

<p>The Symfony2 Console lets use extend the <code>Console\Command\Command</code> class to
implement your own commands, so we will add a couple custom commands, one to
<strong>register dependencies</strong> and one to <strong>execute the installation</strong>.</p>

<p>First of all, let create our own <code>composer.json</code>, to download the Console
and <a href="http://odino.org/launching-phpunit-tests-from-a-browser-with-symfony2/">Process</a><sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>
components:</p>

<figure class='code'><figcaption><span>composer.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;require&quot;</span>: <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;php&quot;</span>: <span class="s2">&quot;&gt;=5.3.2&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;symfony/console&quot;</span>: <span class="s2">&quot;2.0.10&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;symfony/process&quot;</span>: <span class="s2">&quot;2.0.10&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>then install everything and create your <code>installer.php</code> script which
serves as the entry point for the console:</p>

<figure class='code'><figcaption><span>installing the dependencies</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget http://getcomposer.org/composer.phar
</span><span class='line'>
</span><span class='line'>php composer.phar install
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>installer.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">require</span> <span class="s1">&#39;vendor/.composer/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">require</span> <span class="s1">&#39;Command/DependencyContainer.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">require</span> <span class="s1">&#39;Command/Install.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\Console\Shell</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\Console\Application</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$application</span>            <span class="o">=</span> <span class="k">new</span> <span class="nx">Application</span><span class="p">(</span><span class="s1">&#39;Installer&#39;</span><span class="p">,</span> <span class="s1">&#39;1.0.0-alpha&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$dependencyContainer</span>    <span class="o">=</span> <span class="k">new</span> <span class="nx">DependencyContainer</span><span class="p">();</span>
</span><span class='line'><span class="nv">$application</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="nv">$dependencyContainer</span><span class="p">);</span>
</span><span class='line'><span class="nv">$application</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="k">new</span> <span class="nx">Install</span><span class="p">(</span><span class="nv">$dependencyContainer</span><span class="p">));</span>
</span><span class='line'><span class="nv">$shell</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Shell</span><span class="p">(</span><span class="nv">$application</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$shell</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the <code>installer.php</code> we are instantiating a new interactive shell
application, adding to it 2 new commands and then we run it: don&#8217;t try it now,
as the added command classes don&#8217;t exist yet.</p>

<h2>A container for the dependencies</h2>

<p>The first custom command we are going to add is a dependency container, which is
a convenient class storing the dependencies, like <code>symfony/yaml</code>, in an
attribute, and exposes a <code>getDependencies()</code> method that will be used by the
installer command to retrieve the dependencies to install.</p>

<figure class='code'><figcaption><span>Command/DependencyContainer.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\Console\Command\Command</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\Console\Input\InputInterface</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\Console\Output\OutputInterface</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">DependencyContainer</span> <span class="k">extends</span> <span class="nx">Command</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$dependencies</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getDependencies</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">dependencies</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="k">function</span> <span class="nf">execute</span><span class="p">(</span><span class="nx">InputInterface</span> <span class="nv">$input</span><span class="p">,</span> <span class="nx">OutputInterface</span> <span class="nv">$output</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$dialog</span>  <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getHelperSet</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;dialog&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$package</span> <span class="o">=</span> <span class="nv">$dialog</span><span class="o">-&gt;</span><span class="na">ask</span><span class="p">(</span><span class="nv">$output</span><span class="p">,</span> <span class="s1">&#39;&lt;question&gt;Please enter the name of the package you want to install&lt;/question&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$package</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">dependencies</span><span class="p">[]</span> <span class="o">=</span> <span class="s1">&#39;&quot;&#39;</span> <span class="o">.</span> <span class="nv">$package</span> <span class="o">.</span> <span class="s1">&#39;&quot;: &quot;master&quot;&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nv">$output</span><span class="o">-&gt;</span><span class="na">writeln</span><span class="p">(</span><span class="nb">sprintf</span><span class="p">(</span><span class="s1">&#39;&lt;info&gt;Package %s was succesfully registered&lt;/info&gt;&#39;</span><span class="p">,</span> <span class="nv">$package</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$output</span><span class="o">-&gt;</span><span class="na">writeln</span><span class="p">(</span><span class="s1">&#39;&lt;error&gt;You must insert a package name&lt;/error&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="k">function</span> <span class="nf">configure</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">setName</span><span class="p">(</span><span class="s1">&#39;add-dependency&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you see, the command will be called when doing a <code>add-dependency</code> from the console
and will ask the user to prompt the dependency we wants to add; a basic check is done:</p>

<figure class='code'><figcaption><span>Checking for non-empty input</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$package</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">dependencies</span><span class="p">[]</span> <span class="o">=</span> <span class="s1">&#39;&quot;&#39;</span> <span class="o">.</span> <span class="nv">$package</span> <span class="o">.</span> <span class="s1">&#39;&quot;: &quot;master&quot;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$output</span><span class="o">-&gt;</span><span class="na">writeln</span><span class="p">(</span><span class="nb">sprintf</span><span class="p">(</span><span class="s1">&#39;&lt;info&gt;Package %s was succesfully registered&lt;/info&gt;&#39;</span><span class="p">,</span> <span class="nv">$package</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$output</span><span class="o">-&gt;</span><span class="na">writeln</span><span class="p">(</span><span class="s1">&#39;&lt;error&gt;You must insert a package name&lt;/error&gt;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that, for being <em>quick&#8217;n&#8217;dirty</em>, we store the dependencies in the composer way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="s2">&quot;dependencyvendor/dependencyname&quot;</span>: <span class="s2">&quot;dependencyversion&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and we use <code>master</code> as the only version available<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>.</p>

<p>This is it: now we only need to create the command to install everything.</p>

<h2>The installation command</h2>

<p>The <code>Install</code> command will be called with <code>install</code> from the command line, and
executes 4 sub-tasks to finish the installation process:</p>

<ul>
<li>create the installation directory</li>
<li>download composer via <code>wget</code></li>
<li>generate the <code>composer.json</code> according to the dependencies specified in the
DependencyContainer</li>
<li>run the composer traditional installation (<code>php composer.phar install</code>)</li>
</ul>


<p>This command takes a <code>DependencyContainer</code> argument in the constructor
to extract the dependencies needed to be installed:</p>

<figure class='code'><figcaption><span>Command/Install.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\Console\Command\Command</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\Console\Output\OutputInterface</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\Console\Input\InputInterface</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\Process\Process</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Install</span> <span class="k">extends</span> <span class="nx">Command</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$installDir</span><span class="p">;</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$failingProcess</span><span class="p">;</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$dependenciesContainer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">DependencyContainer</span> <span class="nv">$dependenciesContainer</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">parent</span><span class="o">::</span><span class="na">__construct</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">dependenciesContainer</span> <span class="o">=</span> <span class="nv">$dependenciesContainer</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="k">function</span> <span class="nf">execute</span><span class="p">(</span><span class="nx">InputInterface</span> <span class="nv">$input</span><span class="p">,</span> <span class="nx">OutputInterface</span> <span class="nv">$output</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createInstallationDirectory</span><span class="p">(</span><span class="nv">$output</span><span class="p">)</span>
</span><span class='line'>         <span class="o">&amp;&amp;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">downloadComposer</span><span class="p">(</span><span class="nv">$output</span><span class="p">)</span>
</span><span class='line'>         <span class="o">&amp;&amp;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">generateJson</span><span class="p">(</span><span class="nv">$output</span><span class="p">)</span>
</span><span class='line'>         <span class="o">&amp;&amp;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">install</span><span class="p">(</span><span class="nv">$output</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$output</span><span class="o">-&gt;</span><span class="na">writeln</span><span class="p">(</span><span class="s1">&#39;&lt;info&gt;MISSION ACCOMPLISHED&lt;/info&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$output</span><span class="o">-&gt;</span><span class="na">writeln</span><span class="p">(</span><span class="s1">&#39;&lt;error&gt;Nasty error happened :\&#39;-(&lt;/error&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">failingProcess</span> <span class="nx">instanceOf</span> <span class="nx">Process</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$output</span><span class="o">-&gt;</span><span class="na">writeln</span><span class="p">(</span><span class="s1">&#39;&lt;error&gt;%s&lt;/error&gt;&#39;</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">failingProcess</span><span class="o">-&gt;</span><span class="na">getErrorOutput</span><span class="p">());</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="k">function</span> <span class="nf">configure</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">setName</span><span class="p">(</span><span class="s1">&#39;install&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>as you see we execute this 4 tasks and, if an error happens, we output an error,
otherwise a confirmation message tells the user that everything went fine.</p>

<p>If a failure happens, we get the error message thanks to the <code>Process</code> method <code>getErrorOutput()</code>.</p>

<p>Let&#8217;s see how the tasks are implemented in this class: first of all, we need a <code>createInstallationDirectory()</code>
method that launches a new <code>mkdir</code> process and returns a boolean value, indicating the
successfulness of the process; before returning false, the class&#8217; internal attribute
<code>$failingProcess</code> is updated:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="k">protected</span> <span class="k">function</span> <span class="nf">createInstallationDirectory</span><span class="p">(</span><span class="nx">OutputInterface</span> <span class="nv">$output</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$dialog</span>             <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getHelperSet</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;dialog&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">installDir</span>   <span class="o">=</span> <span class="nv">$dialog</span><span class="o">-&gt;</span><span class="na">ask</span><span class="p">(</span><span class="nv">$output</span><span class="p">,</span> <span class="s1">&#39;&lt;question&gt;Please specify a non-existing directory to start the installation&lt;/question&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">is_dir</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">installDir</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$mkdir</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Process</span><span class="p">(</span><span class="nb">sprintf</span><span class="p">(</span><span class="s1">&#39;mkdir -p %s&#39;</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">installDir</span><span class="p">));</span>
</span><span class='line'>        <span class="nv">$mkdir</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$mkdir</span><span class="o">-&gt;</span><span class="na">isSuccessful</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$output</span><span class="o">-&gt;</span><span class="na">writeln</span><span class="p">(</span><span class="nb">sprintf</span><span class="p">(</span><span class="s1">&#39;&lt;info&gt;Directory %s succesfully  created&lt;/info&gt;&#39;</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">installDir</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">failingProcess</span> <span class="o">=</span> <span class="nv">$mkdir</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you see, the user will be asked to provide an <code>$installDir</code> in which we are going
to execute the whole process.</p>

<p>Now we need to create the <code>downloadComposer()</code> method, which uses <code>wget</code> to put <code>composer.phar</code>
in the installation directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="k">protected</span> <span class="k">function</span> <span class="nf">downloadComposer</span><span class="p">(</span><span class="nx">OutputInterface</span> <span class="nv">$output</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$wget</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Process</span><span class="p">(</span><span class="nb">sprintf</span><span class="p">(</span><span class="s1">&#39;wget getcomposer.org/composer.phar -O %s/composer.phar&#39;</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">installDir</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">installDir</span><span class="p">));</span>
</span><span class='line'>    <span class="nv">$wget</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$wget</span><span class="o">-&gt;</span><span class="na">isSuccessful</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$output</span><span class="o">-&gt;</span><span class="na">writeln</span><span class="p">(</span><span class="s1">&#39;&lt;info&gt;Downloaded composer in the installation directory&lt;/info&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">failingProcess</span> <span class="o">=</span> <span class="nv">$wget</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we generate a <code>composer.json</code> in the installation directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="k">protected</span> <span class="k">function</span> <span class="nf">generateJson</span><span class="p">(</span><span class="nx">OutputInterface</span> <span class="nv">$output</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$skeleton</span>       <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="nx">__DIR__</span> <span class="o">.</span> <span class="s2">&quot;/../composer.s&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$dependencies</span>   <span class="o">=</span> <span class="nb">implode</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">dependenciesContainer</span><span class="o">-&gt;</span><span class="na">getDependencies</span><span class="p">());</span>
</span><span class='line'>    <span class="nv">$skeleton</span>       <span class="o">=</span> <span class="nb">str_replace</span><span class="p">(</span><span class="s1">&#39;PLACEHOLDER&#39;</span><span class="p">,</span> <span class="nv">$dependencies</span><span class="p">,</span> <span class="nv">$skeleton</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">file_put_contents</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">installDir</span> <span class="o">.</span> <span class="s2">&quot;/composer.json&quot;</span><span class="p">,</span> <span class="nv">$skeleton</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$output</span><span class="o">-&gt;</span><span class="na">writeln</span><span class="p">(</span><span class="s1">&#39;&lt;info&gt;composer.json has been generated&lt;/info&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that you will need a template file to do so:</p>

<figure class='code'><figcaption><span>composer.s</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;require&quot;</span>: <span class="o">{</span>
</span><span class='line'>        PLACEHOLDER
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The last step consists in launching a new process which runs the
usual composer&#8217;s installation process on the installation directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="k">protected</span> <span class="k">function</span> <span class="nf">install</span><span class="p">(</span><span class="nx">OutputInterface</span> <span class="nv">$output</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$install</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Process</span><span class="p">(</span><span class="nb">sprintf</span><span class="p">(</span><span class="s1">&#39;cd %s &amp;&amp; php composer.phar install&#39;</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">installDir</span><span class="p">));</span>
</span><span class='line'>    <span class="nv">$install</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$install</span><span class="o">-&gt;</span><span class="na">isSuccessful</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$output</span><span class="o">-&gt;</span><span class="na">writeln</span><span class="p">(</span><span class="s1">&#39;&lt;info&gt;Packages succesfully installed&lt;/info&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">failingProcess</span> <span class="o">=</span> <span class="nv">$install</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the console output for generating a new project which depends on
<code>symfony/yaml</code> and <code>symfony/dom-crawler</code>:</p>

<p><img class="center" src="http://odino.org/images/shell.png"></p>

<p>The auto-generated <code>composer.json</code> will look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;require&quot;</span>: <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;symfony/yaml&quot;</span>: <span class="s2">&quot;master&quot;</span>,<span class="s2">&quot;symfony/dom-crawler&quot;</span>: <span class="s2">&quot;master&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>As said, this implementation is pretty naive and can definitely be improved:
but with a couple classes and basic logic you are able to write a powerful
tool that doesn&#8217;t require a web frontend and runs directly from the command line
with a pure implementation in PHP, thanks to the Symfony2 components.</p>

<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>The Process component will be used to execute shell commands directly from PHP <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>Tip: if you want, you can add the code to show the user another dialog to indicate the dependency version, and use master as a fallback <a href='#fnref:2' rev='footnote'>↩</a></li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Launching PHPUnit tests from a browser with Symfony2]]></title>
    <link href="http://odino.org/launching-phpunit-tests-from-a-browser-with-symfony2/"/>
    <updated>2012-02-20T13:41:00+04:00</updated>
    <id>http://odino.org/launching-phpunit-tests-from-a-browser-with-symfony2</id>
    <content type="html"><![CDATA[<ol class="aseries">
    <p>This post is part of the &#8221;<strong>Symfony2 components in your own userland</strong>&#8221; series; here is a list of all the articles contained this series:</p>
    <li>
        <a href="http://odino.org/using-the-symfony2-dependency-injection-container-as-a-standalone-component/">Using the Symfony2 Dependency Injection Container as a standalone component</a>
    </li>
    <li>
        <a href="http://odino.org/launching-phpunit-tests-from-a-browser-with-symfony2/">Launching PHPUnit tests from a browser with Symfony2</a>
    </li>
    <li>
        <a href="http://odino.org/install-composer-dependencies-with-the-symfony2-cli/">Using the Console component to write an interactive installer for Composer</a>
    </li>
</ol>


<p>Today we are going to launch interactive PHPUnit tests thanks to the
Symfony2 <a href="https://github.com/symfony/Process">Process</a> component.</p>

<!-- more -->


<h2>Premise</h2>

<p>This article will show you how to build a script to run your unit tests
from a browser and render the output to the webpage: since the aim
of this series of articles is to show you how easily you can integrate
Symfony2 code into your own projects, I will use nasty scripts to
accomplish our requirements.</p>

<h2>The approach</h2>

<p>Our approach will be very basic and dummy: we are goint to execute a shell
command from PHP, write each output buffers into a file and poll the file
from the frontend to progressively read its content.</p>

<h2>Into the mix</h2>

<p>To do so, let&#8217;s create a JS-loving <code>index.php</code> file:</p>

<figure class='code'><figcaption><span>The entry point of out application</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>PHPUnit web tests<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span> <span class="na">id=</span><span class="s">&quot;run&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      Run tests
</span><span class='line'>    <span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;output&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js&quot;</span> <span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">getOutput</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;output.php&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#output&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">content</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">stop</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">getOutput</span><span class="p">();</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#run&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;process.php&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>          <span class="nx">getOutput</span><span class="p">();</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you see, as you click on the <code>Run tests</code> link you will fire an event that:</p>

<ul>
<li>makes a <code>GET</code> call to <code>process.php</code></li>
<li>makes a recursive <code>GET</code> request to <code>output.php</code>, until the output object
does not contain the <code>stop</code> attribute</li>
</ul>


<p>The output script is really easy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$fileName</span> <span class="o">=</span> <span class="nx">sys_get_temp_dir</span><span class="p">()</span> <span class="o">.</span> <span class="s1">&#39;/test.output.txt&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nb">header</span><span class="p">(</span><span class="s1">&#39;Content-Type: application/json&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nb">file_exists</span><span class="p">(</span><span class="nv">$fileName</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$f</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="nx">sys_get_temp_dir</span><span class="p">()</span> <span class="o">.</span> <span class="s1">&#39;/test.output.txt&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">echo</span> <span class="nx">json_encode</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;content&#39;</span> <span class="o">=&gt;</span> <span class="nv">$f</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$f</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="nx">sys_get_temp_dir</span><span class="p">()</span> <span class="o">.</span> <span class="s1">&#39;/test.output.txt.f&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">echo</span> <span class="nx">json_encode</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;content&#39;</span> <span class="o">=&gt;</span> <span class="nv">$f</span><span class="p">,</span> <span class="s1">&#39;stop&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">));</span>
</span><span class='line'>  <span class="nb">unlink</span><span class="p">(</span><span class="nv">$f</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you see, each time we call this script, it reads the content of the <code>test.output.txt</code>
file in the temporary directory of your system: if it doesn&#8217;t find it, it reads the
<code>test.output.txt.f</code> file<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.</p>

<h2>Enter Process</h2>

<p>In our final step, let&#8217;s install the Process component:</p>

<figure class='code'><figcaption><span>composer.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;require&quot;</span>: <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;php&quot;</span>: <span class="s2">&quot;&gt;=5.3.2&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;symfony/process&quot;</span>: <span class="s2">&quot;2.0.10&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>composer.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget http://getcomposer.org/composer.phar
</span><span class='line'>
</span><span class='line'>php composer.phar install
</span></code></pre></td></tr></table></div></figure>


<p>then we can create our <code>process.php</code> script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">require</span> <span class="nx">__DIR__</span> <span class="o">.</span> <span class="s1">&#39;/vendor/.composer/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\Process\Process</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$file</span> <span class="o">=</span> <span class="nx">sys_get_temp_dir</span><span class="p">()</span> <span class="o">.</span> <span class="s1">&#39;/test.output.txt&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$handle</span>   <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span> <span class="s1">&#39;w+&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$process</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">Process</span><span class="p">(</span><span class="s1">&#39;phpunit -c /home/foor/bar/phpunit.xml /home/foo/bar&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$process</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$type</span><span class="p">,</span> <span class="nv">$buffer</span><span class="p">)</span> <span class="k">use</span><span class="p">(</span><span class="nv">$handle</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">fwrite</span><span class="p">(</span><span class="nv">$handle</span><span class="p">,</span> <span class="nb">nl2br</span><span class="p">(</span><span class="nv">$buffer</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nb">fclose</span><span class="p">(</span><span class="nv">$handle</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nb">rename</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span> <span class="nv">$file</span> <span class="o">.</span> <span class="s2">&quot;.f&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you see we are launching the test suite and, at each buffer, thanks to a
lambda, we write a new chunk to the file: at the end of the process the
<code>txt</code> file gets renamed, so the <code>output.php</code> script knows that it needs to
notify the frontend that he&#8217;s not required to poll it anymore, adding
the <code>stop</code> attribute to the JSON object it outputs:</p>

<figure class='code'><figcaption><span>fragment of output.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span> <span class="nx">json_encode</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;content&#39;</span> <span class="o">=&gt;</span> <span class="nv">$f</span><span class="p">,</span> <span class="s1">&#39;stop&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://odino.org/images/phpunit-process.png"></p>

<h2>Benefits from the Process component</h2>

<blockquote><p>I can do that crap with shell_exec() too!</p></blockquote>


<p>There are some advantages of using Process instead of writing your own command
executor: first of all, if you don&#8217;t want to take care of the subtle <strong>differences
between the different platforms</strong> everything is done for you;
then <strong>error handling becomes very easy</strong> since you are able to catch all the buffers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$process</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$type</span><span class="p">,</span> <span class="nv">$buffer</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;err&#39;</span> <span class="o">===</span> <span class="nv">$type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s1">&#39;Something nasty happened&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nb">syslog</span><span class="p">(</span><span class="nx">LOG_ERR</span><span class="p">,</span> <span class="nv">$buffer</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="nv">$buffer</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>Flaw here: no error handling when the .f file is not found <a href='#fnref:1' rev='footnote'>↩</a></li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using the Symfony2 DIC as a standalone component]]></title>
    <link href="http://odino.org/using-the-symfony2-dependency-injection-container-as-a-standalone-component/"/>
    <updated>2012-02-15T20:06:00+04:00</updated>
    <id>http://odino.org/using-the-symfony2-dependency-injection-container-as-a-standalone-component</id>
    <content type="html"><![CDATA[<ol class="aseries">
    <p>This post is part of the &#8221;<strong>Symfony2 components in your own userland</strong>&#8221; series; here is a list of all the articles contained this series:</p>
    <li>
        <a href="http://odino.org/using-the-symfony2-dependency-injection-container-as-a-standalone-component/">Using the Symfony2 Dependency Injection Container as a standalone component</a>
    </li>
    <li>
        <a href="http://odino.org/launching-phpunit-tests-from-a-browser-with-symfony2/">Launching PHPUnit tests from a browser with Symfony2</a>
    </li>
    <li>
        <a href="http://odino.org/install-composer-dependencies-with-the-symfony2-cli/">Using the Console component to write an interactive installer for Composer</a>
    </li>
</ol>


<p>The <a href="https://github.com/symfony/symfony/tree/master/src/Symfony/Component">Symfony2 components</a> are powerful libraries that you can easily integrate in your own code: in this article we will se how to integrate the <a href="https://github.com/symfony/DependencyInjection#readme">dependency injection container</a> in a <em>framework-free</em> PHP small library.</p>

<!-- more -->


<h2>Premise</h2>

<p>have you ever heard about the <a href="http://en.wikipedia.org/wiki/QOTD">QOTD protocol</a><sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>?</p>

<p>It&#8217;s a <a href="http://www.ietf.org/rfc/std/std23.txt">standard</a> protocol, defined in
<a href="http://tools.ietf.org/html/rfc865">RFC-0865</a>, for a dummy client/server interaction that allows
a server to listen on port 17 and emit a quote in ASCII text whenever a connection
is opened by a client.</p>

<p>To give you an example, try this from the command line<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>telnet alpha.mike-r.com 17</span></code></pre></td></tr></table></div></figure>




<blockquote><p>First love is only a little foolishness and a lot of curiosity, no <br/>really self-respecting woman would take advantage of it.</p><footer><strong>George Bernard Shaw</strong> <cite><a href='http://alpha.mike-r.com'>alpha.mike-r.com</a></cite></footer></blockquote>


<p>So today we are going to see how to implement a QOTD script in PHP, using Symfony2&#8217;s
DIC: the mini-library that we are going to write is dummy and really easy, so you won&#8217;t
get lost following its flow; I won&#8217;t use any autoloader - apart for the DIC stuff - so
the code will exactly look like the ancient PHP, the one you daily need to refactor.</p>

<h2>QOTD scripts</h2>

<p>We have 3 scripts that compose our small library; the first one is the entry point:</p>

<figure class='code'><figcaption><span>index.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">require</span> <span class="s1">&#39;QOTD.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$qotd</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">QOTD</span><span class="p">();</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$qotd</span><span class="o">-&gt;</span><span class="na">enchantUs</span><span class="p">()</span> <span class="o">.</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and then the QOTD class:</p>

<figure class='code'><figcaption><span>Quotes Of The Day generator class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">QOTD</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$wtfMode</span><span class="p">;</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$quotes</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s2">&quot;michael jordan&quot;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>          <span class="s2">&quot;Always turn a negative situation into a positive situation&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;I can accept failure, everyone fails at something. But I can&#39;t accept not trying&quot;</span>
</span><span class='line'>      <span class="p">),</span>
</span><span class='line'>      <span class="s2">&quot;Mahatma Gandhi&quot;</span>  <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>          <span class="s2">&quot;A coward is incapable of exhibiting love; it is the prerogative of the brave&quot;</span>
</span><span class='line'>      <span class="p">),</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$wtfMode</span> <span class="o">=</span> <span class="k">false</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">wtfMode</span> <span class="o">=</span> <span class="nv">$wtfMode</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">enchantUs</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="nv">$authorQuotes</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">quotes</span><span class="p">[</span><span class="nb">array_rand</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">quotes</span><span class="p">)];</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">wtfMode</span> <span class="o">===</span> <span class="k">true</span> <span class="o">&amp;&amp;</span> <span class="nb">is_int</span><span class="p">(</span><span class="nb">time</span><span class="p">(</span><span class="k">true</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s2">&quot;WTFed!!!&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$authorQuotes</span><span class="p">[</span><span class="nb">array_rand</span><span class="p">(</span><span class="nv">$authorQuotes</span><span class="p">)];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you see, the implementation is trivial: we have an array of <code>$quotes</code> and in the <code>enchantUs()</code>
method we extract a random quote from that array: note that there is a boolean parameter
- in the constructor - which enables or disables the <code>WTF mode</code>; when the mode is active, if</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="nb">is_int</span><span class="p">(</span><span class="nb">time</span><span class="p">(</span><span class="k">true</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>is true the QOTD class will output <code>WTFed!!!</code> instead of the usual quote from <code>$quotes</code>.</p>

<p>Let&#8217;s say that we also want to creare a class for Michael Jordan&#8217;s quotes:</p>

<figure class='code'><figcaption><span>Michael Jordan quotes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">JordanQOTD</span> <span class="k">extends</span> <span class="nx">QOTD</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$quotes</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s2">&quot;michael jordan&quot;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>          <span class="s2">&quot;Always turn a negative situation into a positive situation&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;I can accept failure, everyone fails at something. But I can&#39;t accept not trying&quot;</span>
</span><span class='line'>      <span class="p">),</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>which basically restricts the <code>$quotes</code> to MJ&#8217;s ones<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>.</p>

<p>If we want to change the class used to output quotes, we just need to edit the <code>index.php</code>:</p>

<figure class='code'><figcaption><span>index.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">require</span> <span class="s1">&#39;QOTD.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">require</span> <span class="s1">&#39;JordanQOTD.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$qotd</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">JordanQOTD</span><span class="p">();</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$qotd</span><span class="o">-&gt;</span><span class="na">enchantUs</span><span class="p">()</span> <span class="o">.</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Enter Symfony2 Dependency Injection Container</h2>

<p>The boss just told us that we&#8217;ll need to implement some more <em>modes</em> and lots of
person-specific quote classes, with some other logic to decide which QOTD class
to use and so on: your first decision is to try to parametrize the configuration
of the QOTD &#8220;service&#8221;, using a DIC ; although the problem and its design are quite
simple, it would be a good choice to have a single, central point to manage
services used in your code and their configuration.</p>

<p>First of all, create a <code>composer.json</code> file in the root of your project, to manage
the dependency to the DIC:</p>

<figure class='code'><figcaption><span>composer.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;require&quot;</span>: <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;php&quot;</span>: <span class="s2">&quot;&gt;=5.3.2&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;symfony/dependency-injection&quot;</span>: <span class="s2">&quot;2.0.10&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>then download Composer and install the DIC:</p>

<figure class='code'><figcaption><span>composer.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget http://getcomposer.org/composer.phar
</span><span class='line'>
</span><span class='line'>php composer.phar install
</span></code></pre></td></tr></table></div></figure>


<p>Now you can edit the <code>index.php</code> to add some configuration:</p>

<figure class='code'><figcaption><span>index.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">require</span> <span class="nx">__DIR__</span> <span class="o">.</span> <span class="s1">&#39;/vendor/.composer/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">require</span> <span class="s1">&#39;QOTD.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">require</span> <span class="s1">&#39;JordanQOTD.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">require</span> <span class="s1">&#39;container.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span> <span class="nv">$container</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;QOTD&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">enchantUs</span><span class="p">()</span> <span class="o">.</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>container.php</code> uses the Symfony2 DIC to register a <code>QOTD</code> service with
a <code>QOTD.mode</code> argument:</p>

<figure class='code'><figcaption><span>configuration of the container</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\ContainerBuilder</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$container</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ContainerBuilder</span><span class="p">();</span>
</span><span class='line'><span class="nv">$container</span><span class="o">-&gt;</span><span class="na">register</span><span class="p">(</span><span class="s1">&#39;QOTD&#39;</span><span class="p">,</span> <span class="s1">&#39;%qotd.class%&#39;</span><span class="p">)</span>
</span><span class='line'>          <span class="o">-&gt;</span><span class="na">addArgument</span><span class="p">(</span><span class="s1">&#39;%QOTD.mode%&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$container</span><span class="o">-&gt;</span><span class="na">setParameter</span><span class="p">(</span><span class="s1">&#39;qotd.class&#39;</span><span class="p">,</span> <span class="s1">&#39;QOTD&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$container</span><span class="o">-&gt;</span><span class="na">setParameter</span><span class="p">(</span><span class="s1">&#39;QOTD.mode&#39;</span><span class="p">,</span> <span class="k">false</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>For example, we can modify the configuration to enable the WTF mode:</p>

<figure class='code'><figcaption><span>enabling WTF mode</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\ContainerBuilder</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$container</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ContainerBuilder</span><span class="p">();</span>
</span><span class='line'><span class="nv">$container</span><span class="o">-&gt;</span><span class="na">register</span><span class="p">(</span><span class="s1">&#39;QOTD&#39;</span><span class="p">,</span> <span class="s1">&#39;%qotd.class%&#39;</span><span class="p">)</span>
</span><span class='line'>          <span class="o">-&gt;</span><span class="na">addArgument</span><span class="p">(</span><span class="s1">&#39;%QOTD.mode%&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$container</span><span class="o">-&gt;</span><span class="na">setParameter</span><span class="p">(</span><span class="s1">&#39;qotd.class&#39;</span><span class="p">,</span> <span class="s1">&#39;QOTD&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$container</span><span class="o">-&gt;</span><span class="na">setParameter</span><span class="p">(</span><span class="s1">&#39;QOTD.mode&#39;</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>or to change the service class, to only output MJ&#8217;s quotes:</p>

<figure class='code'><figcaption><span>changing the service class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\ContainerBuilder</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$container</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ContainerBuilder</span><span class="p">();</span>
</span><span class='line'><span class="nv">$container</span><span class="o">-&gt;</span><span class="na">register</span><span class="p">(</span><span class="s1">&#39;QOTD&#39;</span><span class="p">,</span> <span class="s1">&#39;%qotd.class%&#39;</span><span class="p">)</span>
</span><span class='line'>          <span class="o">-&gt;</span><span class="na">addArgument</span><span class="p">(</span><span class="s1">&#39;%QOTD.mode%&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$container</span><span class="o">-&gt;</span><span class="na">setParameter</span><span class="p">(</span><span class="s1">&#39;qotd.class&#39;</span><span class="p">,</span> <span class="s1">&#39;JordanQOTD&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$container</span><span class="o">-&gt;</span><span class="na">setParameter</span><span class="p">(</span><span class="s1">&#39;QOTD.mode&#39;</span><span class="p">,</span> <span class="k">false</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you might understand, with a DIC it&#8217;s possible to drastically <strong>change the
behaviour of your application</strong> editing a configuration file, with a bunch of
additional lines of code into your own application; another great thing is that
you can also use different &#8220;languages&#8221; to configure the DIC, for example YAML.</p>

<p>To do so, add the required dependency to composer:</p>

<figure class='code'><figcaption><span>composer.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;require&quot;</span>: <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;php&quot;</span>: <span class="s2">&quot;&gt;=5.3.2&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;symfony/dependency-injection&quot;</span>: <span class="s2">&quot;2.0.10&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;symfony/config&quot;</span>: <span class="s2">&quot;2.0.10&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;symfony/yaml&quot;</span>: <span class="s2">&quot;2.0.10&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>composer.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>php composer.phar update
</span></code></pre></td></tr></table></div></figure>


<p>then edit the <code>container.php</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\ContainerBuilder</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\YamlFileLoader</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\Config\FileLocator</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$container</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ContainerBuilder</span><span class="p">();</span>
</span><span class='line'><span class="nv">$container</span><span class="o">-&gt;</span><span class="na">register</span><span class="p">(</span><span class="s1">&#39;QOTD&#39;</span><span class="p">,</span> <span class="s1">&#39;%qotd.mode%&#39;</span><span class="p">)</span>
</span><span class='line'>          <span class="o">-&gt;</span><span class="na">addArgument</span><span class="p">(</span><span class="s1">&#39;%mode%&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$loader</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">YamlFileLoader</span><span class="p">(</span><span class="nv">$container</span><span class="p">,</span> <span class="k">new</span> <span class="nx">FileLocator</span><span class="p">(</span><span class="nx">__DIR__</span><span class="p">));</span>
</span><span class='line'><span class="nv">$loader</span><span class="o">-&gt;</span><span class="na">load</span><span class="p">(</span><span class="s1">&#39;container.yml&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>and then configure the DIC creating a <code>container.yml</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">services:</span>
</span><span class='line'><span class="x">  QOTD:</span>
</span><span class='line'><span class="x">    class: QOTD</span>
</span><span class='line'><span class="x">    arguments:</span>
</span><span class='line'><span class="x">      mode: true</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://en.wikipedia.org/wiki/INI_file">INI</a> is another - not documented in
<a href="http://symfony.com/doc/current/book/service_container.html">Symfony2&#8217;s docs</a> - option:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\ContainerBuilder</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\IniFileLoader</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\Config\FileLocator</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$container</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ContainerBuilder</span><span class="p">();</span>
</span><span class='line'><span class="nv">$container</span><span class="o">-&gt;</span><span class="na">register</span><span class="p">(</span><span class="s1">&#39;QOTD&#39;</span><span class="p">,</span> <span class="s1">&#39;%qotd.class%&#39;</span><span class="p">)</span>
</span><span class='line'>          <span class="o">-&gt;</span><span class="na">addArgument</span><span class="p">(</span><span class="s1">&#39;%qotd.mode%&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$loader</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">IniFileLoader</span><span class="p">(</span><span class="nv">$container</span><span class="p">,</span> <span class="k">new</span> <span class="nx">FileLocator</span><span class="p">(</span><span class="nx">__DIR__</span><span class="p">));</span>
</span><span class='line'><span class="nv">$loader</span><span class="o">-&gt;</span><span class="na">load</span><span class="p">(</span><span class="s1">&#39;container.ini&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[parameters]</span>
</span><span class='line'>  <span class="na">qotd.class</span> <span class="o">=</span> <span class="s">&quot;QOTD&quot;</span>
</span><span class='line'><span class="s">  qotd.mode = 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>There you go: with a few lines you have a completely working instance of the
Symfony2 dependency injection container: organizing dependencies and services&#8217;
instantiation becomes very easy with this kind of layer and, since its
implementation is trivial, I recommend you to gain familiarity with this
component.</p>

<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>Quote Of The Day <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>alpha-mike is the only known public service that implements QOTD protocol <a href='#fnref:2' rev='footnote'>↩</a></li><li id='fn:3'>This is not an optimal design for resolving such this kind of thing, but we&#8217;ll use it as it&#8217;s fairly simple to understand <a href='#fnref:3' rev='footnote'>↩</a></li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Retrieving raw WHOIS informations in PHP]]></title>
    <link href="http://odino.org/retrieving-raw-whois-informations-in-php/"/>
    <updated>2012-02-14T00:58:00+04:00</updated>
    <id>http://odino.org/retrieving-raw-whois-informations-in-php</id>
    <content type="html"><![CDATA[<ol class="aseries">
    <p>This post is part of the &#8221;<strong>WHOIS in PHP: consuming the Robowhois API</strong>&#8221; series; here is a list of all the articles contained this series:</p>
    <li>
        <a href="http://odino.org/a-php-library-to-retrieve-whois-informations/">A PHP library to retrieve WHOIS informations</a>
    </li>
    <li>
        <a href="http://odino.org/retrieving-raw-whois-informations-in-php/">Retrieving raw WHOIS informations in PHP</a>
    </li>
    <li>
        <a href="http://odino.org/checking-a-domain-s-availability-with-php/">Checking a domain&#8217;s availability with PHP</a>
    </li>
  <li>
    <a href="http://odino.org/y-u-no-access-whois-informations-in-php/">Y U NO access WHOIS informations in PHP?</a>
  </li>
</ol>


<p>After something more than a week I&#8217;m back here with a first implementation of
the PHP library I was <a href="http://odino.org/a-php-library-to-retrieve-whois-informations/">talking earlier</a>
to retrieve WHOIS informations with PHP.</p>

<!-- more -->


<p>In the first meeting I had with <a href="http://davidfunaro.com">David</a> we just setup the
environment (Composer, PHPUnit and so on) and today we&#8217;ve release the
<a href="https://github.com/robowhois/robowhois-php-client/tree/0.7.0">first tag</a>
- 0.7.0 - of <a href="https://github.com/robowhois/robowhois-php-client">Robowhois PHP client</a>,
a PHP library to consume <a href="http://robowhois.com">Robowhois</a> APIs.</p>

<h2>Installation</h2>

<p>The library is assembled with <a href="http://odino.org/managing-php-dependencies-with-composer/">Composer</a>,
so you only need to follow the canonical steps in order to download the
required dependencies and use it in your own codebase</p>

<figure class='code'><figcaption><span>Installing the Robowhois PHP client from the command line</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git@github.com:robowhois/robowhois-php-client.git
</span><span class='line'>
</span><span class='line'>wget http://getcomposer.org/composer.phar
</span><span class='line'>
</span><span class='line'>php composer.phar install
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>then you can autoload everything through the auto-generated autoloader
provided by Composer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">require</span> <span class="s1">&#39;vendor/.composer/autoload.php&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Retrieving raw WHOIS responses</h2>

<p>By now we have implemented the most simple API exposed, the <code>whois:index</code>
one, which returns the raw WHOIS informations associated to a domain.</p>

<p>You can take a look at the example at <code>sample/index.php</code> or try it live:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">php sample/index.php</span>
</span></code></pre></td></tr></table></div></figure>


<p>bare in mind that you&#8217;ll need to sign for a free API key up at Robowhois
website (as far as I remember, they provide 500 free request, but the annual
fee for unlimited requests is <strong>very cheap</strong>).</p>

<p>You can also be a bit more creative than the example above:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Robowhois\Robowhois</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Robowhois\Exception</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">require</span> <span class="s1">&#39;vendor/.composer/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$robowhois</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Robowhois</span><span class="p">(</span><span class="s1">&#39;INSERT-YOUR-API-KEY-HERE&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// same as $robowhois-&gt;whoisIndex(...)-&gt;getContent()</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$robowhois</span><span class="o">-&gt;</span><span class="na">whoisIndex</span><span class="p">(</span><span class="s1">&#39;robowhois.com&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">Exception\Http\Request\Unauthorized</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;WTF did you used a pirated API key?!?!?!&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">Exception\Http\Response\NotFound</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;OMG 404 happened :-|&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">Exception\Http\Response\ServerError</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;Server too drunk to fulfill the request&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Next release</h2>

<p>In the next meeting - probably next monday - we will implement the <code>account</code> API,
used to retrieve informations about the client&#8217;s account - useful for knowing how many
remaining HTTP requests you have, the <code>whois:availability</code> API, to check whether a
domain is available or not, and the <code>whois:record</code> API, identical to the one we
already implemented, but returning a JSON response.</p>

<p>Then&#8230; take a look at the <a href="https://github.com/robowhois/robowhois-php-client/issues">issue tracker</a>
to stay updated about the state of the project: in the next 3 weeks we should
be able to go out with a stable client for y&#8217;all.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A PHP library to retrieve WHOIS informations]]></title>
    <link href="http://odino.org/a-php-library-to-retrieve-whois-informations/"/>
    <updated>2012-02-03T03:40:00+04:00</updated>
    <id>http://odino.org/a-php-library-to-retrieve-whois-informations</id>
    <content type="html"><![CDATA[<ol class="aseries">
    <p>This post is part of the &#8221;<strong>WHOIS in PHP: consuming the Robowhois API</strong>&#8221; series; here is a list of all the articles contained this series:</p>
    <li>
        <a href="http://odino.org/a-php-library-to-retrieve-whois-informations/">A PHP library to retrieve WHOIS informations</a>
    </li>
    <li>
        <a href="http://odino.org/retrieving-raw-whois-informations-in-php/">Retrieving raw WHOIS informations in PHP</a>
    </li>
    <li>
        <a href="http://odino.org/checking-a-domain-s-availability-with-php/">Checking a domain&#8217;s availability with PHP</a>
    </li>
  <li>
    <a href="http://odino.org/y-u-no-access-whois-informations-in-php/">Y U NO access WHOIS informations in PHP?</a>
  </li>
</ol>


<p>In this days me and my friend <a href="http://davidfunaro.com">David</a> are renewing our committment
to <em>open source</em>: our next project is going to be an <strong>SDK for a
WHOIS webservice</strong>.</p>

<!-- more -->


<p><img class="right" src="http://odino.org/images/robodomain.png"></p>

<p>Last week we got in touch with Simone, the mind behind <a href="http://robodomain.com">Robodomain</a>,
a startup delivering a really useful product, which lets you</p>

<blockquote><p>Keep track of all your domains in one place.<br/>Check domain status, log transactions, orders and payments, store notes and enjoy our network tools.</p><footer><strong>Robodomain</strong> <cite><a href='http://robodomain.com'>Official Website</a></cite></footer></blockquote>


<p>To be able to develop its own software (in Ruby) he started writing a <a href="http://www.ruby-whois.org/">Gem</a>
and then realized that this kind of stuff could be useful to other people too: he decided to
open a public API - you only need to pay a bunch of bucks to use it - and launch a new, free,
universal WHOIS service that everyone can enjoy.</p>

<p>We are taking the stage in order to develop the official <strong>PHP SDK</strong> for the webservice, so
- along with the development of <a href="http://github.com/congow/Orient">Orient</a> - you&#8217;ll read here
about this new library in the next weeks.</p>

<p>We have just kickstarted the project, designed the first interfaces, implemented a bunch of
methods and tested them: if you are courious enough you can spot them over the internet, but
I won&#8217;t link and share what we developed until our next DevMeeting, in which we will do the
majority of the work.</p>

<p>However I want you to enjoy a preview of what you will be able to do with it (just some explanatory LOCs):</p>

<figure class='code'><figcaption><span>This is definitely NOT gonna be the code you&#8217;ll be using, just an example of how things work now</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Robowhois\Robowhois</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Robowhois\Http\Client</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Buzz\Browser</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$robowhois</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Robowhois</span><span class="p">(</span><span class="nv">$apiKey</span><span class="p">,</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">(</span><span class="k">new</span> <span class="nx">Browser</span><span class="p">()));</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$robowhois</span><span class="o">-&gt;</span><span class="na">isAvailable</span><span class="p">(</span><span class="s2">&quot;google.com&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s2">&quot;Hey man, go register google.com, seems that it&#39;s free!&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$whois</span> <span class="o">=</span> <span class="nv">$robodomain</span><span class="o">-&gt;</span><span class="na">whoisProperties</span><span class="p">(</span><span class="s1">&#39;google.com&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">echo</span> <span class="s2">&quot;Man, you&#39;ll need to wait until &quot;</span> <span class="o">.</span> <span class="nv">$whois</span><span class="o">-&gt;</span><span class="na">expiresAt</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">format</span><span class="p">(</span><span class="s1">&#39;Y-m-d H:i:s&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// $whois-&gt;expiresAt() returns a \DateTime object</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As far as we&#8217;ve already done, this SDK uses Symfony2&#8217;s <a href="https://github.com/symfony/HttpFoundation">HttpFoundation</a>
and <a href="https://github.com/kriswallsmith/Buzz">Buzz</a> to properly handle
communication with the webservice through the HTTP protocol: we are open to any suggestion, so
if you know a very good HTTP client that could replace Buzz<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup> we would be very
glad to evaluate it.</p>

<p>The standard bootstrap of the library will be also using Symfony2&#8217;s <a href="https://github.com/symfony/DependencyInjection">dependency injection
container</a>.</p>

<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>Not Zend\Http\Client <a href='#fnref:1' rev='footnote'>↩</a></li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The web benefits from SPDY just as SPDY benefits from HTTP]]></title>
    <link href="http://odino.org/http-benefits-from-spdy-as-spdy-benefits-from-http/"/>
    <updated>2012-01-27T19:27:00+04:00</updated>
    <id>http://odino.org/http-benefits-from-spdy-as-spdy-benefits-from-http</id>
    <content type="html"><![CDATA[<p>In these days <a href="http://www.chromium.org/spdy/spdy-protocol">SPDY</a> it&#8217;s gaining
its <em>momentum</em> due to a good article which explained how you should build
your <a href="http://www.igvita.com/2012/01/18/building-a-modern-web-stack-for-the-realtime-web/">technologic stack in the <em>realtime</em> web</a>.</p>

<!-- more -->


<p><img class="left" src="http://odino.org/images/http.png"></p>

<h2>HTTP is slowly dying</h2>

<p>This seems to be the conclusion that lot of people had after reading that article:
SPDY is a newer, faster, more modern protocol and I have no problem in admitting
that <em>a few</em> parts of the HTTP protocol need to be reviewed<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>: you
can&#8217;t simply advocate that HTTP fits <a href="http://lists.w3.org/Archives/Public/www-tag/2011Dec/0034.html">perfectly</a>
in today&#8217;s web, that&#8217;s a <em>de-facto</em> issue.</p>

<h2>SPDY in a nutshell</h2>

<p><img class="right" src="http://odino.org/images/spdy.packet.png"></p>

<p>SPDY is just a <strong>really good protocol implementation</strong>: it supports multiplexing,
<strong>encourages</strong> content compression, allows servers to <strong>push notifications</strong> and
lets you prioritize requests, just to mention the hottest features among
<a href="http://www.chromium.org/spdy/spdy-whitepaper">others</a>.</p>

<p>Amazon is currently shipping its Kindle with a browser that uses this protocol
to communicate with EC2 instances, <a href="https://wiki.mozilla.org/Platform/Features/SPDY">Firefox 11 will support it</a>
while - if using a google product - you may already be using SPDY<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>:
the road is long, but SPDY seems to be WWW&#8217;s <em>next big thing</em>.</p>

<h2>SPDY needs to love HTTP</h2>

<p>Before going out there yelling at HTTP and telling everyone that SPDY will be
the new, futuristic, what-we-were-missing web protocol I want you to consider a
few things.</p>

<p>It should not surprise you the fact that SPDY is <a href="http://www.chromium.org/spdy/spdy-protocol/spdy-protocol-draft2#TOC-HTTP-Layering-over-SPDY">almost-completely</a>
implementing <a href="http://www.ietf.org/rfc/rfc2616.txt">RFC2616</a>: <strong>the web relies on
established semantics</strong>, clients and servers interact based on a series of
well-known verbs, feedbacks and metadata associated to resources, that are the
only immanent concept of the web.</p>

<h2>Divide et impera: HTTP&#8217;s soul is here to stay</h2>

<blockquote><p>[We have] 10 years of implementation experience of RFC2616</p><footer><strong>Mark Nottingham</strong> <cite><a href='http://www.w3.org/2001/tag/2012/01/06-minutes#item02'>HTTP Futures and SPDY</a></cite></footer></blockquote>


<p>You should really reconsider the HTTP protocol as 2 separate layers: its
technical implementation and its interface.</p>

<blockquote><p>The [HTTP] interface is designed to be efficient for large-grain [&#8230;] data transfer, optimizing for the common case of the Web.</p><footer><strong>Roy T. Fielding</strong> <cite><a href='http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm#sec_5_1_5'>The Uniform Interface</a></cite></footer></blockquote>


<p>The technical implementation may be a little updated<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup> but its
interface was thought to be able to let machine and humans interact with
resources in the most open, fault-tolerant, scalable, robust way we could have
ever thought: <strong>without relying on HTTP, SPDY would not work</strong>, not in the ancient,
not in the modern, not even in the future web.</p>

<p>HTTP 2.0 is close, and <a href="http://www.w3.org/2001/tag/2012/01/06-minutes#item02">the W3C is not blind</a>.</p>

<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>To be kind <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>If you are currently reading this note with Chrome/Chromium, go here: chrome://net-internals/#events&q=type:SPDY_SESSION%20is:active <a href='#fnref:2' rev='footnote'>↩</a></li><li id='fn:3'>Again, to be kind <a href='#fnref:3' rev='footnote'>↩</a></li>
    </ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Roy Fielding on SOAP in the W3C context]]></title>
    <link href="http://odino.org/roy-fielding-on-soap-in-the-w3c-context/"/>
    <updated>2012-01-27T15:20:00+04:00</updated>
    <id>http://odino.org/roy-fielding-on-soap-in-the-w3c-context</id>
    <content type="html"><![CDATA[<!-- more -->


<p>I found an old but interesting entry in the WWW-talk mailing list:</p>

<p><img class="right" src="http://odino.org/images/royfielding.png"></p>

<blockquote><p>The only reason SOAP remains in the W3C for standardization is because all of the other forums either rejected the concept out of hand or refused to rubber-stamp a poor implementation of a bad idea.<br/>If this thing is going to be called Web Services, then I insist that it actually have something to do with the Web.<br/>If not, I&#8217;d rather have the WS-I group responsible for abusing the marketplace with yet another CORBA/DCOM than have the W3C waste its effort pandering to the whims of marketing consultants.<br/>I am not here to accommodate the requirements of mass hysteria.</p><footer><strong>Roy T. Fielding</strong> <cite><a href='http://lists.w3.org/Archives/Public/www-tag/2002Apr/0235.html'>WWW-talk Mailing List</a></cite></footer></blockquote>


<p>:-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enter SfCcTesting: Symfony 1.X Client-Crawler Testing]]></title>
    <link href="http://odino.org/enter-sfcctesting-symfony-1-dot-x-client-crawler-testing/"/>
    <updated>2012-01-26T11:51:00+04:00</updated>
    <id>http://odino.org/enter-sfcctesting-symfony-1-dot-x-client-crawler-testing</id>
    <content type="html"><![CDATA[<p>Earlier today I introduced why and how we initially integrated the <a href="http://odino.org/functional-testing-symfony-1-dot-4-with-phpunit-the-symfony2-way/">Symfony2
testing mechanism into symfony 1.X</a>
: in order to make this piece of software as clean and evolvable as possible
I just isolated it and made a small repo on Github.</p>

<!-- more -->


<h2>SfCcTesting</h2>

<p><a href="https://github.com/odino/SfCcTesting">SfCcTesting</a> - <strong>Symfony 1.X
Client-Crawler Testing</strong> - is a small library (2 classes
and a configuration file) which lets you write functional tests, in symfony 1.X,
<em>a là Symfony2</em>.</p>

<p>if you take a look at the <a href="https://github.com/odino/SfCcTesting/blob/master/README.md">repository&#8217;s README</a>
you will find the basic instructions to start writing your tests: keep in mind
that - although it&#8217;s usable on <em>old-school</em> symfony projects (svn etc) - you
should install it with Git and manage dependencies and updates with
<a href="http://odino.org/managing-php-dependencies-with-composer/">Composer</a>.</p>

<figure class='code'><figcaption><span>A PHPUnit functional test for symfony 1.X written thanks to SfCcTesting</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">odino\SfCcTesting\WebTestCase</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">HomepageTest</span> <span class="k">extends</span> <span class="nx">WebTestCase</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">testHelloWorld</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nv">$client</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createClient</span><span class="p">();</span>
</span><span class='line'>    <span class="nv">$crawler</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="s2">&quot;Hello world&quot;</span><span class="p">,</span> <span class="nv">$crawler</span><span class="o">-&gt;</span><span class="na">filter</span><span class="p">(</span><span class="s1">&#39;h1&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">text</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">protected</span> <span class="k">function</span> <span class="nf">getApplication</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;frontend&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">protected</span> <span class="k">function</span> <span class="nf">bootstrapSymfony</span><span class="p">(</span><span class="nv">$app</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">include</span><span class="p">(</span><span class="nb">dirname</span><span class="p">(</span><span class="k">__FILE__</span><span class="p">)</span><span class="o">.</span><span class="s1">&#39;/../../test/bootstrap/functional.php&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each test needs to implement 2 protected methods, <code>getApplication()</code> and
<code>bootstrapSymfony()</code>.</p>

<p>The <code>getApplication</code> method defines the application to bootstrap symfony for,
and should be defined in an <code>ApplicationWebTestCase</code> class, like in the following
example:</p>

<figure class='code'><figcaption><span>A base class for testing the backend</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">odino\SfCcTesting\WebTestCase</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BackendWebTestCase</span> <span class="k">extends</span> <span class="nx">WebTestCase</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">protected</span> <span class="k">function</span> <span class="nf">getApplication</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;backend&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">protected</span> <span class="k">function</span> <span class="nf">bootstrapSymfony</span><span class="p">(</span><span class="nv">$app</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">include</span><span class="p">(</span><span class="nb">dirname</span><span class="p">(</span><span class="k">__FILE__</span><span class="p">)</span><span class="o">.</span><span class="s1">&#39;/../../test/bootstrap/functional.php&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>so your test files become leaner:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">HomepageTest</span> <span class="k">extends</span> <span class="nx">BackendWebTestCase</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">testHelloWorld</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nv">$client</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createClient</span><span class="p">();</span>
</span><span class='line'>    <span class="nv">$crawler</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="s2">&quot;Hello world&quot;</span><span class="p">,</span> <span class="nv">$crawler</span><span class="o">-&gt;</span><span class="na">filter</span><span class="p">(</span><span class="s1">&#39;h1&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">text</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>bootstrapSymfony()</code> method, instead, includes the <strong>bootstrap for the symfony
application in the test environment</strong>; you are <strong>allowed to redefine the location
of the bootstrap</strong> in order not to force you to follow a unique directory
structure convention.</p>

<p>The <code>bootstrapSymfony()</code> method should be placed in a <code>BaseWebTestCase</code> of
our test suite:</p>

<figure class='code'><figcaption><span>A base class for boostrapping the symfony testing environment</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">odino\SfCcTesting\WebTestCase</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BaseWebTestCase</span> <span class="k">extends</span> <span class="nx">WebTestCase</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">protected</span> <span class="k">function</span> <span class="nf">bootstrapSymfony</span><span class="p">(</span><span class="nv">$app</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">include</span><span class="p">(</span><span class="nb">dirname</span><span class="p">(</span><span class="k">__FILE__</span><span class="p">)</span><span class="o">.</span><span class="s1">&#39;/../../test/bootstrap/functional.php&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>so your different <code>ApplicationWebTestCase</code> can share the same bootstrap file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">odino\SfCcTesting\WebTestCase</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BackendWebTestCase</span> <span class="k">extends</span> <span class="nx">BaseWebTestCase</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">protected</span> <span class="k">function</span> <span class="nf">getApplication</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;backend&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">odino\SfCcTesting\WebTestCase</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">FrontendWebTestCase</span> <span class="k">extends</span> <span class="nx">BaseWebTestCase</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">protected</span> <span class="k">function</span> <span class="nf">getApplication</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;frontend&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s all folks: with just a bunch of lines of code you are able
to functionally test a symfony 1.X application with the Symfony2
DomCrawler.</p>

<p><a href="https://github.com/odino/SfCcTesting/issues">Feel free to rant</a> and, if you want,
you can already rely on this small library via
<a href="http://packagist.org/packages/odino/SfCcTesting">Packagist</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional testing symfony 1.X with PHPUnit: the Symfony2 way]]></title>
    <link href="http://odino.org/functional-testing-symfony-1-dot-4-with-phpunit-the-symfony2-way/"/>
    <updated>2012-01-26T00:45:00+04:00</updated>
    <id>http://odino.org/functional-testing-symfony-1-dot-4-with-phpunit-the-symfony2-way</id>
    <content type="html"><![CDATA[<p>In the process of starting a brand new project here at
<a href="http://www.dnsee.com">DNSEE</a>, me and my colleague
<a href="http://www.linkedin.com/in/matteobiagetti">Matteo</a> decided
- in order to make the whole team aware of how to test
Symfony2 applications with <a href="http://www.phpunit.de">PHPUnit</a>
- to port the Symfony2 functional testing mechanism into
this project, which will be developed with symfony
1.X<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.</p>

<!-- more -->


<h2>Background</h2>

<p><a href="http://trac.symfony-project.org/wiki/LimeTestingFramework">Lime</a>
- as you may know - is the officially-supported testing
&#8220;framework&#8221;: it was specifically built to be used inside
symfony 1.X applications and introduced lots of developers
to the whole idea of testing in PHP.</p>

<p>It&#8217;s a lightweight and simple implementation of a testing
framework, with poor support for mock objects, test doubles,
data providers and test isolation, but it does its job.</p>

<p>Since <a href="http://www.symfony.com">Symfony2</a> decided to move to
PHPUnit - a <strong>serious</strong> and more robust testing framework -
suddenly all symfony developers needed to learn PHPUnit in order
to test the new applications: this - at least - didn&#8217;t
happened to me, because I heavily faced PHPUnit developing
<a href="http://github.com/congow/Orient">Orient</a>, with lots of
WTFs - mainly <em>my</em> fault.</p>

<p>So, starting this new project, I asked the team if they would
agree on using PHPUnit to functionally test this new symfony 1.4
application, for 2 main reasons:</p>

<ul>
<li><strong>learn PHPUnit</strong>, since the 3 developers involved in the project
have worked for 10|4|0 months on PHPUnit ever</li>
<li><strong>get prepared for the big move</strong>, since Symfony2 uses an analogous testing
mechanism</li>
</ul>


<h2>The Symfony2 way</h2>

<p>In Symfony2 you basically instantiate your application with a fake
client and make requests to it; at each request the application
produces a response and a crawler lets you
<a href="http://symfony.com/doc/2.0/book/testing.html#working-with-the-test-client">test the output</a>:</p>

<figure class='code'><figcaption><span>A functional test for Symfony2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Acme\DemoBundle\Tests\Controller</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Test\WebTestCase</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">FooControllerTest</span> <span class="k">extends</span> <span class="nx">WebTestCase</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">testIndex</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$client</span> <span class="o">=</span> <span class="k">static</span><span class="o">::</span><span class="na">createClient</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$crawler</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;/homepage&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="s2">&quot;Welcome!&quot;</span><span class="p">,</span> <span class="nv">$crawler</span><span class="o">-&gt;</span><span class="na">filter</span><span class="p">(</span><span class="s1">&#39;h1#page-title&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">text</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>So, as you see, PHPUnit is used to make assertions
on the response body<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>.</p>

<h2>The basic idea</h2>

<p>So, to backport the mechanism illustrated in the previous
chapter to symfony 1.X, we should <strong>rely on a
DOM crawler and a browser</strong>, capable of making HTTP requests
and parse subquent responses&#8217; bodies.</p>

<p>Fortunately, symfony 1.X&#8217;s functional testing mechanism already
relies on an <a href="http://www.symfony-project.org/api/1_4/sfBrowser">internal browser</a>
, able to bootstrap the application and make fake HTTP
requests<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>, so we only need to integrate this browser
into a PHPUnit test and parse responses with a crawler: since
Symfony2 is a well-decoupled set of libraries we will use its
<a href="https://github.com/symfony/DomCrawler">DomCrawler</a> component.</p>

<h2>Implementation</h2>

<p>First of all import the required libraries into your
symfony project; using SVN, we updated the <code>lib/vendor</code>
directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p lib/vendor/Symfony/Component
</span><span class='line'>svn add lib/vendor/Symfony
</span><span class='line'>svn pe svn:externals lib/vendor/Symfony/Component
</span></code></pre></td></tr></table></div></figure>


<p>the content of the <code>externals</code> property will be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>DomCrawler https://svn.github.com/symfony/DomCrawler.git
</span><span class='line'>CssSelector https://svn.github.com/symfony/CssSelector.git
</span></code></pre></td></tr></table></div></figure>


<p>We are downloading the CssSelector component in order to use
CSS selectors within the crawler: if you don&#8217;t want to use it you&#8217;ll
need to write XPath queries to access the DOM nodes.</p>

<p>Save the <code>externals</code> file and commit, then update the
<code>lib/vendor/Symfony</code> directory in order to phisically
download the dependencies.</p>

<p>To finish the setup of the environment, create a <code>phpunit.xml.dist</code>
file in the root of the symfony project:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;phpunit</span> <span class="na">backupGlobals=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>         <span class="na">bootstrap=</span><span class="s">&quot;test/bootstrap/autoload.php&quot;</span>
</span><span class='line'>         <span class="na">backupStaticAttributes=</span><span class="s">&quot;false&quot;</span>
</span><span class='line'>         <span class="na">colors=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>         <span class="na">convertErrorsToExceptions=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>         <span class="na">convertNoticesToExceptions=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>         <span class="na">convertWarningsToExceptions=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>         <span class="na">forceCoversAnnotation=</span><span class="s">&quot;false&quot;</span>
</span><span class='line'>         <span class="na">mapTestClassNameToCoveredClassName=</span><span class="s">&quot;false&quot;</span>
</span><span class='line'>         <span class="na">processIsolation=</span><span class="s">&quot;false&quot;</span>
</span><span class='line'>         <span class="na">stopOnError=</span><span class="s">&quot;false&quot;</span>
</span><span class='line'>         <span class="na">stopOnFailure=</span><span class="s">&quot;false&quot;</span>
</span><span class='line'>         <span class="na">stopOnIncomplete=</span><span class="s">&quot;false&quot;</span>
</span><span class='line'>         <span class="na">stopOnSkipped=</span><span class="s">&quot;false&quot;</span>
</span><span class='line'>         <span class="na">syntaxCheck=</span><span class="s">&quot;false&quot;</span>
</span><span class='line'>         <span class="na">testSuiteLoaderClass=</span><span class="s">&quot;PHPUnit_Runner_StandardTestSuiteLoader&quot;</span>
</span><span class='line'>         <span class="na">strict=</span><span class="s">&quot;false&quot;</span>
</span><span class='line'>         <span class="na">verbose=</span><span class="s">&quot;false&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;testsuites&gt;</span>
</span><span class='line'>      <span class="nt">&lt;testsuite</span> <span class="na">name=</span><span class="s">&quot;Main tests&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;directory</span> <span class="nt">&gt;</span>test/phpunit<span class="nt">&lt;/directory&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/testsuite&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/testsuites&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;filter&gt;</span>
</span><span class='line'>      <span class="nt">&lt;blacklist&gt;</span>
</span><span class='line'>        <span class="nt">&lt;directory</span> <span class="na">suffix=</span><span class="s">&quot;.php&quot;</span><span class="nt">&gt;</span>test<span class="nt">&lt;/directory&gt;</span>
</span><span class='line'>        <span class="nt">&lt;directory</span> <span class="na">suffix=</span><span class="s">&quot;.php&quot;</span><span class="nt">&gt;</span>src<span class="nt">&lt;/directory&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/blacklist&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/filter&gt;</span>
</span><span class='line'><span class="nt">&lt;/phpunit&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and the <code>test/bootstrap/autoloader.php</code> file, used by PHPUnit
for -guess it - autoloading classes:</p>

<figure class='code'><figcaption><span>The autoloader taken from Composer</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Composer\Autoload</span><span class="p">;</span> <span class="k">class</span> <span class="nc">ClassLoader</span> <span class="p">{</span> <span class="k">private</span> <span class="nv">$prefixes</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span> <span class="k">private</span> <span class="nv">$fallbackDirs</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span> <span class="k">public</span> <span class="k">function</span> <span class="nf">getPrefixes</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">prefixes</span><span class="p">;</span> <span class="p">}</span> <span class="k">public</span> <span class="k">function</span> <span class="nf">getFallbackDirs</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fallbackDirs</span><span class="p">;</span> <span class="p">}</span> <span class="k">public</span> <span class="k">function</span> <span class="nf">add</span><span class="p">(</span><span class="nv">$prefix</span><span class="p">,</span> <span class="nv">$paths</span><span class="p">)</span> <span class="p">{</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$prefix</span><span class="p">)</span> <span class="p">{</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fallbackDirs</span> <span class="o">=</span> <span class="p">(</span><span class="k">array</span><span class="p">)</span> <span class="nv">$paths</span><span class="p">;</span> <span class="k">return</span><span class="p">;</span> <span class="p">}</span> <span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">prefixes</span><span class="p">[</span><span class="nv">$prefix</span><span class="p">]))</span> <span class="p">{</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">prefixes</span><span class="p">[</span><span class="nv">$prefix</span><span class="p">]</span> <span class="o">=</span> <span class="nb">array_merge</span><span class="p">(</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">prefixes</span><span class="p">[</span><span class="nv">$prefix</span><span class="p">],</span> <span class="p">(</span><span class="k">array</span><span class="p">)</span> <span class="nv">$paths</span> <span class="p">);</span> <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">prefixes</span><span class="p">[</span><span class="nv">$prefix</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="k">array</span><span class="p">)</span> <span class="nv">$paths</span><span class="p">;</span> <span class="p">}</span> <span class="p">}</span> <span class="k">public</span> <span class="k">function</span> <span class="nf">register</span><span class="p">(</span><span class="nv">$prepend</span> <span class="o">=</span> <span class="k">false</span><span class="p">)</span> <span class="p">{</span> <span class="nx">spl_autoload_register</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="nv">$this</span><span class="p">,</span> <span class="s1">&#39;loadClass&#39;</span><span class="p">),</span> <span class="k">true</span><span class="p">,</span> <span class="nv">$prepend</span><span class="p">);</span> <span class="p">}</span> <span class="k">public</span> <span class="k">function</span> <span class="nf">loadClass</span><span class="p">(</span><span class="nv">$class</span><span class="p">)</span> <span class="p">{</span> <span class="k">if</span> <span class="p">(</span><span class="nv">$file</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">findFile</span><span class="p">(</span><span class="nv">$class</span><span class="p">))</span> <span class="p">{</span> <span class="k">require</span> <span class="nv">$file</span><span class="p">;</span> <span class="k">return</span> <span class="k">true</span><span class="p">;</span> <span class="p">}</span> <span class="p">}</span> <span class="k">public</span> <span class="k">function</span> <span class="nf">findFile</span><span class="p">(</span><span class="nv">$class</span><span class="p">)</span> <span class="p">{</span> <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;\\&#39;</span> <span class="o">==</span> <span class="nv">$class</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="p">{</span> <span class="nv">$class</span> <span class="o">=</span> <span class="nb">substr</span><span class="p">(</span><span class="nv">$class</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span> <span class="p">}</span> <span class="k">if</span> <span class="p">(</span><span class="k">false</span> <span class="o">!==</span> <span class="nv">$pos</span> <span class="o">=</span> <span class="nb">strrpos</span><span class="p">(</span><span class="nv">$class</span><span class="p">,</span> <span class="s1">&#39;\\&#39;</span><span class="p">))</span> <span class="p">{</span> <span class="nv">$classPath</span> <span class="o">=</span> <span class="nx">DIRECTORY_SEPARATOR</span> <span class="o">.</span> <span class="nb">str_replace</span><span class="p">(</span><span class="s1">&#39;\\&#39;</span><span class="p">,</span> <span class="nx">DIRECTORY_SEPARATOR</span><span class="p">,</span> <span class="nb">substr</span><span class="p">(</span><span class="nv">$class</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">$pos</span><span class="p">));</span> <span class="nv">$className</span> <span class="o">=</span> <span class="nb">substr</span><span class="p">(</span><span class="nv">$class</span><span class="p">,</span> <span class="nv">$pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="nv">$classPath</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span> <span class="nv">$className</span> <span class="o">=</span> <span class="nv">$class</span><span class="p">;</span> <span class="p">}</span> <span class="nv">$classPath</span> <span class="o">.=</span> <span class="nx">DIRECTORY_SEPARATOR</span> <span class="o">.</span> <span class="nb">str_replace</span><span class="p">(</span><span class="s1">&#39;_&#39;</span><span class="p">,</span> <span class="nx">DIRECTORY_SEPARATOR</span><span class="p">,</span> <span class="nv">$className</span><span class="p">)</span> <span class="o">.</span> <span class="s1">&#39;.php&#39;</span><span class="p">;</span> <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">prefixes</span> <span class="k">as</span> <span class="nv">$prefix</span> <span class="o">=&gt;</span> <span class="nv">$dirs</span><span class="p">)</span> <span class="p">{</span> <span class="k">foreach</span> <span class="p">(</span><span class="nv">$dirs</span> <span class="k">as</span> <span class="nv">$dir</span><span class="p">)</span> <span class="p">{</span> <span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">===</span> <span class="nb">strpos</span><span class="p">(</span><span class="nv">$class</span><span class="p">,</span> <span class="nv">$prefix</span><span class="p">))</span> <span class="p">{</span> <span class="k">if</span> <span class="p">(</span><span class="nb">file_exists</span><span class="p">(</span><span class="nv">$dir</span> <span class="o">.</span> <span class="nv">$classPath</span><span class="p">))</span> <span class="p">{</span> <span class="k">return</span> <span class="nv">$dir</span> <span class="o">.</span> <span class="nv">$classPath</span><span class="p">;</span> <span class="p">}</span> <span class="p">}</span> <span class="p">}</span> <span class="p">}</span> <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fallbackDirs</span> <span class="k">as</span> <span class="nv">$dir</span><span class="p">)</span> <span class="p">{</span> <span class="k">if</span> <span class="p">(</span><span class="nb">file_exists</span><span class="p">(</span><span class="nv">$dir</span> <span class="o">.</span> <span class="nv">$classPath</span><span class="p">))</span> <span class="p">{</span> <span class="k">return</span> <span class="nv">$dir</span> <span class="o">.</span> <span class="nv">$classPath</span><span class="p">;</span> <span class="p">}</span> <span class="p">}</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$__composer_autoload_init</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$loader</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\Composer\Autoload\ClassLoader</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$map</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;Symfony\\Component\\DomCrawler&#39;</span> <span class="o">=&gt;</span> <span class="nx">__DIR__</span> <span class="o">.</span> <span class="s1">&#39;/../../lib/vendor/&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;Symfony\\Component\\CssSelector&#39;</span> <span class="o">=&gt;</span> <span class="nx">__DIR__</span> <span class="o">.</span> <span class="s1">&#39;/../../lib/vendor/&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$map</span> <span class="k">as</span> <span class="nv">$namespace</span> <span class="o">=&gt;</span> <span class="nv">$path</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$loader</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="nv">$namespace</span><span class="p">,</span> <span class="nv">$path</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$loader</span><span class="o">-&gt;</span><span class="na">register</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$loader</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nv">$__composer_autoload_init</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point the environment is ready, and you can start writing
your Symfony2&#8217;s correspondent <code>WebTestCase</code> class<sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup>:</p>

<figure class='code'><figcaption><span>lib/test/sfWebTestCase.class.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">abstract</span> <span class="k">class</span> <span class="nc">sfWebTestCase</span> <span class="k">extends</span> <span class="nx">PHPUnit_Framework_TestCase</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">protected</span> <span class="k">function</span> <span class="nf">createClient</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nv">$app</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getApplication</span><span class="p">();</span>
</span><span class='line'>    <span class="k">include</span><span class="p">(</span><span class="nb">dirname</span><span class="p">(</span><span class="k">__FILE__</span><span class="p">)</span><span class="o">.</span><span class="s1">&#39;/../../test/bootstrap/functional.php&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nx">sfPHPUnitBrowser</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">abstract</span> <span class="k">protected</span> <span class="k">function</span> <span class="nf">getApplication</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we&#8217;ve created a base class for every functional test we&#8217;ll write.</p>

<p>It consist in:</p>

<ul>
<li>a <code>createClient()</code> method which instantiates a new browser based on
some configuration</li>
<li>an abstract method that each functional test need to implement in order
to setup the right application in the <code>createClient()</code> method
(frontent, backend, whatever&#8230;)</li>
</ul>


<p>The browser that we are using is <code>sfPHPUnitBrowser</code>, instance of a
non-existing class, so let&#8217;s create it:</p>

<figure class='code'><figcaption><span>lib/test/sfPHPUnitBrowser.class.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\DomCrawler\Crawler</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">sfPHPUnitBrowser</span> <span class="k">extends</span> <span class="nx">sfBrowser</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">call</span><span class="p">(</span><span class="nv">$uri</span><span class="p">,</span> <span class="nv">$method</span> <span class="o">=</span> <span class="s1">&#39;get&#39;</span><span class="p">,</span> <span class="nv">$parameters</span> <span class="o">=</span> <span class="k">array</span><span class="p">(),</span> <span class="nv">$changeStack</span> <span class="o">=</span> <span class="k">true</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nv">$browser</span> <span class="o">=</span> <span class="k">parent</span><span class="o">::</span><span class="na">call</span><span class="p">(</span><span class="nv">$uri</span><span class="p">,</span> <span class="nv">$method</span><span class="p">,</span> <span class="nv">$parameters</span><span class="p">,</span> <span class="nv">$changeStack</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$crawler</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Crawler</span><span class="p">();</span>
</span><span class='line'>    <span class="nv">$crawler</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="nv">$browser</span><span class="o">-&gt;</span><span class="na">getResponse</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getContent</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$crawler</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This class extends the usual <code>sfBrowser</code> one adding a simple functionality:
when a request is made, it does not return itself but an instance of a
<code>Crawler</code> object.</p>

<p>This will let you do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$crawler</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/home&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertCount</span><span class="p">(</span><span class="nx">X</span><span class="p">,</span> <span class="nv">$crawler</span><span class="o">-&gt;</span><span class="na">filter</span><span class="p">(</span><span class="s1">&#39;CSS selector here&#39;</span><span class="p">));</span>
</span><span class='line'><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertTrue</span><span class="p">(</span><span class="nv">$crawler</span><span class="o">-&gt;</span><span class="na">filter</span><span class="p">(</span><span class="s1">&#39;html:contains(h1)&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>If you didn&#8217;t mistyped anything you should be able to
create your first test:</p>

<figure class='code'><figcaption><span>test/phpunit/HomepageTest.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">include</span><span class="p">(</span><span class="nx">__DIR__</span> <span class="o">.</span> <span class="s2">&quot;/../../lib/test/sfWebTestCase.class.php&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\DomCrawler\Crawler</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">HomepageTest</span> <span class="k">extends</span> <span class="nx">sfWebTestCase</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">testHelloWorld</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nv">$client</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createClient</span><span class="p">();</span>
</span><span class='line'>    <span class="nv">$crawler</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="s2">&quot;Hello world&quot;</span><span class="p">,</span> <span class="nv">$crawler</span><span class="o">-&gt;</span><span class="na">filter</span><span class="p">(</span><span class="s1">&#39;h1&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">text</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">protected</span> <span class="k">function</span> <span class="nf">getApplication</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;frontend&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, create a route for your homepage and render
some dummy template:</p>

<figure class='code'><figcaption><span>The template we are going to test</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;</span>Hello world<span class="nt">&lt;/h1&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you can run the test with the usual <code>phpunit</code> command:</p>

<p><img class="center" src="http://odino.org/images/phpunit.symfony.png"></p>

<p>The greatest benefit of this approach is that you can <strong>use
PHPUnit&#8217;s pure functionalities to test symfony 1.X
applications</strong> without re-inventing the wheel: what we saw
was the test of some output but bare in mind that, extending
<code>sfBrowser</code>, our <code>$client</code> object is able to access the request
and the user session too.</p>

<h2>Why not re-using existing integrations?</h2>

<p>Obviously, <strong>before</strong> writing any line of code, we took a look
at existing PHPUnit&#8217;s integrations into symfony 1.X.</p>

<p>There are - basically - 2 plugins:</p>

<ul>
<li><a href="http://www.symfony-project.org/plugins/sfPHPUnit2Plugin">sfPHPUnit2Plugin</a>,
which seemed useless being a PHPUnit wrapper for lime</li>
<li><a href="http://www.symfony-project.org/plugins/sfPhpunitPlugin">sfPHPUnitPlugin</a>,
which uses PHPUnit + Selenium, but we really don&#8217;t want to depend on
a selenium instance to run our tests</li>
</ul>


<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>We are actually developing a few projects with Symfony2, mostly landing pages and small data-driven CRUD applications, due to the lack of comprehensive documentation about Symfony2, but I will flame about it in another post <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>This is not entirely true: PHPUnit is mainly used for testing the response, but inside a test-case you can access the user&#8217;s session, cookies and so on, therefore you can assert against lots of objects and use-cases <a href='#fnref:2' rev='footnote'>↩</a></li><li id='fn:3'>You can also use a real HTTP client to make requests to your application and test the output, but this approach is strongly discouraged because of dramatically-low performances <a href='#fnref:3' rev='footnote'>↩</a></li><li id='fn:4'>The WebTestCase is a base class for every functional test (in Symfony2), like PHPUnit_Framework_TestCase for canonical unit tests <a href='#fnref:4' rev='footnote'>↩</a></li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quality isn't always better than quantity]]></title>
    <link href="http://odino.org/quality-isnt-always-better-than-quality/"/>
    <updated>2012-01-25T13:43:00+04:00</updated>
    <id>http://odino.org/quality-isnt-always-better-than-quality</id>
    <content type="html"><![CDATA[<p>Reading about <a href="http://www.amazon.com/Data-Intensive-Processing-MapReduce-Synthesis-Technologies/dp/1608453421">data processing with MapReduce</a>
I was astonished when I first encountered the <em><a href="http://books.google.it/books?id=GxFYuVZHG60C&amp;pg=PA134&amp;lpg=PA134&amp;dq=stupid+backoff+algorithm&amp;source=bl&amp;ots=fMzZNlaNaN&amp;sig=mcEdim6-_wZL4aWKebh3s79KMS4&amp;hl=it&amp;sa=X&amp;ei=z_kfT56BG-vP4QSY2N2ODw&amp;ved=0CD0Q6AEwAzgK#v=onepage&amp;q=stupid%20backoff%20algorithm&amp;f=false">Stupid backoff</a></em>
algorithm&#8217;s tale.</p>

<!-- more -->


<p>The story is pretty simple: the <a href="diom.ucsd.edu/~rlevy/lign256/winter2008/kneser_ney_mini_example.pdf">Kneser-Ney</a>
smoothing strategy was a <em>state-of-the-art</em> way for processing data, but it
had an heavy computational cost.</p>

<blockquote><p>We introduce a new smoothing method, dubbed Stupid Backoff, that is inexpensive to train on large data sets and approaches the quality of Kneser-Ney Smoothing as the amount of training data increases.</p><footer><strong>Thorsten Brants</strong> <cite><a href='http://acl.ldc.upenn.edu/D/D07/D07-1090.pdf'>Large Language Models in Machine Translation</a></cite></footer></blockquote>


<p>In 2007 <a href="http://www.coli.uni-saarland.de/~thorsten/">Thorsten Brants</a> developed
a new smoothing algorithm, simpler than the Kneser-Ney one, which was very lean
and appliable to large amounts of data.</p>

<h2>The result?</h2>

<p>These algorithms were heavily used in machine translations, and you can already
figure out what happened: with small datasets the <em>backoff</em> was generating
less-accurate translations but, as the amount of data analized growed, it was
able to extract more valid translations, eventually beating Kneser-Ney&#8217;s score<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.</p>

<p>I&#8217;d like you to read a few notes about the <em>stupid backoff</em>&#8217;s introductory paper:</p>

<iframe src="http://docs.google.com/viewer?url=http%3A%2F%2Facl.ldc.upenn.edu%2FD%2FD07%2FD07-1090.pdf&embedded=true" width="100%" height="780" style="border: none;"></iframe>




<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>This was possible, in the machine-translation scenario, thanks to the fact that the algorithm could be &#8220;trained&#8221; to perform better translations as the dataset grew <a href='#fnref:1' rev='footnote'>↩</a></li>
    </ol>
</div>



]]></content>
  </entry>
  
</feed>
