<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Alessandro Nadalin]]></title>
  <link href="http://www.odino.org/atom.xml" rel="self"/>
  <link href="http://www.odino.org/"/>
  <updated>2012-12-08T16:10:31+04:00</updated>
  <id>http://www.odino.org/</id>
  <author>
    <name><![CDATA[Alessandro Nadalin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Video introduction about NoSQL graph databases and OrientDB]]></title>
    <link href="http://www.odino.org/video-introduction-about-nosql-graph-databases-and-orientdb/"/>
    <updated>2012-12-08T15:56:00+04:00</updated>
    <id>http://www.odino.org/video-introduction-about-nosql-graph-databases-and-orientdb</id>
    <content type="html"><![CDATA[<p>During October of the last year, me and my ex-colleague David
took some time off to partecipate to the <a href="http://phpcon.pl/2011/pl/">polish PHP Conference</a>
with a talk about graph databases, OrientDB and how to integrate it
in PHP.</p>

<!-- more -->


<p>I recently found out that the videos recorded at the conference
finally made it to Vimeo: enjoy some tarzan english!</p>

<iframe src="http://player.vimeo.com/video/53451968?badge=0" width="720" height="600" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p> <p><a href="http://vimeo.com/53451968">Alessandro Nadalin, David Funaro: Graph databases and PHP: time for serious stuff</a> from <a href="http://vimeo.com/user10854134">PLUG</a> on <a href="http://vimeo.com">Vimeo</a>.</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coding bureaucracy]]></title>
    <link href="http://www.odino.org/coding-bureaucracy/"/>
    <updated>2012-12-05T12:23:00+04:00</updated>
    <id>http://www.odino.org/coding-bureaucracy</id>
    <content type="html"><![CDATA[<p>An interesting quote from an ex-Microsoft:
it can take up to <strong>several months</strong>
before you get an approval over a
technical issue.</p>

<!-- more -->




<blockquote><p>In my short time at Microsoft, any project that desired to use an open source library, such as jQuery, would require approval from the organization&#8217;s legal team. There were of course political strategies to speed up the process, but it could take as long as six months just to gain approval to use the code in a project. The implicit alternative to this draconian dilemma, naturally, is write substitute code for the OSS that perpetually seems out of reach.</p><footer><strong>Matt J. Sorenson</strong> <cite><a href='http://www.quora.com/Software-Engineering/How-long-does-it-take-a-large-tech-company-to-push-a-single-line-of-code-to-production'>How Long Does It Take a Large Tech Company to Push a Single Line of Code to Production</a></cite></footer></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OrientDB ODM beta 5: repositories, compatibility with 1.2.0 and more stability]]></title>
    <link href="http://www.odino.org/orientdb-odm-beta-5-repositories-compatibility-with-1-dot-2-0-and-more-stability/"/>
    <updated>2012-11-23T09:10:00+04:00</updated>
    <id>http://www.odino.org/orientdb-odm-beta-5-repositories-compatibility-with-1-dot-2-0-and-more-stability</id>
    <content type="html"><![CDATA[<p>It has almost been a baby&#8217;s delivery, but we eventually made it:
the PHP <a href="http://css.dzone.com/articles/era-object-document-mapping">ODM</a> for <a href="http://code.google.com/p/orient/">OrientDB</a> has finally reached its <strong>5th beta</strong>.</p>

<!-- more -->


<p>Thanks to the huge effort of <a href="http://davidfunaro.com">David Funaro</a> and the push from <a href="https://twitter.com/Ocramius">Marco Pivetta</a> we
have just released the <code>beta-5</code> version of this library, which lets
you work with the infamous GraphDB in PHP: there is a plethora of
changes and some news about the future of the library, so I&#8217;ll try
to recap a bit what we&#8217;ve done so far in almost <strong>one year</strong> of
active development.</p>

<h2>Composer</h2>

<p>The entire library (query builder, HTTP binding and ODM) is now
<em>composerified</em> (have a look at the <a href="https://github.com/congow/Orient/blob/beta-5/composer.json#L24">dependencies</a>):
this was an important step since we wanted to completely get
rid of git submodules and embrace this new and - sorry PEAR -
finally decent packaging system for PHP.</p>

<h2>Symfony2: gimme MOAR</h2>

<p>We hate the <a href="http://en.wikipedia.org/wiki/Not_invented_here">NIH approach</a>, so whenever there is a library which is tested, decoupled
and does what we need, we tend to use it instead of rewriting from scratch some new
userland code.</p>

<p>This has been the case for our filesystem classes, that - as they were first very simple
but tended to grow - have now been replaced with the <a href="http://symfony.com/doc/2.0/components/finder.html">Symfony2 finder</a>.</p>

<p>At the same time we also added the <a href="http://symfony.com/doc/2.0/components/class_loader.html">ClassLoader component</a>, which replaces
our old <a href="https://github.com/congow/Orient/blob/beta-5/test/PHPUnit/bootstrap.php">PSR-0 compatible basic autoloader</a>.</p>

<h2>Compatibility with the stable OrientDB 1.2.0</h2>

<p>OrientDB is stable <a href="http://www.h-online.com/open/news/item/NoSQL-Document-Graph-database-OrientDB-1-0-released-1576260.html">since months</a>,
we couldn&#8217;t release a version of our library without
upgrading the compatibility to OrientDB (we were still at version <code>1.0-rc6</code>):
we are now compatible with OrientDB <code>1.2.0</code>.</p>

<p>The move has been quite easy thanks to the test suite that we have
built so far, but we are still probably missing a few features
introduced in <code>1.1</code> and <code>1.2</code>: as soon as we will go on with the
library we will map what the OrientDB team has added to the DB -
for example, <a href="http://nuvolabase.blogspot.com/2012/09/orientdb-supports-functions.html">functions</a>.</p>

<h2>Fetchplans integrated in the Manager</h2>

<p><a href="http://code.google.com/p/orient/wiki/FetchingStrategies">Fetchplans</a> specify the way OrientDB should lazy-load records:
we have now <a href="https://github.com/congow/Orient/commit/57a5c33ebb02ba8c3d738c2abe1de1c27ba4e846">added support to them</a>,
meaning that if you dont want to lazy-load linked records (<code>*:-1</code>),
the ODM is able to read the entire result from OrientDB and
build linked records as PHP objects (or array of objects).</p>

<p>In the <a href="https://github.com/congow/Orient/commit/57a5c33ebb02ba8c3d738c2abe1de1c27ba4e846#L12L74">example</a>,
you see that <code>$post-&gt;comments</code>:</p>

<ul>
<li>is an array (which eventually contains objects)</li>
<li>is not a <code>Proxy\Collection</code>, which would mean it&#8217;s a collection of lazy-loaded records</li>
</ul>


<p>by just using the correct fetchplan:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$post</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">manager</span><span class="o">-&gt;</span><span class="na">find</span><span class="p">(</span><span class="s1">&#39;27:0&#39;</span><span class="p">,</span> <span class="s1">&#39;*:-1&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$post</span><span class="o">-&gt;</span><span class="na">getComments</span><span class="p">();</span> <span class="c1">// an array of objects, no lazy-loading</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Repositories</h2>

<p>We implemented the <a href="https://github.com/congow/Orient/blob/beta-5/src/Congow/Orient/ODM/Repository.php">repository pattern</a> - as
Doctrine 2 does: you are now able to access
virtual collections and retrieve records
through them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Congow\Orient\ODM\Manager</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$manager</span>    <span class="o">=</span> <span class="k">new</span> <span class="nx">Manager</span><span class="p">(</span><span class="o">...</span><span class="p">);</span>
</span><span class='line'><span class="nv">$repository</span> <span class="o">=</span> <span class="nv">$manager</span><span class="o">-&gt;</span><span class="na">getRepository</span><span class="p">(</span><span class="s1">&#39;Users&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$user</span> <span class="o">=</span> <span class="nv">$repository</span><span class="o">-&gt;</span><span class="na">find</span><span class="p">(</span><span class="nv">$id</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Doctrine persistence</h2>

<p>Since one of our aims is to be as compatible
as possible with Doctrine&#8217;s ODMs, we integrated
the <a href="https://github.com/congow/Orient/issues/71"><em>Persistence</em> interfaces from Doctrine 2</a>:
most of the methods are not implemented yet (<code>throw new Exception()</code>),
as actual persistence should come in <code>beta-6</code>/<code>rc-1</code>, but
the good news is that when retrieving objects from the DB
you can still use the same APIs that the Doctrine ODMs
provide you.</p>

<h2>Integration tests</h2>

<p>This release was mainly delayed because of
integration tests<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>: we promised a fully-tested
hydration mechanisms (converting DB records in
POPOs) for <code>beta-5</code> and this has been, slowly,
accomplished.</p>

<p><a href="https://github.com/congow/Orient/commit/37cfe0fdad7f0caba2b22cfdce1006ddacfc63e7">Repositories</a>,
<a href="https://github.com/congow/Orient/commit/b3706dfb3470eb27e12c4944e398a5d911fe2598">hydration</a>
and <a href="https://github.com/congow/Orient/issues/68">data types</a>
are now covered by integration tests.</p>

<h2>Refactoring proxies</h2>

<p>The way we <a href="https://github.com/nrk/Orient/commit/0bed0196f83c6048b971accbe2d80f3a8c81c31b">generate proxies</a> is one of the
most interesting parts of the library:
with this release we changed the way we
do it in order to provide
a <strong>more flexible and straightforward
mechanism for doing lazy-loading</strong>.</p>

<p>Usually when you retrieve a record in OrientDB
you won&#8217;t have related records:</p>

<figure class='code'><figcaption><span>SELECT FROM Address LIMIT 1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;result&quot;</span>: <span class="o">[{</span>
</span><span class='line'>      <span class="s2">&quot;@type&quot;</span>: <span class="s2">&quot;d&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;@rid&quot;</span>: <span class="s2">&quot;#19:0&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;@version&quot;</span>: 6,
</span><span class='line'>      <span class="s2">&quot;@class&quot;</span>: <span class="s2">&quot;Address&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;type&quot;</span>: <span class="s2">&quot;Residence&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;street&quot;</span>: <span class="s2">&quot;Piazza Navona, 1&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;city&quot;</span>: <span class="s2">&quot;#21:0&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;nick&quot;</span>: <span class="s2">&quot;Luca2&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>as you see, by default OrientDB doesn&#8217;t
retrieve the related record (<code>city</code>), but
provides a <em>pointer</em> to that record (the <code>RID</code>).</p>

<p>When you retrieve a record via the <code>Manager</code> class,
the ODM doesn&#8217;t return you a <a href="https://github.com/congow/Orient/blob/beta-5/test/Integration/Document/Address.php">POPO</a>, but a <a href="https://github.com/congow/Orient/blob/beta-5/test/proxies/Congow/Orient/Proxy/test/Integration/Document/Address.php">proxy class
that overrides the POPO</a>, allowing lazy-loading.</p>

<p>Proxy classes, basically, just call parent methods,
and if the parent method has something to return:</p>

<ul>
<li>if the <em>returnable</em> is a string, an array, etc <strong>or a POPO</strong>, they return it</li>
<li>if the returnable is an <code>AbstractProxy</code> object,
it means that there is a record/collection of records
that have to be loaded from OrientDB with an extra-query</li>
</ul>


<figure class='code'><figcaption><span>Code example to understand lazy-loading</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># A proxy class is returned</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Congow\Orient\Proxy\test\Integration\Document</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Address</span> <span class="k">extends</span> <span class="nx">\test\Integration\Document\Address</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">function</span> <span class="nf">getCity</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$parent</span> <span class="o">=</span> <span class="k">parent</span><span class="o">::</span><span class="na">getCity</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">is_null</span><span class="p">(</span><span class="nv">$parent</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nv">$parent</span> <span class="nx">instanceOf</span> <span class="nx">\Congow\Orient\ODM\Proxy\AbstractProxy</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nv">$parent</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="nv">$parent</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">setCity</span><span class="p">(</span><span class="nv">$city</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$parent</span> <span class="o">=</span> <span class="k">parent</span><span class="o">::</span><span class="na">setCity</span><span class="p">(</span><span class="nv">$city</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">is_null</span><span class="p">(</span><span class="nv">$parent</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nv">$parent</span> <span class="nx">instanceOf</span> <span class="nx">\Congow\Orient\ODM\Proxy\AbstractProxy</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nv">$parent</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="nv">$parent</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># When calling $address-&gt;getCity(), we will actually</span>
</span><span class='line'><span class="c1"># call the __invoke() method of a Proxy object</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Congow\Orient\ODM</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Congow\Orient\ODM\Mapper</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Congow\Orient\ODM\Proxy\AbstractProxy</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Proxy</span> <span class="k">extends</span> <span class="nx">AbstractProxy</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$manager</span><span class="p">;</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$rid</span><span class="p">;</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$record</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Istantiates a new Proxy.</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param Mapper $manager</span>
</span><span class='line'><span class="sd">     * @param string $rid</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">Manager</span> <span class="nv">$manager</span><span class="p">,</span> <span class="nv">$rid</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">manager</span> <span class="o">=</span> <span class="nv">$manager</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">rid</span> <span class="o">=</span> <span class="nv">$rid</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Returns the record loaded with the Mapper.</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return object</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__invoke</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">record</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">record</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getManager</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">find</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getRid</span><span class="p">());</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">record</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you see, calling the <code>__invoke()</code> method
of a proxied object will make the manager do
an extra-query to retrieve the lazy-loaded record.</p>

<h2>Support of sessions in the HTTP client</h2>

<p><a href="https://github.com/nrk">Daniele Alessandri</a> took his time to add <a href="https://github.com/congow/Orient/pull/118">native support for cookies</a> in the
HTTP client which is used in the native HTTP binding: thanks
to this we can decide whether to re-use an existing session
while querying the DB.</p>

<h2>Simplified requirements</h2>

<p>We have now removed <a href="https://github.com/nrk/Orient/commit/bc8f94e7c07147aec1c0c4ed852b7b9d02f4a96c">APC as a requirement</a> for the library: since it
was an easy fix we thought it makes sense not to force everyone to have
APC installed everywhere<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>.</p>

<h2>Contributions</h2>

<p>I&#8217;ve been pretty busy over the last months, but
the efforts of the already-mentioned Daniele and
David have been <a href="https://github.com/congow/Orient/graphs/contributors?from=2012-03-31&amp;to=2012-11-18&amp;type=c">huge</a>
to release <code>beta-5</code>: I virtually clap my hands
for them, as they are the main reason behind all
of this progress.</p>

<h2>Tests and CI</h2>

<p>As always, green tests: the build is handled by
Travis-CI. Also that one <a href="https://secure.travis-ci.org/#!/congow/Orient">is green</a>.</p>

<h2>Doctrine and beta-6</h2>

<p>David is already working on refactoring the
namespaces to ask the Doctrine team to
integrate the library into their organization:
as agreed months ago, there shouldn&#8217;t be a big
problem in doing so.</p>

<p>As this will be <strong>the first ODM for a GraphDB</strong>,
everyone is pretty excited about it:</p>

<ul>
<li>we will get more support and contributions for the library itself</li>
<li>it&#8217;s the first GraphDB that goes into Doctrine and the PHP world - I mean, <strong>properly</strong></li>
</ul>


<p>After that, we will face the <a href="https://github.com/congow/Orient/issues?milestone=4&amp;page=1&amp;state=open">biggest challenges</a> so far:</p>

<ul>
<li>decoupling ODM, HTTP binding and Query Builder into 3 separate libraries/repositories</li>
<li>refactor a big portion of the codebase according to the feedbacks from the Doctrine community</li>
<li>implement persistence (from POPOs to DB)</li>
</ul>


<p>I&#8217;m pretty sure the next months will be
productive, intense and full of changes, but
I&#8217;d realy like to suggest you one thing before
leaving you: <strong>use this library</strong>.</p>

<p>Even though the ODM is not finished yet, <strong>HTTP binding
and Query Builder are already at a stable stage</strong>:
the first one is <strong>already faster</strong> than the <a href="https://github.com/AntonTerekhov/OrientDB-PHP">binary-protocol implementation</a>,
while the second one is a very convenient library to
help you <strong>saving a lot of time</strong> when writing OrientDB&#8217;s
SQL+.</p>

<p>Again, their level of maturity is pretty high, and we
accept and review bugs/feature requests pretty fastly.</p>

<p>So, what? Now, there are <strong>no more excuses</strong>.</p>

<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>We have a test suite that runs &#8220;on paper&#8221;, meaning that those are tests running based on the OrientDB documentation. Integration tests are done, instead, with a real OrientDB instance <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>It is used to provide a basic caching layer for annotations <a href='#fnref:2' rev='footnote'>↩</a></li>
    </ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mixing the history of HTTP, SPDY and HTTP/2.0]]></title>
    <link href="http://www.odino.org/mixing-the-history-of-http-spdy-and-http-slash-2-dot-0/"/>
    <updated>2012-10-16T15:11:00+04:00</updated>
    <id>http://www.odino.org/mixing-the-history-of-http-spdy-and-http-slash-2-dot-0</id>
    <content type="html"><![CDATA[<p>Yesterday, from Doha&#8217;s international airport, I
got the chance to blog about the latest changes
surrounding the upcoming major version of the
protocol of the web, <code>HTTP/2.0</code>.</p>

<p>Today I gave, at the International PHPConference in
Mainz, an overview about HTTP (<code>0.9</code>, <code>1.0</code>, <code>1.1</code>), SPDY
and <code>HTTP/2.0</code> itself.</p>

<!-- more -->


<p>There&#8217;s not that much to say, as the presentation is already
on <a href="http://www.slideshare.net/odino/http-colon-slash-slash-the-end-of-the-road">Slideshare</a> and I&#8217;m embedding it here, other than a thing
the guys here in Germany already heard a lot: <strong>go back to
the basics</strong>.</p>

<div class="slideshare" id="__ss_14749994"><iframe src="http://www.slideshare.net/slideshow/embed_code/14749994 " width="850" height="730" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The state of HTTP/2.0]]></title>
    <link href="http://www.odino.org/the-state-of-http-slash-2-dot-0/"/>
    <updated>2012-10-15T23:45:00+04:00</updated>
    <id>http://www.odino.org/the-state-of-http-slash-2-dot-0</id>
    <content type="html"><![CDATA[<p>With a few days of delay I&#8217;m here reporting and commenting
the last <strong>revolutions</strong> about the protocol of the web,
its upcoming groundbreaking new version and its state.</p>

<!-- more -->


<p>A few days back <a href="http://www.mnot.net/">Mark Nottingham</a> announced that the
group is <a href="https://twitter.com/mnot/status/253175410383278081">officially working on the new draft of <code>HTTP/2.0</code></a>:
even though rumors about the shape of this new version were
going on since a couple years, this <strong>official</strong>
news brings some fresh hope on the topic.</p>

<p>As the HTTP protocol was always directly influenced
by great minds (<a href="http://en.wikipedia.org/wiki/Tim_Berners-Lee">Tim Berners-Lee</a> and <a href="http://en.wikipedia.org/wiki/Roy_Fielding">Roy Fielding</a>, just
to mention a couple names) when I first heard about
Mark taking the responsability to publish <code>HTTP/2.0</code> I
was pretty sure something great would have come out of
his mind.</p>

<p>I wasn&#8217;t wrong.</p>

<p>It&#8217;s been 13 years since HTTP doesnt see a major change
in its specification (recent changes are the addition of
the <code>PATCH</code> method, for example, but we&#8217;re talking about
<strong>minor</strong> stuff) and SPDY - a new protocol created by Google -
came out in the recent history of the web with a disruptive
force.</p>

<p>HTTP needed something.</p>

<h2>SPDY</h2>

<p>But before having a look at what <code>HTTP/2.0</code> will look like,
let&#8217;s mention the good things that SPDY brings on the table:</p>

<ul>
<li>prioritization: it allows to send different requests and
tell the server to prioritize some of them</li>
<li>multiplexing: allows parallel requests and asynchronous
responses, unlike <em>pipelining</em> which is bound to multiple
requests/responses at the same time</li>
<li>server push: servers can now push resources to the client
without them having to ask for</li>
<li>better performances: extended compression is one of the
key FTW of SPDY</li>
</ul>


<p>But there is one things that SPDY doesn&#8217;t change at all:
the <strong>interface</strong> between the machines.</p>

<p>As recognized worldwide, the HTTP protocol was an almost
perfect example of M2M interface which allows servers
and clients to follow DAPs (<em>domain-application protocols</em>)
according to a loosely coupled interface - the protocol itself,
with its verbs, semantics and workflows<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.</p>

<p>So SPDY, recognizing the perfection of the contract that HTTP
puts among clients and servers, isn&#8217;t a real new protocol, it&#8217;s
a <strong>better implementation of the same interface</strong>.</p>

<h2>HTTP/2.0 is an evolution of an evolution</h2>

<p>No wonder, then, in reading the words of Nottingham, as, after
all, he &#8220;just&#8221; announced that <a href="http://lists.w3.org/Archives/Public/ietf-http-wg/2012OctDec/0004.html"><code>HTTP/2.0</code> will be <strong>based on SPDY</strong></a>:
a great news that is basically telling you the &#8220;don&#8217;t reinvent the wheel&#8221;
principle is even applied at the foundation of the web<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>.</p>

<p>The layers will definitely be different, but, again, I think
that having a newer version of our beloved protocol, based on a
specification which already improves it and adds tons of new and
interesting features, is going to be <strong>a game-changer for web
applications</strong>.</p>

<p>Will we see <code>HTTP/2.0</code> being deployed with multiplexing, server push,
prioritization and extended compression next year?</p>

<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>No wonder why Roy Fielding, after having heavily influenced the HTTP protocol and the Apache ecosystem, came out with REST, an architectural style meant for long-living and scalable architectures <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>So, think about it, why do you need to re-write huge portions of code when better FOSS is out there? <a href='#fnref:2' rev='footnote'>↩</a></li>
    </ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ready for europe, IPC and pizzas]]></title>
    <link href="http://www.odino.org/ready-for-europe-ipc-and-pizzas/"/>
    <updated>2012-10-14T21:21:00+04:00</updated>
    <id>http://www.odino.org/ready-for-europe-ipc-and-pizzas</id>
    <content type="html"><![CDATA[<p>In 24 hourse I&#8217;ll be on a plane which is gonna bring
me in Frankfurt, to then join the <a href="http://phpconference.com/">International PHP Conference</a>
in Mainz.</p>

<!-- more -->


<p><img class="right" src="http://www.odino.org/images/ipc-slide.png"></p>

<p>I&#8217;m pretty excited since this will be my first visit
to the old continent since I moved to Dubai - almost 7 months ago -
and I&#8217;m glad I&#8217;ll do that for IPC, with a brief <em>pit-stop</em> in Italy -
unfortunately not in Rome.</p>

<p>At IPC I will talk about REST, with an - I hope -
interesting introduction about this architectural style, anti-patterns
and a few tips on how to implement REST&#8217;s constraints in our
architectures.</p>

<p>I will also have another chance to talk, and I&#8217;m <strong>seriously</strong>
excited about it, since, for the first time, I get the chance to
talk about the foundation of our lives in the modern era (<em>homo internectus</em>),
the <strong>HTTP protocol</strong>: I will talk a little bit about why we needed it,
with some historical notion about the web&#8217;s foundation, what SPDY
brings on the table and the recent <strong>revolutions</strong> around <code>HTTP/2.0</code>.</p>

<p>On the 17th evening I will catch a flight for Venice (via Wien) and then
I&#8217;ll spend some time with the rest of the family, good thing if you also
consider that for the first time in 4 years they&#8217;re gonna see me for my birthday.</p>

<p><img class="left" src="http://www.odino.org/images/ale_idiot.jpeg"></p>

<p>But Italy doesn&#8217;t mean that I&#8217;m going to relax <strong>at all</strong>, as I will
finally meet all the guys from the <a href="http://friuli.grusp.org/">PHP User Group Friuli</a>,
the 2nd PHP user group in Italy (considering numbers and history), that
I personally founded along with <a href="http://www.mvassociati.it/it/il-team">Steve&amp;Stefano</a> and <a href="http://it.linkedin.com/in/dlondero">Daniel</a> in front of a pizza,
but never got to join during their
monthly meetings, as I was already based in Rome at that time.</p>

<p>There is no plan about that meeting, as the topic will be &#8221;<em>Alessandro Nadalin in tour</em>&#8221;:
if you are a developer, a technology enthusiast or simply a student come
and join us in Codroipo, as I will also talk about abroad work experiences as well
as scout and recruit for some companies (yes, not only <strong>my</strong> company).</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[So yes, I'm writing a book]]></title>
    <link href="http://www.odino.org/so-yes-im-writing-a-book/"/>
    <updated>2012-09-21T08:00:00+04:00</updated>
    <id>http://www.odino.org/so-yes-im-writing-a-book</id>
    <content type="html"><![CDATA[<p>As announced on twitter a few days back, it seems
that the time has come for me to step up and start
dealing with printed paper.</p>

<!-- more -->


<p>It&#8217;s not something I&#8217;ve never talked about,
and especially in the last 9 months I wanted
to start something towards this direction -
my draft of
<a href="https://leanpub.com/rest-webservices-php">REST webservices in PHP</a>
is still there ideed.</p>

<p><img class="right" src="http://www.odino.org/images/garulli-nadalin.jpeg"></p>

<p>At the same time, even though self-publishing
is easier and provides good motivation at first,
<strong>is not very attractive on the long run</strong>,
for both the author and the reader: yes, you
get to reach a wide audience, yes, they can
learn in a really cheap way<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>,
but writing a <strong>real</strong> book is way different.
It&#8217;s a statement, a printed statement: it is
<strong>just different</strong>.</p>

<p>The chance has come quite quickly, as I will be
<strong>co-author</strong> of a book by
<a href="http://www.manning.com/">Manning Publications Co.</a>,
which is a very important editor when it comes to
the language with the J.</p>

<p>Isn&#8217;t it strange? I am a seasoned lead developer
on the LAMP stack but I will write a book dealing with a tool
that has something to do with Java: there a reason,
of course, behind this.</p>

<p>And probably you have already guessed it.</p>

<p><span class='pullquote-right' data-pullquote='OrientDB is not just a NoSQL graphDB, it is a brand new way to think about storage engines'>
Long story short, <a href="http://www.linkedin.com/in/garulli">Luca Garulli</a><sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>,
the brilliant mind who gave
OrientDB, a sensational document-graph database, to the world, needed
some more fat fingers helping him for the first ever
book on the topic, and being directly connected to Luca
- as he used to work with my previous CTO,
<a href="http://www.linkedin.com/in/alexlombardi">Alex</a>, we
both attended the 2011 NoSQL Day and we&#8217;ve spent
some time together when I was living in Rome -
made us decide to try to make it together: I feel we
are a perfect match, given my <em>youngsta</em> passion and his
endless commitment to his baby.</p>

<p>Fact is that OrientDB is not just a NoSQL graphDB, it is a brand new way to think about storage engines in 2012 , when we already proved that relational databases won&#8217;t fit all the scenarios out there,
that <a href="http://couchdb.apache.org/">document DBs over HTTP</a>
aren&#8217;t a long-term solution and that we live in a world
where <strong>linked data is a first class citizen in our lives</strong>,
not just somewhere in the internets.
</span></p>

<p>Our challenge is to evangelize this new frontier for
data storage: I&#8217;m sure it will be a long but succesfull
way.</p>

<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>Usually cheap: some books on LeanPub were even sold for 50 USD <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>I could write a separate chapter on Luca. Let&#8217;s just say that meeting him gave me the confidence that even without a college degree you can be a game-changer in your field. <a href='#fnref:2' rev='footnote'>↩</a></li>
    </ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Optimizing loading times with images' lazy loading]]></title>
    <link href="http://www.odino.org/optimizing-loading-times-with-images-lazy-loading/"/>
    <updated>2012-09-21T07:45:00+04:00</updated>
    <id>http://www.odino.org/optimizing-loading-times-with-images-lazy-loading</id>
    <content type="html"><![CDATA[<p>Sometimes I like to forget that I&#8217;m
mainly involved in other things and
get my hands dirty with low-level
stuff: last week I wanted to improve
some existing lazy loading code we use
with JavaScript.</p>

<!-- more -->


<p>Let&#8217;s suppose that we have a page
showing almost 100 images, 500kb
per image, 5MB of a webpage.</p>

<p>It&#8217;s clearly unpractical to load
all the images at once, since you
would force the use to download
stuff that he would only see scrolling
down with the mouse, so the solution
would be to store all the images&#8217; path
in an HTML attribute and trigger the load
just for visible images in the current window.</p>

<p>You&#8217;d have an HTML like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>      ...
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>      ...
</span><span class='line'>
</span><span class='line'>      ...
</span><span class='line'>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;imgContainer&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;img</span> <span class="na">class=</span><span class="s">&quot;lazy-loading&quot;</span> <span class="na">id=</span><span class="s">&quot;http://example.com/img1.jpg&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;imgContainer&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;img</span> <span class="na">class=</span><span class="s">&quot;lazy-loading&quot;</span> <span class="na">id=</span><span class="s">&quot;http://example.com/img2.jpg&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;imgContainer&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;img</span> <span class="na">class=</span><span class="s">&quot;lazy-loading&quot;</span> <span class="na">id=</span><span class="s">&quot;http://example.com/img3.jpg&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;imgContainer&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;img</span> <span class="na">class=</span><span class="s">&quot;lazy-loading&quot;</span> <span class="na">id=</span><span class="s">&quot;http://example.com/img4.jpg&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;imgContainer&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;img</span> <span class="na">class=</span><span class="s">&quot;lazy-loading&quot;</span> <span class="na">id=</span><span class="s">&quot;http://example.com/img5.jpg&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;imgContainer&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;img</span> <span class="na">class=</span><span class="s">&quot;lazy-loading&quot;</span> <span class="na">id=</span><span class="s">&quot;http://example.com/img6.jpg&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      ...
</span><span class='line'>      ...
</span><span class='line'>      ...
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and the lazy laoding function looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">lazyLoading</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;img.lazy-loading&#39;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">distanceToTop</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">offset</span><span class="p">().</span><span class="nx">top</span><span class="p">;</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">scroll</span>        <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">scrollTop</span><span class="p">();</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">windowHeight</span>  <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">height</span><span class="p">();</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">isVisible</span>     <span class="o">=</span> <span class="nx">distanceToTop</span> <span class="o">-</span> <span class="nx">scroll</span> <span class="o">&lt;</span> <span class="nx">windowHeight</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">isVisible</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;src&#39;</span><span class="p">,</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you see, we only trigger lazy loading for <strong>visible</strong>
items, which are appearing in the current window:
given the <code>windowHeight</code>, we calculate visibility
based on the difference between the item and
the mouse scroll, so that we can see whether the
product is comprehended in the current window
or not.</p>

<p>To trigger lazy loading you need to listen for
mouse scroll events <strong>and</strong> <code>domready</code> ( if some
images would be visible without scrolling ):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">lazyLoading</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">scroll</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">lazyLoading</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We, at <a href="http://www.namshi.com/">Namshi</a>, use the same approach for
<a href="http://www.namshi.com/women-shoes/">catalog listing pages</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell aliases for Octopress]]></title>
    <link href="http://www.odino.org/bash-aliases-for-octopress/"/>
    <updated>2012-08-24T11:02:00+04:00</updated>
    <id>http://www.odino.org/bash-aliases-for-octopress</id>
    <content type="html"><![CDATA[<p>A few days ago I moved to <a href="http://en.wikipedia.org/wiki/Z_shell">ZSH</a>
from bash, since my friend David was pushing me to try it:
after a few days I really have to say
that there is no reason not to switch
- mainly for the git integration and
double-tab behaviour - and I also
created a few <em>aliases</em> that work like
a charm in Octopress.</p>

<!-- more -->


<p>The majority of them would also work in
bash, but I remember I had to make
<a href="https://github.com/imathis/octopress/issues/117">some changes</a>
to make Octopress work with ZSH, so
you may want to have a look at that discussion first.</p>

<p>Bare in mind that all of this aliases need to be put in
the <code>~/.zshrc</code> file.</p>

<h2>octopreview</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">octopreview</span><span class="o">=</span><span class="s1">&#39;rake preview&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Starts Octopress&#8217; preview mode:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/Sites/odino.github.com <span class="o">(</span><span class="nb">source</span> ✘<span class="o">)</span>✹✭ ᐅ octopreview
</span><span class='line'>
</span><span class='line'>Starting to watch <span class="nb">source </span>with Jekyll and Compass. Starting Rack on port 4000
</span></code></pre></td></tr></table></div></figure>


<h2>octopost</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>octopost <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  rake new_post <span class="o">&amp;&amp;</span> octopreview;
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This task let&#8217;s you create a new post and
automatically launches Octopress&#8217; preview mode:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/Sites/odino.github.com <span class="o">(</span><span class="nb">source</span> ✘<span class="o">)</span>✹ ᐅ octopost
</span><span class='line'>
</span><span class='line'>Enter a title <span class="k">for </span>your post: bash aliases <span class="k">for </span>octopress
</span><span class='line'>mkdir -p <span class="nb">source</span>/_posts
</span><span class='line'>Creating new post: <span class="nb">source</span>/_posts/2012-08-24-bash-aliases-for-octopress.markdown
</span><span class='line'>Starting to watch <span class="nb">source </span>with Jekyll and Compass. Starting Rack on port 4000
</span></code></pre></td></tr></table></div></figure>


<h2>octostat</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>octostat <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  rake list_posts;
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Based on this <a href="http://tonytonyjan.github.com/2012/05/02/list-all-posts-rake-task-for-octopress/">rake task</a>
that I <a href="https://github.com/odino/odino.github.com/blob/source/Rakefile#L388">slightly modified for ZSH</a>,
this lets you find out which posts are published/unpublished
in your blog:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/Sites/odino.github.com <span class="o">(</span><span class="nb">source</span> ✘<span class="o">)</span>✹✭ ᐅ octostat
</span><span class='line'>
</span><span class='line'><span class="o">(</span>pub|unpub<span class="o">)</span>: unpub
</span><span class='line'>2012-08-24-bash-aliases-for-octopress.markdown
</span></code></pre></td></tr></table></div></figure>


<h2>octosave</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>octosave <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        git add . <span class="o">&amp;&amp;</span> git commit -m <span class="s2">&quot;$@&quot;</span> <span class="o">&amp;&amp;</span> git push origin <span class="nb">source</span>;
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Saves all your local changes committing
and pushing everything on the remote <code>source</code>
branch:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/Sites/odino.github.com <span class="o">(</span><span class="nb">source</span> ✘<span class="o">)</span>✹✭ ᐅ octosave <span class="s2">&quot;partial article&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="nb">source </span>572b571<span class="o">]</span> partial article
</span><span class='line'> 62 files changed, 159 insertions<span class="o">(</span>+<span class="o">)</span>, 61 deletions<span class="o">(</span>-<span class="o">)</span>
</span><span class='line'> create mode 100644 <span class="nb">source</span>/_posts/2012-08-24-bash-aliases-for-octopress.markdown
</span><span class='line'>Counting objects: 255, <span class="k">done</span>.
</span><span class='line'>Delta compression using up to 4 threads.
</span><span class='line'>Compressing objects: 100% <span class="o">(</span>129/129<span class="o">)</span>, <span class="k">done</span>.
</span><span class='line'>Writing objects: 100% <span class="o">(</span>129/129<span class="o">)</span>, 12.45 KiB, <span class="k">done</span>.
</span><span class='line'>Total 129 <span class="o">(</span>delta 64<span class="o">)</span>, reused 0 <span class="o">(</span>delta 0<span class="o">)</span>
</span><span class='line'>To git@github.com:odino/odino.github.com.git
</span><span class='line'>   35d5d41..572b571  <span class="nb">source</span> -&gt; <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<h2>octodeploy</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>octodeploy <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        git add . <span class="o">&amp;&amp;</span> git commit -m <span class="s2">&quot;$@&quot;</span> <span class="o">&amp;&amp;</span> git push origin <span class="nb">source</span> <span class="o">&amp;&amp;</span> rake generate <span class="o">&amp;&amp;</span> rake deploy
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Same as <code>octosave</code>, but - additionally - it deploys
all of your changes via <code>rake deploy</code>.</p>

<p>This task is useful when you&#8217;re locally done and
want to publish your changes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/Sites/odino.github.com <span class="o">(</span><span class="nb">source</span> ✔<span class="o">)</span> ᐅ octodeploy <span class="s2">&quot;publishing changes&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="nb">source </span>43e08b3<span class="o">]</span> publishing changes
</span><span class='line'> 1 files changed, 27 insertions<span class="o">(</span>+<span class="o">)</span>, 1 deletions<span class="o">(</span>-<span class="o">)</span>
</span><span class='line'>Counting objects: 9, <span class="k">done</span>.
</span><span class='line'>Delta compression using up to 4 threads.
</span><span class='line'>Compressing objects: 100% <span class="o">(</span>5/5<span class="o">)</span>, <span class="k">done</span>.
</span><span class='line'>Writing objects: 100% <span class="o">(</span>5/5<span class="o">)</span>, 848 bytes, <span class="k">done</span>.
</span><span class='line'>Total 5 <span class="o">(</span>delta 4<span class="o">)</span>, reused 0 <span class="o">(</span>delta 0<span class="o">)</span>
</span><span class='line'>To git@github.com:odino/odino.github.com.git
</span><span class='line'>   572b571..43e08b3  <span class="nb">source</span> -&gt; <span class="nb">source</span>
</span><span class='line'><span class="c">## Generating Site with Jekyll</span>
</span><span class='line'>unchanged sass/screen.scss
</span><span class='line'>/Users/odino/.rvm/gems/ruby-1.9.3-p194/gems/maruku-0.6.0/lib/maruku/input/parse_doc.rb:22:in <span class="sb">`</span>&lt;top <span class="o">(</span>required<span class="o">)</span>&gt;<span class="s1">&#39;: iconv will be deprecated in the future, use String#encode instead.</span>
</span><span class='line'><span class="s1">Configuration from /Users/odino/Sites/odino.github.com/_config.yml</span>
</span><span class='line'><span class="s1">Building site: source -&gt; public</span>
</span><span class='line'><span class="s1">AliasGenerator loading...</span>
</span><span class='line'><span class="s1">Processing 120 post(s) for aliases...</span>
</span><span class='line'><span class="s1">Processing 18 page(s) for aliases...</span>
</span><span class='line'><span class="s1">Successfully generated site: source -&gt; public</span>
</span><span class='line'><span class="s1">## Found posts in preview mode, regenerating files ...</span>
</span><span class='line'><span class="s1">## Generating Site with Jekyll</span>
</span><span class='line'><span class="s1">unchanged sass/screen.scss</span>
</span><span class='line'><span class="s1">/Users/odino/.rvm/gems/ruby-1.9.3-p194/gems/maruku-0.6.0/lib/maruku/input/parse_doc.rb:22:in `&lt;top (required)&gt;&#39;</span>: iconv will be deprecated in the future, use String#encode instead.
</span><span class='line'>Configuration from /Users/odino/Sites/odino.github.com/_config.yml
</span><span class='line'>Building site: <span class="nb">source</span> -&gt; public
</span><span class='line'>AliasGenerator loading...
</span><span class='line'>Processing 120 post<span class="o">(</span>s<span class="o">)</span> <span class="k">for </span>aliases...
</span><span class='line'>Processing 18 page<span class="o">(</span>s<span class="o">)</span> <span class="k">for </span>aliases...
</span><span class='line'>Successfully generated site: <span class="nb">source</span> -&gt; public
</span><span class='line'><span class="c">## Deploying branch to Github Pages </span>
</span><span class='line'>
</span><span class='line'><span class="c">## copying public to _deploy</span>
</span><span class='line'>cp -r public/. _deploy
</span><span class='line'><span class="nb">cd </span>_deploy
</span><span class='line'>
</span><span class='line'><span class="c">## Commiting: Site updated at 2012-08-24 07:22:23 UTC</span>
</span><span class='line'><span class="o">[</span>master 3151733<span class="o">]</span> Site updated at 2012-08-24 07:22:23 UTC
</span><span class='line'> 70 files changed, 70 insertions<span class="o">(</span>+<span class="o">)</span>, 70 deletions<span class="o">(</span>-<span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">## Pushing generated _deploy website</span>
</span><span class='line'>Counting objects: 284, <span class="k">done</span>.
</span><span class='line'>Delta compression using up to 4 threads.
</span><span class='line'>Compressing objects: 100% <span class="o">(</span>143/143<span class="o">)</span>, <span class="k">done</span>.
</span><span class='line'>Writing objects: 100% <span class="o">(</span>143/143<span class="o">)</span>, 12.25 KiB, <span class="k">done</span>.
</span><span class='line'>Total 143 <span class="o">(</span>delta 70<span class="o">)</span>, reused 0 <span class="o">(</span>delta 0<span class="o">)</span>
</span><span class='line'>To git@github.com:odino/odino.github.com.git
</span><span class='line'>   78287e6..3151733  master -&gt; master
</span><span class='line'>
</span><span class='line'><span class="c">## Github Pages deploy complete</span>
</span><span class='line'><span class="nb">cd</span> -
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Human-readable user agents for JavaScript error reporting]]></title>
    <link href="http://www.odino.org/human-readable-user-agents-for-javascript-error-reporting/"/>
    <updated>2012-08-22T09:40:00+04:00</updated>
    <id>http://www.odino.org/human-readable-user-agents-for-javascript-error-reporting</id>
    <content type="html"><![CDATA[<p>Some time ago I published a few posts
on logging, one on how to <a href="http://www.odino.org/logging-javascript-errors/">report JavaScript errors</a> and another one
which illustrates how to <a href="http://www.odino.org/using-monolog-for-php-error-reporting-on-new-relic/">log on New Relic with Monolog</a>.</p>

<p>In this post I&#8217;d like to go even
further with JavaScript error logging
and tell you how we - at <a href="http://namshi.com">Namshi</a> -
are trying to ease frontend debugging
across multiple browsers.</p>

<!-- more -->


<h2>User agents, the gotchas</h2>

<p>With JavaScript, it&#8217;s pretty easy to detect
the user agent from a client ( you just need
to access <code>navigator.userAgent</code>), the problem
is that user agents are one of the most incredible
<em>gotchas</em> in web development.</p>

<p>For example, how would you guess that</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Mozilla/5.0
</span><span class='line'>(Windows; U; Windows NT 6.1; WOW64; en-US; rv:2.0.4)
</span><span class='line'>Gecko/20120718 AskTbAVR-IDW/3.12.5.17700 Firefox/14.0.1</span></code></pre></td></tr></table></div></figure>


<p>represents Firefox 14 on Windows 7?</p>

<p>Let me tell you, <strong>you wouldn&#8217;t</strong>, that&#8217;s why
you should convert user agents in a human-readable
format for the people who are going to debug
the frontend.</p>

<h2>Converting user agents with remote calls</h2>

<p>Luckily, <a href="http://www.useragentstring.com/">UserAgentString</a> is a service which allows
you to query them whenever you need to retrieve useful
and <strong>meaningful</strong> informations from a user agent string;
combined with <a href="http://guzzlephp.org/">Guzzle</a>, you can directly have meaningful
JavaScript errors&#8217; reports with a few lines of code.</p>

<p>For example, this is a simple class which retrieves the informations from
the service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Vendor\Service</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Guzzle\Http\ClientInterface</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">UserAgentConverter</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">const</span> <span class="no">URL_USERAGENT_API</span> <span class="o">=</span> <span class="s1">&#39;http://www.useragentstring.com/&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">const</span> <span class="no">BROWSER_INFO</span>      <span class="o">=</span> <span class="s1">&#39;%s %s on %s&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$client</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Instantiates the service and injects the HTTP client that will be used</span>
</span><span class='line'><span class="sd">     * to perform requests.</span>
</span><span class='line'><span class="sd">     * </span>
</span><span class='line'><span class="sd">     * @param ClientInterface $client </span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">ClientInterface</span> <span class="nv">$client</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">client</span> <span class="o">=</span> <span class="nv">$client</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Retrieves a human-readable string identifying the $userAgent for error</span>
</span><span class='line'><span class="sd">     * reporting (ie Internet Explorer 8 on Windows 7).</span>
</span><span class='line'><span class="sd">     * </span>
</span><span class='line'><span class="sd">     * @param string $userAgent</span>
</span><span class='line'><span class="sd">     * @return string|null</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">lookup</span><span class="p">(</span><span class="nv">$userAgent</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$request</span>  <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">client</span><span class="o">-&gt;</span><span class="na">post</span><span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="na">URL_USERAGENT_API</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="nb">sprintf</span><span class="p">(</span><span class="s1">&#39;uas=%s&amp;getJSON=all&#39;</span><span class="p">,</span> <span class="nv">$userAgent</span><span class="p">));</span>
</span><span class='line'>        <span class="nv">$response</span> <span class="o">=</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">send</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getStatusCode</span><span class="p">()</span> <span class="o">===</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getBody</span><span class="p">(</span><span class="k">true</span><span class="p">),</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and you can use it like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ua</span>         <span class="o">=</span> <span class="s1">&#39;Mozilla/5.0 (Windows; U; Windows NT 6.1; WOW64; en-US; rv:2.0.4) Gecko/20120718 AskTbAVR-IDW/3.12.5.17700 Firefox/14.0.1&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$uaService</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">Vendor\Service\UserAgentConverter</span><span class="p">(</span><span class="k">new</span> <span class="nx">Guzzle\Http\Client</span><span class="p">());</span>
</span><span class='line'><span class="nv">$userAgent</span>  <span class="o">=</span> <span class="nv">$uaService</span><span class="o">-&gt;</span><span class="na">lookup</span><span class="p">(</span><span class="nv">$ua</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$userAgent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// outputs &quot;Firefox 14.0.1 on Windows 7&quot;</span>
</span><span class='line'>  <span class="k">echo</span> <span class="nb">sprintf</span><span class="p">(</span>
</span><span class='line'>      <span class="s2">&quot;%s %d on %s&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nv">$userAgent</span><span class="p">[</span><span class="s1">&#39;agent_name&#39;</span><span class="p">],</span>
</span><span class='line'>      <span class="nv">$userAgent</span><span class="p">[</span><span class="s1">&#39;agent_version&#39;</span><span class="p">],</span>
</span><span class='line'>      <span class="nv">$userAgent</span><span class="p">[</span><span class="s1">&#39;os_name&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s pretty easy, even easier if you use the
<a href="http://www.odino.org/using-the-symfony2-dependency-injection-container-as-a-standalone-component/">dependency injection container of Symfony2</a>,
where you can just do the instantiation
in a config file:</p>

<figure class='code'><figcaption><span>container.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>services:
</span><span class='line'>  http.client:
</span><span class='line'>    class: <span class="s2">&quot;Guzzle\\Http\\Client&quot;</span>
</span><span class='line'>  useragent.converter:
</span><span class='line'>    class: <span class="s2">&quot;Vendor\\Service\\UserAgentConverter&quot;</span>
</span><span class='line'>    arguments:
</span><span class='line'>      client: @http.client
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>The one liner to get the user agent&#8217;s informations</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$container</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;useragent.converter&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">lookup</span><span class="p">(</span><span class="nv">$ua</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Caching</h2>

<p>At this point it becomes obvious that you should put
a <strong>caching layer</strong> in front of the <code>UserAgentConverter</code>
since you don&#8217;t want to always query a remote service
to retrieve informations that you already have:
something like Redis should perfectly do the job,
as a cache - in this scenario - is essential, needs
to be as fast as hell and you don&#8217;t need a SLA with it,
so if the Redis server is down you are gracefully
degradating: at the same time, Memcache can be a good candidate
to substitute Redis, but remember that you will
renounce to persistence, since you won&#8217;t be able to
store informations on the disk as you would
do with Redis.</p>

<p>The implementations is very trivial:</p>

<figure class='code'><figcaption><span>Adding a caching layer to our code</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ua</span>         <span class="o">=</span> <span class="s1">&#39;Mozilla/5.0 (Windows; U; Windows NT 6.1; WOW64; en-US; rv:2.0.4) Gecko/20120718 AskTbAVR-IDW/3.12.5.17700 Firefox/14.0.1&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$cache</span>      <span class="o">=</span> <span class="k">new</span> <span class="nx">CacheProvider</span><span class="p">();</span>
</span><span class='line'><span class="nv">$userAgent</span>  <span class="o">=</span> <span class="nv">$cache</span><span class="o">-&gt;</span><span class="na">lookup</span><span class="p">(</span><span class="nv">$ua</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$userAgent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$uaService</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">Vendor\Service\UserAgentConverter</span><span class="p">(</span><span class="k">new</span> <span class="nx">Guzzle\Http\Client</span><span class="p">());</span>
</span><span class='line'>  <span class="nv">$userAgent</span>  <span class="o">=</span> <span class="nv">$uaService</span><span class="o">-&gt;</span><span class="na">lookup</span><span class="p">(</span><span class="nv">$ua</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$userAgent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$cache</span><span class="o">-&gt;</span><span class="na">store</span><span class="p">(</span><span class="nv">$ua</span><span class="p">,</span> <span class="nv">$userAgent</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// outputs &quot;Firefox 14.0.1 on Windows 7&quot;</span>
</span><span class='line'>  <span class="k">echo</span> <span class="nb">sprintf</span><span class="p">(</span>
</span><span class='line'>      <span class="s2">&quot;%s %d on %s&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nv">$userAgent</span><span class="p">[</span><span class="s1">&#39;agent_name&#39;</span><span class="p">],</span>
</span><span class='line'>      <span class="nv">$userAgent</span><span class="p">[</span><span class="s1">&#39;agent_version&#39;</span><span class="p">],</span>
</span><span class='line'>      <span class="nv">$userAgent</span><span class="p">[</span><span class="s1">&#39;os_name&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ping: sendto: No buffer space available with DU DNSes]]></title>
    <link href="http://www.odino.org/ping-sendto-no-buffer-space-available-with-du-dnses/"/>
    <updated>2012-08-10T13:03:00+04:00</updated>
    <id>http://www.odino.org/ping-sendto-no-buffer-space-available-with-du-dnses</id>
    <content type="html"><![CDATA[<p>Today I faced I pretty weird issue, having
no internet connection since last night.</p>

<!-- more -->


<p>Chrome is telling me that the DNS lookup
fails, and since I know, here in UAE,
problems with <a href="http://www.du.ae/en/default?gclid=COC_7Jvd3LECFUp76wodgB0Apg">DU</a> DNSes are pretty frequent,
I thought I just needed to use different DNS
servers.</p>

<p>Unfortunately, openDNS wasnt solving my
issues, and when I tried with the infamous
Google Public DNS ( <code>8.8.8.8</code> and <code>8.8.4.4</code> )
without any good feedback, I thought it could be
something out of my jurisdiction :)</p>

<p>Pissed off, I tried to ping the DNS
servers manually:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ping 8.8.8.8
</span><span class='line'>PING 8.8.8.8 <span class="o">(</span>8.8.8.8<span class="o">)</span>: 56 data bytes
</span><span class='line'>ping: sendto: No buffer space available
</span><span class='line'>ping: sendto: No buffer space available
</span></code></pre></td></tr></table></div></figure>


<p>So now things are interesting: the <code>No buffer space available</code>
tells me that there is something seriously
weird going on today - never seen before.</p>

<p>With a quick search I&#8217;m able to fix the problem:
seems that I need to shutdown the interface
itself.</p>

<p>First, I needed to retrieve the interface used:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo route -n get 8.8.8.8
</span><span class='line'>
</span><span class='line'>   route to: 8.8.8.8
</span><span class='line'>destination: 8.8.8.8
</span><span class='line'>    gateway: 10.168.10.221
</span><span class='line'>  interface: tun0
</span><span class='line'>      flags: &lt;UP,GATEWAY,HOST,DONE,WASCLONED,IFSCOPE,IFREF&gt;
</span><span class='line'> recvpipe  sendpipe  ssthresh  rtt,msec    rttvar  hopcount      mtu     expire
</span><span class='line'>       0         0         0         0         0         0      1500         0
</span></code></pre></td></tr></table></div></figure>


<p>then it&#8217;s a simple matter of:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo ifconfig tun0 down
</span><span class='line'>sudo ifconfig tun0 up
</span></code></pre></td></tr></table></div></figure>


<p>DNS working as expected and the connection is back.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Source code workflow after 3 months of Github]]></title>
    <link href="http://www.odino.org/source-code-workflow-after-3-months-of-github/"/>
    <updated>2012-08-05T23:16:00+04:00</updated>
    <id>http://www.odino.org/source-code-workflow-after-3-months-of-github</id>
    <content type="html"><![CDATA[<p>When I joined <em>Rocket Internet</em> 4 months ago,
here in Dubai, the team was about to experience
the transition from the very old SVN to Git, with
everything hosted on <a href="https://github.com">Github</a>.</p>

<p>In this post I try to wrap-up the impressions
of the team and the changes in the lifecycle of
our source code with the adoption of the
Git+Github combo.</p>

<!-- more -->


<p><img class="right" src="http://www.odino.org/images/github.png"></p>

<h2>Premise</h2>

<p>We had our first meeting about the switch to Git
after our CTO migrated our repositories from
our hosted SVN repos to Github with
<a href="http://www.kernel.org/pub/software/scm/git/docs/git-svn.html">git-svn</a>.</p>

<p>In that meeting - useful for a lot of people who
never used Git before - we explained the basic
stuff that you should know to get started with
this VCS:</p>

<ul>
<li>distribute vs centralized versioning system</li>
<li>Github act as a remote</li>
<li><code>commit</code> is local</li>
<li><code>push</code>, <code>pull</code> and <code>fetch</code></li>
<li>rebasing</li>
<li>branching and merging</li>
<li><a href="http://nvie.com/posts/a-successful-git-branching-model/">gitflow</a></li>
</ul>


<p>All in all we wanted to follow gitflow but at the
end it turned out that in some parts we had to simplify
the workflow and add more complexity somewhere else:
keep reading to get more insights.</p>

<h2>Our development workflow</h2>

<p>So let&#8217;s say that today we have <code>master</code> and <code>dev</code> aligned:</p>

<ul>
<li><code>master</code> is an <em>always-ready-to-be-released</em> branch, in which
you commit code that is tested and works on production: the aim is
to have a solid fallback if you deploy and need to rollback ( <a href="https://github.com/capistrano/capistrano/wiki/">capistrano</a>
would probably be a better solution, since it&#8217;s more immediate, but
again you need an history of working versions )</li>
<li><code>dev</code> branches from <code>master</code>: it&#8217;s the integration branch, where
you merge features developed for your next release</li>
</ul>


<p>As the days go by, people will branch from develop to
implement new features/fix bugs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git checkout develop
</span><span class='line'>git checkout -b bug-1123
</span></code></pre></td></tr></table></div></figure>


<p>The developer is free to handle its <em>ticket</em> with both
local and remote branches: although pushing to the remote
makes <a href="http://ariejan.net/2011/07/05/git-squash-your-latests-commits-into-one/">squashing</a> harder, I would always recommend to push
every day.</p>

<p>Let&#8217;s say that the bugfixing seems done and we are ready
to include that code in the <code>develop</code>, which is gonna lead
to our next release: the developer now opens a <a href="https://help.github.com/articles/using-pull-requests/">pull request</a>
from its branch to <code>develop</code>:</p>

<p><img class="center" src="http://www.odino.org/images/pull-request.jpeg"></p>

<p>It&#8217;s always useful to name the PR like <code>TICKET-ID Headline</code>
and add a few more comments to explain your changes, if it&#8217;s worth it:
given that you <strong>name your branches after the tickets</strong> that they
implement/fix, adding the ticket ID to the PR&#8217;s title lets
who needs to merge it into develop to directly copy the branch
name from Github - otherwise you need to type it manully<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>.</p>

<p>The release manager ( who reviews PRs and merges them into
the integration branch ) can now have a look at your PR,
comment it and accept or reject it:</p>

<ul>
<li>if it&#8217;s accepted it gets merged and the ticket status
changes from <code>bugfixing</code><sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup> to <code>Ready for QA</code></li>
<li>if rejected it&#8217;s re-assigned back to the developer, and
technical comments are added <strong>directly on Github</strong></li>
</ul>


<figure class='code'><figcaption><span>After the release manager has positively evaluated your PR, ctrl+c on the branch name&#8230;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git fetch
</span><span class='line'>git checkout TICKET-ID
</span><span class='line'>git checkout develop
</span><span class='line'>git merge --no-ff TICKET-ID
</span></code></pre></td></tr></table></div></figure>


<p><img class="left" src="http://www.odino.org/images/pull-request-namshi.png"></p>

<p>Now times has come to go live with a set of changes:
a <strong>release branch</strong> is created and we tag version
<code>X.Y.Z-beta1</code>, that is gonna be deployed in the first
development environment ( sort of pre-staging ).</p>

<p>If some tests are not passing, the developers add the
related fixes and open the PRs in the release branch
( <code>release-X.Y.Z</code> ), so we re-tag and redeploy ( <code>X.Y.Z-beta2</code> ):
if someone is working on other tickets, which don&#8217;t have to
be included in version <code>X.Y.Z</code>, the integration branch
is still <code>develop</code>.</p>

<p>After this, a new tag <code>X.Y.Z-rc1</code> is deployed into the
staging environment: if everything is good we create a
new tag, <code>X.Y.Z</code> and go live with it.</p>

<p>After a few hours, we can consider this tag <strong>valid</strong>
and update both <code>master</code> and <code>develop</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git checkout master
</span><span class='line'>git merge --no-ff X.Y.Z
</span><span class='line'>git push origin master
</span><span class='line'>git checkout develop
</span><span class='line'>git rebase master
</span><span class='line'>git push -f origin develop
</span></code></pre></td></tr></table></div></figure>


<p>The development cycle starts again.</p>

<h2>Critical paths</h2>

<p>There are some problematic aspects to consider when
you are working with almost 10 people daily pushing/pulling
from the same remote:</p>

<ul>
<li>when you rebase <code>develop</code>, pull request can include old commits
that are already merged, so you just need to ask for a rebase of the
PR&#8217;s branch</li>
<li>when you rebase <code>develop</code>, always ask people to pull the remote
develop in their local ones, otherwise they will be working with a
different tree ( after the rebase Git is not smart enough to
connect the pre-rebase and after-rebase trees )</li>
<li>if you need to do an hotfix deployment, always branch from
<code>master</code> or the release branch ( if the related tag wasn&#8217;t merged into
<code>master</code> ): you don&#8217;t want to <code>cherry-pick</code> commits and then
manually update the PR which takes care of the hotfix</li>
</ul>


<h2>Conclusions</h2>

<p>All in all I think our process has improved so much: first of all
we see less conflicts, thanks to the Git engine<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>, second we have more <strong>control,
transparency and visibility</strong> towards code: being able to comment
every single line of code on Github really helps you when you need
to handle several PRs at once; not to mention the fact that doing
<strong>release-management is way easier</strong>.</p>

<p>By the way, pull request are another good stage of the workflow, since
they let the developer take a final look at the code, review it for
the last time and explain it in the PR message, something that with
SVN and SVN-based services ( like GH ) was <strong>nearly impossible</strong>.</p>

<p>Additionally, coming from Atlassian&#8217;s hosted services, Github gives
you the reliability I always missed: no apparent downtime so far
and pulling/pushing is really fast; compared to SVN,
this is a huge win for us.</p>

<p>At the end I&#8217;d say that <strong>we almost doubled our potential</strong> with
these changes, and I think it&#8217;s 50% because of Git and another 50%
&#8216;cause of Github: if you don&#8217;t use them, I definitely recommend
you to switch as soon as possible<sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup>.</p>

<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>We use &#8216;bigfixing&#8217; both for new features and bugs, it&#8217;s just to identify a status in which the developer is working on the ticket <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>Github&#8217;s markup makes it difficult to `ctrl+c` it from the &#8220;You&#8217;re asking @user to merge 1 commit into repo:develop from repo:TICKET-ID&#8221; string <a href='#fnref:2' rev='footnote'>↩</a></li><li id='fn:3'>But this can just be just my personal feeling <a href='#fnref:3' rev='footnote'>↩</a></li><li id='fn:4'>BitBucket is a pretty cheap alternative to Github <a href='#fnref:4' rev='footnote'>↩</a></li>
    </ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The hope is that IE will drown in 2 years]]></title>
    <link href="http://www.odino.org/the-hope-is-that-ie-will-drown-in-2-years/"/>
    <updated>2012-08-03T18:27:00+04:00</updated>
    <id>http://www.odino.org/the-hope-is-that-ie-will-drown-in-2-years</id>
    <content type="html"><![CDATA[<p>More than a decade ago the first <a href="http://en.wikipedia.org/wiki/Browser_wars">browser war</a>
made his victim: it was Netscape, which
couldn&#8217;t compete with Microsoft and its
IE: after long time, it&#8217;s time for this
decadent winner to retreat.</p>

<!-- more -->


<p>Today I was spending a few minutes on
<a href="http://caniuse.com/">IcanUse</a>, a brilliant service which
gives you informations on features implemented
by modern web browsers: not surprisingly,
IE is a total disappointment.</p>

<p>So I decided to take a look at what the <strong>current</strong> browsers
are implementing, retrieving some nice
charts to compare them against each other:</p>

<p><img class="center" src="https://chart.googleapis.com/chart?cht=bvs&chco=4D89F9,C6D9FD&chd=t:31,83,94,75,65|100,100,100,100,100&chxl=0:|IE|Firefox|Chrome|Safari|Opera&chs=750x400&chxt=x,y&chbh=120&chtt=Implementation%20of%20JS-related%20feature"></p>

<p><img class="center" src="https://chart.googleapis.com/chart?cht=bvs&chco=4D89F9,C6D9FD&chd=t:59,88,97,94,97|100,100,100,100,100&chxl=0:|IE|Firefox|Chrome|Safari|Opera&chs=750x400&chxt=x,y&chbh=120&chtt=Implementation%20of%20SVG-related%20feature"></p>

<p><img class="center" src="https://chart.googleapis.com/chart?cht=bvs&chco=4D89F9,C6D9FD&chd=t:63,82,89,88,73|100,100,100,100,100&chxl=0:|IE|Firefox|Chrome|Safari|Opera&chs=750x400&chxt=x,y&chbh=120&chtt=Implementation%20of%20CSS-related%20feature"></p>

<p><img class="center" src="https://chart.googleapis.com/chart?cht=bvs&chco=4D89F9,C6D9FD&chd=t:40,71,94,80,80|100,100,100,100,100&chxl=0:|IE|Firefox|Chrome|Safari|Opera&chs=750x400&chxt=x,y&chbh=120&chtt=Implementation%20of%20HTML5-related%20feature"></p>

<p>It&#8217;s not a surprise that IE9 is the worst browser out there,
but this made me think about how long it will be
a competitor in the market.</p>

<p>IE is slowly dying, <a href="http://upload.wikimedia.org/wikipedia/commons/8/86/Usage_share_of_web_browsers_%28Source_StatCounter%29.svg">we all know</a>:
just as netscape, it&#8217;s not able to face competitors
pushing hard to deliver the best
web-browsing experience.</p>

<p>It will take a few months, maybe years, to see
IE leaving the market kicked out by the yougsters,
nontheless it will be a great day for the
internet: the day that who fights for the
innovation will definitely overwhelm who
sits on top of his past, glorious days.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How refactoring influenced the World Wide Web]]></title>
    <link href="http://www.odino.org/three-times-and-refactor/"/>
    <updated>2012-07-28T02:58:00+04:00</updated>
    <id>http://www.odino.org/three-times-and-refactor</id>
    <content type="html"><![CDATA[<p>You&#8217;re about to read
how the concept behind a
<a href="http://sourcemaking.com/refactoring/when-should-you-refactor">refactoring tecnique</a>
gave us the internet:</p>

<!-- more -->




<blockquote><p>Because people at CERN came from universities all over the world, they brought with them all types of computers. Not just Unix, Mac and PC: there were all kinds of big mainframe computer and medium sized computers running all sorts of software[: to retrieve informations] you had to log on to different computers [and] often it was just easier to go and ask people when they were having coffee.</p><p>I actually wrote some programs to take information from one system and convert it so it could be inserted into another system. More than once. And when you are a programmer, and you solve one problem and then you solve one that&#8217;s very similar, you often think, &#8220;Isn&#8217;t there a better way? Can&#8217;t we just fix this problem for good?&#8221; That became &#8220;Can&#8217;t we convert every information system so that it looks like part of some imaginary information system which everyone can read?&#8221; And that became the WWW.</p><footer><strong>Tim Berners Lee</strong> <cite><a href='http://www.w3.org/People/Berners-Lee/Kids.html#What'>Tim&#8217;s Kids FAQ</a></cite></footer></blockquote>


<p>Meditate about it the
next time you&#8217;ll stick to something
boring because fixing it seems
unpractical.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Logging JavaScript errors]]></title>
    <link href="http://www.odino.org/logging-javascript-errors/"/>
    <updated>2012-07-27T09:00:00+04:00</updated>
    <id>http://www.odino.org/logging-javascript-errors</id>
    <content type="html"><![CDATA[<p>In one of my latest posts I talked about
<a href="http://www.odino.org/using-monolog-for-php-error-reporting-on-new-relic/">using Monolog to remotely log stuff on New Relic</a>:
getting a bit deeper on log management
systems, here&#8217;s how we managed to report
JavaScript errors on our logs.</p>

<!-- more -->


<h2>A note on JavaScript errors</h2>

<p>It may not sound obvious, but errors,
in JavaScript, can be pretty nasty, since
it&#8217;s an - almost completely<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup> - client-dependent
technology that can react differently to
your code based on the client&#8217;s platform.</p>

<p>Cross-browser testing may not always be
performed <em>that</em> accurately, so you should
definitely start tracking JS error that may
happen of different clients.</p>

<h2>The concept</h2>

<p>This is <strong>totally not an idea of mine</strong>: it
comes from a pretty smart <a href="http://devblog.pipelinedeals.com/pipelinedeals-dev-blog/2012/2/12/javascript-error-reporting-for-fun-and-profit-1.html">blog post which illustrates the main concept</a>:
when a JS error is encountered, you trigger an HTTP request
to a URL that collect the data transmitted
within that request and logs it with
server-side code.</p>

<figure class='code'><figcaption><span>How to trigger JS error reporting</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">MaximumErrorCount</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">onerror</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">errorMsg</span><span class="p">,</span> <span class="nx">file</span><span class="p">,</span> <span class="nx">lineNumber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">window</span><span class="p">.</span><span class="nx">errorCount</span> <span class="o">||</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">errorCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">errorCount</span> <span class="o">&lt;=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">MaximumErrorCount</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">jQuery</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/jsError/&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">errorMessage</span><span class="o">:</span>   <span class="nx">errorMsg</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">file</span><span class="o">:</span>           <span class="nx">file</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">url</span><span class="o">:</span>           <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">lineNumber</span><span class="o">:</span>     <span class="nx">lineNumber</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">ua</span><span class="o">:</span>             <span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, at the end, you only need to add some basic
server-side code to handle the reported data:</p>

<figure class='code'><figcaption><span>How to handle reported informations</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ErrorController</span> <span class="k">extends</span> <span class="nx">Controller</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">const</span> <span class="no">MESSAGE_LOG_JAVASCRIPT</span> <span class="o">=</span> <span class="s1">&#39;A javascript error &quot;%s&quot; has been encountered at the URL %s on file %s:%s by an agent of type %s&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">logJavaScriptAction</span><span class="p">(</span><span class="nv">$postData</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="nv">$logMessage</span> <span class="o">=</span> <span class="nb">sprintf</span><span class="p">(</span>
</span><span class='line'>          <span class="nx">self</span><span class="o">::</span><span class="na">MESSAGE_LOG_JAVASCRIPT</span><span class="p">,</span>
</span><span class='line'>          <span class="nv">$postData</span><span class="p">[</span><span class="s1">&#39;errorMessage&#39;</span><span class="p">],</span>
</span><span class='line'>          <span class="nv">$postData</span><span class="p">[</span><span class="s1">&#39;url&#39;</span><span class="p">],</span>
</span><span class='line'>          <span class="nv">$postData</span><span class="p">[</span><span class="s1">&#39;file&#39;</span><span class="p">],</span>
</span><span class='line'>          <span class="nv">$postData</span><span class="p">[</span><span class="s1">&#39;lineNumber&#39;</span><span class="p">],</span>
</span><span class='line'>          <span class="nv">$postData</span><span class="p">[</span><span class="s1">&#39;ua&#39;</span><span class="p">]</span>
</span><span class='line'>      <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getLogger</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">addError</span><span class="p">(</span><span class="nv">$logMessage</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You may want to write some additional
code to only report errors that you should
really fix: based on the user-agent, for
example, you can ignore errors triggered
on <code>MSIE 7.0</code>/<code>MSIE 6.0</code>.</p>

<h2>All in all&#8230;</h2>

<p>This has been a great solution for us,
since we could easily keep track of JS
code which was causing errors due to:</p>

<ul>
<li>lack of compatibility between developers&#8217;/users&#8217;
platforms</li>
<li>typos and small errors</li>
<li>tricky situations in which our code depends on
3rd party scripts that would break our functionality
whenever they are not available/cause an error upon
execution</li>
</ul>


<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>NodeJS <a href='#fnref:1' rev='footnote'>↩</a></li>
    </ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Monolog for PHP error reporting on New Relic]]></title>
    <link href="http://www.odino.org/using-monolog-for-php-error-reporting-on-new-relic/"/>
    <updated>2012-07-27T08:00:00+04:00</updated>
    <id>http://www.odino.org/using-monolog-for-php-error-reporting-on-new-relic</id>
    <content type="html"><![CDATA[<p>I <strong>do</strong> really like <a href="http://newrelic.com/">New Relic</a>, a real-time
error reporting solution available for many
platforms, so a few days ago I decided to
integrate it with <a href="https://github.com/Seldaek/monolog/">Monolog</a>, the other
main logging tool that we use here at
Rocket.</p>

<!-- more -->


<p>The idea behind it is very simple: since
New Relic is not always available on
development platforms, you first verify
that the PHP extension is loaded, then,
if it is, log a report on New Relic:
if the extension is not available, another
logging handler will act as a fallback.</p>

<p>To reach our goal we will simply need the
New Relic PHP extension, Monolog and the
Symfony2 <a href="http://symfony.com/doc/current/book/service_container.html">dependency injection container</a>.</p>

<h2>Catching the error and reporting it</h2>

<p>Let&#8217;s start with a real world example, you
have a controller action that receives some
<code>POST</code> data and throws an exception whenever
the input data is missing some values<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.</p>

<figure class='code'><figcaption><span>A simple action</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Application\Webservice</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Application\MVC\Controller</span> <span class="k">as</span> <span class="nx">BaseController</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Application\Webservice\Exception</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Controller</span> <span class="k">extends</span> <span class="nx">BaseController</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">updateDatabaseData</span><span class="p">(</span><span class="k">array</span> <span class="nv">$data</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">validateData</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// ...</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">Exception</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">container</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;logger.new-relic&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">error</span><span class="p">(</span><span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">(),</span> <span class="nv">$data</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, at this point, we just need to define the <code>logger.new-relic</code>
service in the DIC configuration file:</p>

<figure class='code'><figcaption><span>The DIC configuration file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">logger.new-relic</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="s">&quot;Monolog\\Logger&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">arguments</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&quot;new-relic&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">calls</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="p-Indicator">[</span> <span class="nv">pushHandler</span><span class="p-Indicator">,</span> <span class="p-Indicator">[</span><span class="err">@</span><span class="nv">log.handler.new-relic</span><span class="p-Indicator">]</span> <span class="p-Indicator">]</span>
</span><span class='line'>  <span class="l-Scalar-Plain">log.handler.new-relic</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span>  <span class="s">&quot;\\Application\\Log\\Handler\\NewRelic&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">calls</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="p-Indicator">[</span> <span class="nv">setFallbackHandler</span><span class="p-Indicator">,</span> <span class="p-Indicator">[</span><span class="err">@</span><span class="nv">log.handler.standard</span><span class="p-Indicator">]</span> <span class="p-Indicator">]</span>
</span><span class='line'>  <span class="l-Scalar-Plain">log.handler.standard</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span>  <span class="s">&quot;Monolog\\Handler\\StreamHandler&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">arguments</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">stream</span><span class="p-Indicator">:</span> <span class="s">&quot;/tmp/error-log.txt&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you see we define a Monolog logger designed
specifically for New Relic (<code>logger.new-relic</code>)
and an handler that will try to log everything
on the remote NR server: this handler also has a
fallback handler, if the New Relic PHP extension is
not available, which is configurable directly
within the YAML file (<code>log.handler.error</code>).</p>

<h2>The log handler</h2>

<p>The New Relic handler is <strong>really</strong>
straightforward:</p>

<figure class='code'><figcaption><span>The New Relic log handler</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Class used to log on New Relic.</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Application\Log\Handler</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Monolog\Handler\AbstractProcessingHandler</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Monolog\Handler</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">NewRelic</span> <span class="k">extends</span> <span class="nx">AbstractProcessingHandler</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$fallbackHandler</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Logs a $record on New Relic, providing additional parameters from the</span>
</span><span class='line'><span class="sd">     * record&#39;s context.</span>
</span><span class='line'><span class="sd">     * If the New Relic extension is not available and a fallback handler is</span>
</span><span class='line'><span class="sd">     * provided, it will simply log the error with a fallback.</span>
</span><span class='line'><span class="sd">     * </span>
</span><span class='line'><span class="sd">     * @param array $record </span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">protected</span> <span class="k">function</span> <span class="nf">write</span><span class="p">(</span><span class="k">array</span> <span class="nv">$record</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">extension_loaded</span><span class="p">(</span><span class="s1">&#39;newrelic&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">newrelic_notice_error</span><span class="p">(</span><span class="nv">$record</span><span class="p">[</span><span class="s1">&#39;message&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">foreach</span> <span class="p">(</span><span class="nv">$record</span><span class="p">[</span><span class="s1">&#39;context&#39;</span><span class="p">]</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$parameter</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">newrelic_add_custom_parameter</span><span class="p">(</span><span class="nv">$key</span><span class="p">,</span> <span class="nv">$parameter</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">elseif</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fallbackHandler</span> <span class="nx">instanceOf</span> <span class="nx">AbstractProcessingHandler</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fallbackHandler</span><span class="o">-&gt;</span><span class="na">write</span><span class="p">(</span><span class="nv">$record</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Sets the fallback handler to be used to log informations if the New Relic</span>
</span><span class='line'><span class="sd">     * extension is not available.</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param Monolog\Handler\AbstractProcessingHandler $handler </span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">setFallbackHandler</span><span class="p">(</span><span class="nx">AbstractProcessingHandler</span> <span class="nv">$handler</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fallbackHandler</span> <span class="o">=</span> <span class="nv">$handler</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, the code is pretty simple: we implement the <code>write</code> method
of <code>AbstractProcessingHandler</code> in our <code>New Relic</code> class,
using New Relic&#8217;s low level functions to notice the
error and add some more informations about the
context surrounding the exception: the fallback
handler will take stage only if the New Relic
extension isn&#8217;t loaded.</p>

<h2>Log systems and analysis</h2>

<p>Simple but pretty useful: if you use either
New Relic or Monolog I strongly recommend you
to integrate into your log management system
the missing tool since:</p>

<ul>
<li>New Relic serves as a nice reporting tool,
giving you an overview of the amount of
errors logged over some time, letting you
define tresholds for error reporting and
grouping errors to measure the impact a code
change can have on your applications<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup></li>
<li>Monolog gives you a great abstraction and
log handlers, which can very easily ease
your job in taking the right action for
different types of errors<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>
(as you saw, with the DIC it&#8217;s pure joy to
instantiate and use different handlers based
on a configuration file)</li>
</ul>


<p>At Rocket Turkey &amp; MENA we really care about logs:
being a product-based company, <strong>a bug in our
system is a bug on our core business</strong>, so we need
to easily be able to spot problems.</p>

<p>So far, using Monolog and New Relic as both standalone and combined
products has been a very good choice, since with
New Relic with have a pretty overview about
error reporting, while Monolog gives us the
ability to easily debug problems in our
integrations, since solving problems with all
the data we track with it it&#8217;s really easier,
and if we need to change logs&#8217; format or add new data
to the logs because we notice that it would speed
up troubleshooting and log analysis, making
the change is relatively easy, since it&#8217;s a
really well OOP-written library.</p>

<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>Bare in mind that I will be very brief in my examples, so you won&#8217;t learn how to bootstrap the DIC here, for example <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>I say applications since, as you may know, in New Relic you can handle multiple machines to be registered as different applications (like frontend/backend/mail server/cron slave/gateway) <a href='#fnref:2' rev='footnote'>↩</a></li><li id='fn:3'>In fact,whenever an email is not delivered by your email sever, it&#8217;s not a problem, but when you start seeing that the amount of mails that are not delivered are too much, you may consider to use a critical handler, specifically designed to send an SMS/email to some contacts <a href='#fnref:3' rev='footnote'>↩</a></li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bootstrap of a Travis-CI test-machine]]></title>
    <link href="http://www.odino.org/bootstrap-of-a-travis-ci-test-machine/"/>
    <updated>2012-07-27T07:00:00+04:00</updated>
    <id>http://www.odino.org/bootstrap-of-a-travis-ci-test-machine</id>
    <content type="html"><![CDATA[<p><a href="http://travis-ci.org/">Travis-CI</a> is an awesome open source service which
makes continuos integration really easy in the context
of <em>github-hosted</em> projects.</p>

<!-- more -->


<p>Developing Orient, I found out about Travis when one of
the 3 active guys actively collaborating to the project,
<a href="https://github.com/nrk">Daniele</a> created his own fork of the library to create
the CI environment on Travis.</p>

<h2>More than testing</h2>

<p>Travis doesn&#8217;t only provide a machine in which you can
continuosly running tests, it gives you a <strong>free</strong> VM
which you can <strong>freely</strong> manage in the context of testing
an application: although they don&#8217;t actually give you a &#8220;real&#8221; VM, they provide
you an <strong>temporary VM</strong> which gets bootstrapped following
your indications and executes the tasks that <strong>you</strong>
indicate: in that sense, Travis gives you VMs
<em>on-demand</em>.</p>

<p>So think about it: it&#8217;s not only about testing, it&#8217;s about
having an environment ready to do anything you want for
your own project, like running reports.</p>

<h2>A real world example</h2>

<p>For <a href="http://github.com/congow/Orient">Orient</a>, Daniele managed to setup a quite clever
bootstrap script.</p>

<p>We have a quite comprehensive test-suite which you can
execute with the single <code>phpunit</code> command, from the root
of the library, but it just executes tests which dont
directly talk to OrientDB.</p>

<p>To execute the full test-suite, including integration
tests, you just need to pass the test directory to the
CLI:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">phpunit test/</span>
</span></code></pre></td></tr></table></div></figure>


<p>but you&#8217;ll need a working instance of OrientDB, with
predefined admin credentials (<code>admin</code>/<code>admin</code>) listening
on port <code>:2480</code>.</p>

<p>So our challenge was to use Travis and being able to trigger
the integration tests.</p>

<p>In the <code>.travis.yml</code> configuration file, we have:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">language: php</span>
</span><span class='line'><span class="x">php:</span>
</span><span class='line'><span class="x">  - 5.3</span>
</span><span class='line'><span class="x">  - 5.4</span>
</span><span class='line'><span class="x">before_script:</span>
</span><span class='line'><span class="x">  - sh -c ./bin/initialize-ci.sh 1.0rc6</span>
</span><span class='line'><span class="x">script: phpunit test/</span>
</span><span class='line'><span class="x">notifications:</span>
</span><span class='line'><span class="x">  email:</span>
</span><span class='line'><span class="x">    - ...@gmail.com</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, as you see, we have a bash script which
takes care of everything:</p>

<figure class='code'><figcaption><span>./bin/initialize-ci.sh 1.0rc6</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="nv">PARENT_DIR</span><span class="o">=</span><span class="k">$(</span>dirname <span class="k">$(</span><span class="nb">cd</span> <span class="s2">&quot;$(dirname &quot;</span><span class="nv">$0</span><span class="s2">&quot;)&quot;</span>; <span class="nb">pwd</span><span class="k">))</span>
</span><span class='line'><span class="nv">CI_DIR</span><span class="o">=</span><span class="s2">&quot;$PARENT_DIR/ci-stuff/environment&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">ODB_VERSION</span><span class="o">=</span><span class="k">${</span><span class="nv">1</span><span class="k">:-</span><span class="s2">&quot;1.0rc6&quot;</span><span class="k">}</span>
</span><span class='line'><span class="nv">ODB_PACKAGE</span><span class="o">=</span><span class="s2">&quot;orientdb-${ODB_VERSION}&quot;</span>
</span><span class='line'><span class="nv">ODB_DIR</span><span class="o">=</span><span class="s2">&quot;${CI_DIR}/${ODB_PACKAGE}&quot;</span>
</span><span class='line'><span class="nv">ODB_LAUNCHER</span><span class="o">=</span><span class="s2">&quot;${ODB_DIR}/bin/server.sh&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;=== Initializing CI environment ===&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">cd</span> <span class="s2">&quot;$PARENT_DIR&quot;</span>
</span><span class='line'>
</span><span class='line'>. <span class="s2">&quot;$PARENT_DIR/bin/odb-shared.sh&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> ! -d <span class="s2">&quot;$CI_DIR&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'>  <span class="c"># Fetch the stuff needed to run the CI session.</span>
</span><span class='line'>  git clone --quiet git://gist.github.com/1370152.git <span class="nv">$CI_DIR</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># Download and extract OrientDB</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;--- Downloading OrientDB v${ODB_VERSION} ---&quot;</span>
</span><span class='line'>  odb_download <span class="s2">&quot;http://orient.googlecode.com/files/${ODB_PACKAGE}.zip&quot;</span> <span class="nv">$CI_DIR</span>
</span><span class='line'>  unzip -q <span class="s2">&quot;${CI_DIR}/${ODB_PACKAGE}.zip&quot;</span> -d <span class="nv">$ODB_DIR</span> <span class="o">&amp;&amp;</span> chmod +x <span class="nv">$ODB_LAUNCHER</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># Copy the configuration file and the demo database</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;--- Setting up OrientDB ---&quot;</span>
</span><span class='line'>  tar xf <span class="nv">$CI_DIR</span>/databases.tar.gz -C <span class="s2">&quot;${ODB_DIR}/&quot;</span>
</span><span class='line'>  cp <span class="nv">$PARENT_DIR</span>/ci-stuff/orientdb-server-config.xml <span class="s2">&quot;${ODB_DIR}/config/&quot;</span>
</span><span class='line'>  cp <span class="nv">$PARENT_DIR</span>/ci-stuff/orientdb-server-log.properties <span class="s2">&quot;${ODB_DIR}/config/&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s2">&quot;!!! Directory $CI_DIR exists, skipping downloads !!!&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Start OrientDB in background.</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;--- Starting an instance of OrientDB ---&quot;</span>
</span><span class='line'>sh -c <span class="nv">$ODB_LAUNCHER</span> &lt;/dev/null &amp;&gt;/dev/null &amp;
</span><span class='line'>
</span><span class='line'><span class="c"># Wait a bit for OrientDB to finish the initialization phase.</span>
</span><span class='line'>sleep 5
</span><span class='line'><span class="nb">printf</span> <span class="s2">&quot;\n=== The CI environment has been initialized ===\n&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think the script speaks for itsef: we directly download
OrientDB from the official website, de-compress it, configure
OrientDB with our standard configuration file and launch the
ODB server, outputting in <code>/dev/null</code>.</p>

<p>Now, all of this happens everytime someone commits to the <code>master</code>
on Github: pretty easy, simple but so powerful.</p>

<p>I really recommend you to start having a look at Travi-CI
and how you can benefit from a CI server, fully configurable,
for free, for the sake of your own code.</p>

<p>One last note: yes, all of this comes for free, but if you use
Travis you should really consider making a donation to
show the guys behind the project <a href="http://love.travis-ci.org/">your love</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Where is Agile?]]></title>
    <link href="http://www.odino.org/what-is-agile/"/>
    <updated>2012-07-23T20:20:00+04:00</updated>
    <id>http://www.odino.org/what-is-agile</id>
    <content type="html"><![CDATA[<p>I&#8217;m a pragmatic programmer, not a pragmatic agilist.</p>

<p>If I had to be a pragmatic agilist during my career,
I&#8217;d have been fired several times, and that&#8217;s why.</p>

<!-- more -->


<h2>The Agile rape</h2>

<p><img class="right" src="http://www.odino.org/images/televangelist.jpg"></p>

<p>We hear the word <em>Agile</em> everywhere, thanks to the fact that
this is a concept 10 years old, brought to the public by some
of the <strong>greatest minds in computer engineering</strong>, who could also
describe <a href="http://www.amazon.com/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420">interesting things</a>
other than a cool way to have more fun and be more productive at work.</p>

<p>Let&#8217;s face it: the word &#8221;<em>Agile</em>&#8221;&#8221; has been raped over the past
5 years.
This is not because it became mainstream and everyone
wanted to adopt it, it&#8217;s because once it was about to
become mainstream a lot of people heard of it and
wanted to integrate <strong>their own</strong> vision of agile
development into their IT infrastructures.</p>

<p>You read it: <strong>their</strong> own vision.</p>

<p>Take a look at the <a href="http://en.wikipedia.org/wiki/Lean_software_development">lean software development</a>: we have
the <a href="http://www.amazon.com/Mary-Poppendieck/e/B001IGNU3O/">Poppendieck saga</a>
and not much more; sure, there are a lot of books and a
lot of opinions about LSD across IT professionals,
nonetheless everyone takes inspiration from the infamous
<em>weds</em>, not from what they heard about what they wrote.</p>

<p>Fact, this is the reason why LSD is still a pure oasis
in IT<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.</p>

<h2>SCRUM</h2>

<p>Sure, one of the things I&#8217;d point my finger against is SCRUM.</p>

<p>This lightweight agile methodolgy is probably on everyone&#8217;s
mouth since 3 years, since lot of people adopted it and
it seem to work: nonetheless, SCRUM is failing and will continue failing
in preserving and communicating the legacy of the agile
principles, values and patterns.</p>

<p><img class="right" src="http://www.odino.org/images/rugby-scrum.jpg"></p>

<p>The problem with SCRUM is not SCRUM itself, because I
think it <em>may</em> work in some contexts, but to the way
people interpret it and implement it in their own
processes:</p>

<ul>
<li>the focus is shifted from the IT team and the transparency
betweem the <strong>whole team</strong> to the <em>product owner</em>, which acts
as a benevolent dictator between the team and the customer</li>
<li>whenever you add a layer between programmers and the
customer, you introduce an overhead, which means a less efficient
communication</li>
<li>SCRUM masters often fail to facilitate, since they become
a bottleneck in the process: if a problem depends to the SM,
N people in the development team have to rely and wait for him,
while, if the team act as a standalone being, each part of it
can theoretically deal with problems applying a FIFO
principle (<em>first in, first out</em>, sorting problems by priority
and business value rather than age)</li>
<li>1 out of 2 <strong>certified SCRUM masters</strong> that I meet don&#8217;t
even know how to finish <em>&#8220;Individuals and interactions&#8230;&#8221;</em>
which I find first offensive second really frustrating</li>
</ul>


<p>Yes, the last one is a merely pure personal observation:
still, there&#8217;s no doubt about the certification itself,
which I find pretty overestimated.</p>

<p>[Formally] <strong>Certifying processes that don&#8217;t have formal
approaches</strong> is purely counter-intuitive: sorry, agile
processes are not formal<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>.</p>

<p>All in all the history of SCRUM and its adopters teaches
us that a few big corporations are willing to make a step
and try to embrace agile development, with the wrong approach:
if you will to adopt something that - oh, boy! - has a
manifesto you should, in first place, try not to betray
its values, <strong>transparency at first place</strong>.</p>

<h2>We are different</h2>

<p>The reality is that I never heard stories from the trenches of
an agile organization: ok, I read them, ok, I heard
something, but I never spoke with someone who illustrated
me a 100% adoption of one agile methodology,
no matter if SCRUM, crystal or XP<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>.</p>

<p>I still think that embracing agile is the winning
option, (almost) no matter when and where:
share with me your stories, I&#8217;d be glad to
give them some space here.</p>

<p>Still, agile&#8217;s biggest problems are both
management and programmers: the management always
has a skeptical eye on new methodologies that
make their teams slower<sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup> and
programmers often think that they should interpret
their own view of agile development.</p>

<p>Just a mention: I worked several months for a firm
who was selling itself as &#8220;agile&#8221; or - at least -
&#8220;agile-prone&#8221;, while no one ever did a retrospective
<strong>in months</strong>.</p>

<p>I spoke with PMs, I spoke with the CTO, I spoke with
the programmers: everyone had good intentions but no
one was <strong>eager to be the change</strong>, not to <strong>just talk</strong>.</p>

<p>Back then, it was really frustrating: so no surprise I
parted ways with that organization while account
managers are still there, working every day until 9pm
because &#8221;<em>in this industry it works like this</em>&#8221;.</p>

<p>&#8220;<a href="http://www.agiledevelopment.it/2012/01/we-are-different/">We are different</a>&#8221;,
they said.</p>

<h2>An agile and slower IT would just be a pain for our business</h2>

<p>IT is a bottleneck, <strong>get over it</strong>.</p>

<p>Still, most organizations think that the problem between their
ideas and their success is IT, since it tends to slow down and
raise doubts about estimates, delivery times and implementations.</p>

<p>Now, put things this way: you have a great idea, you
know it&#8217;s gonna work.</p>

<p>Sadly, having an idea and implementing it are different things:
in a case, you think it and it becomes real, in the other
you need to work hard and in a very qualitative way not to
limit and ruin the motivation behind your work - guess
if IT fits in the first or the second case.</p>

<p>Still, <strong>IT is a bottleneck</strong>.</p>

<p>Be fine with it, that&#8217;s why technicians tend to limit/screw
your ideas: they try to bring you back to reality and suggest
the most credibile solutions to your problems.
They have to be the bottleneck between a management&#8217;s
childish dreams and reality.</p>

<p><img class="right" src="http://www.odino.org/images/bottleneck.jpg"></p>

<p>Still, <strong>agile is a bottleneck</strong>.</p>

<p>Be fine with it, that&#8217;s why agilists tend to enpower
collaboration: they try to find the best mid-term
solution for your problem, to help your business not
facing IT bottlenecks in <em>put-some-number-here</em> months.
They have to be the bottleneck between a management&#8217;s
lack of knowledge and technology.</p>

<p>That&#8217;s why the management should listen to its IT
department and get some genuine advices about their
digital strategy and the upcoming issues that technology
could reserve them ( read &#8220;it&#8217;s stupid to spend 600k on
facebook ads for a mini-site if you dont have the right
servers to handle the groundbreaking traffic which
will come from ads themselves&#8221; ).</p>

<p>I once worked in a company where the CEO thought we could
do whatever technologic project people would have
asked for: the CTO - pretty seasoned - was battling
everyday to get this guy understand that a salesman
cannot sell projects he doesn&#8217;t know, at all - and yes,
that salesman was the CEO<sup id='fnref:5'><a href='#fn:5' rel='footnote'>5</a></sup>.</p>

<p>It&#8217;s funny how management tend to prove itself as the
dumbest department ever: you hire <em>some-area</em> professionals,
you pay them lot of money, you hear what they say,
you eventually ignore them<sup id='fnref:6'><a href='#fn:6' rel='footnote'>6</a></sup>.</p>

<p>Results?</p>

<ul>
<li>you could have saved a lot just hiring monkeys</li>
<li>you will make people working on stuff against their will</li>
</ul>


<p>Still, <strong>your problem with IT is you</strong>, not IT itself.</p>

<p>Now ask IT guys if they would like to work the agile way: 80%
of them will just tell you &#8220;of course&#8221; (at least in europe).
Now ask IT guys how many of them work in a company which
truly promotes agile development, following <strong>both
processes and values</strong>: 15% of them will get back to you
with a positive answer.</p>

<p>A failure, because it means that - still - IT
departments don&#8217;t have the decisional power to
make their job better, easier and safer from
a business perspective<sup id='fnref:7'><a href='#fn:7' rel='footnote'>7</a></sup>.</p>

<p><img class="left" src="http://www.odino.org/images/celtics.jpeg"></p>

<h2>Agile is not a reality</h2>

<p>Today I hear too many people talking about agile<sup id='fnref:8'><a href='#fn:8' rel='footnote'>8</a></sup>
while too few organizations succesfully implement it
in their own processes: simply, <strong>agile is mainstream but not a
reality</strong>.</p>

<p>You need the right people to truly integrate and implement
an agile methodology, this is a simple fact, and &#8221;<em>the
right people</em>&#8221; doesn&#8217;t always mean experts, but people
who truly believe in agile values.</p>

<p><a href="http://en.wikipedia.org/wiki/Phil_Jackson">Phil Jackson</a>
won 11 NBA titles while coaching Chicago (11)
and the Los Angeles Lakers (5), always using the <a href="http://en.wikipedia.org/wiki/Triangle_offense">triangle offense</a>.</p>

<p>Look at his teams:</p>

<ul>
<li>Scottie Pippen, Michael Jordan and Dennis Rodman in his runs with the Bulls</li>
<li>Kobe Bryant, Shaquille O&#8217;Neal and Derek Fisher with his first Lakers</li>
</ul>


<p><img class="right" src="http://www.odino.org/images/red-auerbach.jpg"></p>

<p>Simply, he was preaching the triangle offense and had the
right men at the right time.</p>

<p><a href="http://en.wikipedia.org/wiki/Red_Auerbach">Red Auerbach</a>,
the Boston Celtics legend, built several
( as a coach first as well as GM later ) teams
devoted to team-playing, respect and pride.
Counting up to 10 NBA titles.</p>

<p>He had Larry &#8220;The Legend&#8221; Bird, Kevin McHale, Robert
Parish, Glenn &#8220;Doc&#8221; Rivers, Bill Russel&#8230; I should stop:
he simply - again - had the right people.</p>

<p><strong>You</strong> say it&#8217;s a coincidence: less words, more
people.</p>

<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>Don&#8217;t be so enthusiast: in 2 years what happened to the agile software development will happen to LSD <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>Quoting Ron Jeffries: http://www.sviluppoagile.it/sfuggente-e-di-qualita (italian article with english quotes) <a href='#fnref:2' rev='footnote'>↩</a></li><li id='fn:3'>Ok, maybe - in Italy - Ideato is the only example I can mention, but they are too small to count as a truly succesfull story <a href='#fnref:3' rev='footnote'>↩</a></li><li id='fn:4'>Following agile practices makes your team slower: that&#8217;s a fact. For their first months programmers need to learn a new way to manage their job and handle collaboration among team members. Not to mention that when the team is experienced, kickstarting an agile project will always be slower, since in your first steps ( = iterations ) you tend to be more pragmatic and deliver with the highest quality, while cowboy coders start like the new John Wayne and end up screwing everything they can. <a href='#fnref:4' rev='footnote'>↩</a></li><li id='fn:5'>Now, that company is about to implode, guess why <a href='#fnref:5' rev='footnote'>↩</a></li><li id='fn:6'>It&#8217;s funny how I was surprised - joining Rocket - when PMs and MDs were really about to follow your advices :) some of my previous experiences were really too far from this <a href='#fnref:6' rev='footnote'>↩</a></li><li id='fn:7'>Keep in mind that leveraging the technical quality of IT products ( like agile does ) means delivering software without a vendor&#8217;s lock-in: as a result, agilists trust their job and try to deliver the best artifact they can, since they would be replaceable at any time of the process &#8211; see, everything for the customer&#8217;s advantage <a href='#fnref:7' rev='footnote'>↩</a></li><li id='fn:8'>Myself included <a href='#fnref:8' rev='footnote'>↩</a></li>
    </ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speaking at IPC 2012]]></title>
    <link href="http://www.odino.org/speaking-at-ipc-2012/"/>
    <updated>2012-07-23T19:34:00+04:00</updated>
    <id>http://www.odino.org/speaking-at-ipc-2012</id>
    <content type="html"><![CDATA[<p>Now it&#8217;s official: in October I will be
in Mainz for <a href="http://phpconference.com/">IPC 2012</a>.</p>

<!-- more -->


<p>No doubts anymore: I will be present - for my first time -
at the most prestigious<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup> european PHP conference,
a travel more than 6 thousand kilometers long:</p>

<iframe width="750" height="600" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" src="https://maps.google.com/maps?f=q&amp;source=s_q&amp;hl=en&amp;geocode=FWObgQEd3exLAylFxtlqSUNfPjFiUSmEUG7mvQ%3BFZ7U-gId1dd9ACl5E98zLpG9RzGgG9sQ1dQiBA&amp;q=from+Dubai+to+Mainz&amp;aq=&amp;sll=32.93158,33.8919&amp;sspn=21.939821,46.538086&amp;ie=UTF8&amp;t=m&amp;saddr=Dubai&amp;daddr=Mainz&amp;ll=37.0008,31.761065&amp;spn=26.13436,47.12413&amp;output=embed"></iframe>


<p>I will bring with me a new talk<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>, which
mainly deals with protocols:</p>

<ul>
<li>history of <code>HTTP</code></li>
<li>hiddent features of <code>HTTP/1.1</code></li>
<li>what should we expect from <code>HTTP/2.0</code></li>
<li>how <code>SPDY</code> is revolutionizing web protocols</li>
</ul>


<p>If you&#8217;ll be there, dont hesitate and drop me a line
at <em>alessandro.nadalin@gmail.com</em>, it will be a good
opportunity to have a chat about PHP and the
<a href="http://www.odino.org/moving-to-dubai/">Middle East</a>.</p>

<div class="footnotes">
<span>
Notes
</span>
    <ol>
        <li id='fn:1'>Not a lot of doubts about this, which doesnt automatically make it the best european PHP conference: my memories of the PHP Benelux Conference 2011 are still alive <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>&#8220;HTTP colon slash slash: end of an era?&#8221; <a href='#fnref:2' rev='footnote'>↩</a></li>
    </ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Going beyond HTTP at IPC in October]]></title>
    <link href="http://www.odino.org/going-beyond-http-at-ipc-in-october/"/>
    <updated>2012-07-02T13:31:00+04:00</updated>
    <id>http://www.odino.org/going-beyond-http-at-ipc-in-october</id>
    <content type="html"><![CDATA[<p>Just a quick one: seems that in October I&#8217;ll need to travel
all my way back to Europe to speak at the
<a href="http://phpconference.com/">international PHP Conference</a> 2012
in its winter edition.</p>

<!-- more -->


<p>Subject? Oh, something that I <em>really</em> love:</p>

<blockquote><p>For years we&#8217;ve been used to the HTTP protocol, one of the reasons behind the web&#8217;s success, a protocol able to scale up to bilion of requests and beyond.<br/>But there&#8217;s more we can achieve, leveraging HTTP/1.1 hidden feature, taking a look at HTTP/2.0 and SPDY, the Google-proposed new protocol which is already making web faster.</p><p>Back to the basics: what enpowers and will enpower the web?</p></blockquote>


<p>Still to be confirmed - flights, leave days, date - but I should be able
to make it for the first time among the germans.</p>

<p>Hope to see you there!</p>
]]></content>
  </entry>
  
</feed>
