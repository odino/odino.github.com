<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: PEAA | Alessandro Nadalin]]></title>
  <link href="http://odino.org/blog/categories/peaa/atom.xml" rel="self"/>
  <link href="http://odino.org/"/>
  <updated>2014-02-28T14:35:22-05:00</updated>
  <id>http://odino.org/</id>
  <author>
    <name><![CDATA[Alessandro Nadalin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creating your own services for the Symfony2 DIC]]></title>
    <link href="http://odino.org/creating-your-own-services-for-the-symfony2-dic/"/>
    <updated>2011-01-08T19:50:00-05:00</updated>
    <id>http://odino.org/creating-your-own-services-for-the-symfony2-dic</id>
    <content type="html"><![CDATA[<p>I want you to know how to write a service and let the container handle it for you.</p>

<!-- more -->


<p>This post comes from a very cool evening with <a href="http://agiledevelopment.it">Jacopo Romei</a>
and <a href="http://davidfunaro.com">David Funaro</a>, two friends of mine, developers too.</p>

<h2>A container?</h2>

<p>Yes, a container: Symfony2 implements a <a href="http://fabien.potencier.org/article/12/do-you-need-a-dependency-injection-container">dependency injection container</a>
able to load any service you need ( a service can be the <strong>DB connection</strong>, a
<strong>Twitter WS</strong>, a <strong>mailer</strong> ) in the way you prefer.</p>

<p>Ever thought the <code>factories.yml</code> of symfony 1.4 was evil? The DIC basically does
the same thing. But, the right way.</p>

<h2>Why does a container is that great?</h2>

<p>Because it lets you decide the <em>behaviour</em> of the framework.</p>

<p>Ever thought the <code>sfActions</code> were crap and wanted to build <strong>your own C of the MVC</strong>
with symfony 1.4 in a simple way? A pain in the mess :)</p>

<p>With the DIC you are able to <strong>configure Symfony&rsquo;s architecture</strong>.</p>

<h2>Building your own service</h2>

<p>I&rsquo;ll show a really simple example.</p>

<p>To let the container manage your extension you simply need:</p>

<ul>
<li>a bundle</li>
<li>an extension, able to load the cascading configuration of your service</li>
<li>your service class(es)</li>
</ul>


<p>If you are familiar with the Sf2 sandbox you know it comes bundled with a simple
application bundle, <code>HelloBundle</code>, which exposes the route:</p>

<p><code>
/hello/:name
</code></p>

<p>and renders a template saying <code>hello</code> to the name:</p>

<p><img class="center" src="/images/hello.sf2.png"></p>

<p>We will add the mood of our application to that page ;&ndash;)</p>

<p>First of all we need to tell Sf2 that we want to enable our service:</p>

<p><code>yml app/config/config_dev.yml
hello.service: ~
</code></p>

<p>Then we have to build an extension able to load the configuration for our service.</p>

<p>Inside <code>src/Application/HelloBundle</code> we create a directory <code>DependencyInjection</code>
and create the <code>HelloExtension</code> class:</p>

<p>``` php
&lt;?php</p>

<p>namespace Application\HelloBundle\DependencyInjection;</p>

<p>use Symfony\Component\DependencyInjection\Extension\Extension;
use Symfony\Component\DependencyInjection\Loader\XmlFileLoader;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Definition;
use Symfony\Component\DependencyInjection\Reference;
use Symfony\Component\DependencyInjection\Resource\FileResource;</p>

<p>class HelloExtension extends Extension
{</p>

<pre><code>public function serviceLoad($config, ContainerBuilder $container)
{      
    $loader = new XmlFileLoader($container, __DIR__.'/../Resources/config');
    $loader-&gt;load('hello.xml');

    $container-&gt;setParameter('hello.service.mood', isset($config['mood']));
}

public function getAlias()
{
    return 'hello';
}

public function getXsdValidationBasePath()
{
    return __DIR__.'/../Resources/config/schema';
}

public function getNamespace()
{
    return 'http://www.symfony-project.org/schema/dic/doctrine';
}
</code></pre>

<p>}
```</p>

<p>If you take a closer look to the <code>serviceLoad</code> method</p>

<p>``` php
&lt;?php</p>

<p>public function serviceLoad($config, ContainerBuilder $container)
{</p>

<pre><code>$loader = new XmlFileLoader($container, __DIR__.'/../Resources/config');
$loader-&gt;load('hello.xml');

$container-&gt;setParameter('hello.service.mood', isset($config['mood']));
</code></pre>

<p>}
```</p>

<p>you&rsquo;ll notice that it accepts, as parameters, the configuration ( yes, the YML
configuration, the one we left untouched with the <code>~</code> symbol ) and the container.</p>

<p>Why does our extension calls the <code>serviceLoad</code> method? That comes from the YAML
configuration done before:</p>

<p><code>yml
hello.service: ~
</code></p>

<p>Remember? If we wrote <code>hello.obama</code>, we should have defined a <code>obamaLoad</code> method
in our extension.</p>

<p>Then it creates an <code>XMLFileLoader</code> and loads the configuration of our services,
which lies in the <code>Resources/config</code> folder, an XML file called <code>hello.xml</code>.</p>

<p>Then, it sets a parameter, for the service: it sets <code>hello.service.mood</code>; <code>true</code>
if we have defined it in the configuration, false otherwise ( our situation ).</p>

<p>Ok, things will become clear watching at the <code>hello.xml</code>, located in
<code>src/Application/HelloBundle/Resources/config/hello.xml</code>:</p>

<p>``` xml
&lt;?xml version=&ldquo;1.0&rdquo; ?></p>

<p>&lt;container xmlns=&ldquo;<a href="http://www.symfony-project.org/schema/dic/services">http://www.symfony-project.org/schema/dic/services</a>&rdquo;</p>

<pre><code>xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.symfony-project.org/schema/dic/services http://www.symfony-project.org/schema/dic/services/services-1.0.xsd"&gt;

&lt;parameters&gt;
    &lt;parameter key="hello.service.class"&gt;Application\HelloBundle\Service\Hello&lt;/parameter&gt;
&lt;/parameters&gt;

&lt;services&gt;
    &lt;!--- Annotation Metadata Driver Service --&gt;
    &lt;service id="hello_service" class="%hello.service.class%"&gt;
      &lt;argument&gt;%hello.service.mood%&lt;/argument&gt;
    &lt;/service&gt;
&lt;/services&gt;
</code></pre>

<p></container>
```</p>

<p>As you see, it defines a service ( <code>hello_service</code> ), which istantiates the class
<code>%hello.service.class%</code>, a parameter defined some lines above, with the argument
<code>%hello.service.mood%</code>.</p>

<p>Yes, that parameter comes from the <code>HelloExtension</code>!</p>

<p>Remember?</p>

<p>``` php
&lt;?php</p>

<p>$container->setParameter(&lsquo;hello.service.mood&rsquo;, isset($config[&lsquo;mood&rsquo;]));
```</p>

<p>So, here we are passing to the XML the parameter <code>%hello.service.mood%</code> with
<code>false</code> value.</p>

<p>Ok, we are close to the end, what&rsquo;s missing there? Oh, our service!</p>

<p>In the XML we stated that the class of the <code>hello_service</code> service should be
<code>Application\HelloBundle\Service\Hello</code>, so we only need to create it under
<code>src/Application/HelloBundle/Service/Hello.php</code>:</p>

<p>``` php
&lt;?php</p>

<p>namespace Application\HelloBundle\Service;</p>

<p>class Hello
{
  public function __construct($mood)
  {</p>

<pre><code>$this-&gt;mood = $mood;
</code></pre>

<p>  }</p>

<p>  public function __toString()
  {</p>

<pre><code>if ($this-&gt;mood)
{
  return "sunshine reggae!";
}

return 'Oh no';
</code></pre>

<p>  }
}
```</p>

<p>as you see, <strong>the mood is passed by the DIC in the constructor</strong>*, and we have
defined a <code>__toString</code> returning 2 different strings based on the value of the mood.</p>

<p>Ok, we&rsquo;re done.</p>

<p>Open the dummy front controller bundled with the sandbox and pass a second
argument to the template:</p>

<p>``` php src/Application/HelloBundle/Controller/HelloController.php
&lt;?php</p>

<p>public function indexAction($name)
{</p>

<pre><code>$hello = $this-&gt;get('hello_service');

return $this-&gt;render('HelloBundle:Hello:index.twig', array('name' =&gt; $name, 'mood' =&gt; $hello));
</code></pre>

<p>}
```</p>

<p>then edit the twig template:</p>

<p>File /home/odino/projects/odino/source/downloads/code/[src/Application/HelloBundle/Resource/views/Hello/index.twig] could not be found</p>

<p>So, let&rsquo;s see it in action:</p>

<p><img class="center" src="/images/on-no-sf2.png"></p>

<p>Now we can edit the service configuration:</p>

<p><code>yml
hello.service:
  mood: true
</code></p>

<p>and see what happens:</p>

<p><img class="center" src="/images/sf2-sunshine.png"></p>

<h2>&ldquo;Oh shit&rdquo;&hellip; A bit lost? Here&rsquo;s a recap!</h2>

<p>Ok, let&rsquo;s try to explain things again!</p>

<p>In the configuration of you application ( <code>app/config/config_dev.yml</code> ) you add
to your application a new service ( <code>hello.service</code> ), with no parameters.</p>

<p>Then, when in the application you call the service <code>hello_service</code>, the DIC
looks for an extension able to load the service, which is <code>HelloExtension</code>.
It runs the method serviceLoad, which looks to an XML describing the service
passing it the parameters you defined in the YAML configuration ( none ).</p>

<p>Then the DIC instantiate the service class with the parameters mapped in the XML
( <code>$mood = false</code> ).</p>

<p>The second time, we have defined <code>$mood</code> as <code>true</code>, so the container instantiates
the class with a really simple:</p>

<p>``` php
&lt;?php</p>

<p>$service = new Hello(true);
```</p>

<p>the result is that you get an instance of your service configured as you want.</p>
]]></content>
  </entry>
  
</feed>
