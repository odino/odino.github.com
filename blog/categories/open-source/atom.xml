<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Category: Open Source | Alessandro Nadalin]]></title>
  <link href="http://odino.org/blog/categories/open-source/atom.xml" rel="self"/>
  <link href="http://odino.org/"/>
  <updated>2014-07-11T18:08:56+04:00</updated>
  <id>http://odino.org/</id>
  <author>
    <name><![CDATA[Alessandro Nadalin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Nikki 0.25.1: Let's Play With the Filesystem!]]></title>
    <link href="http://odino.org/nikki-0-dot-25-dot-1-lets-play-with-the-filesystem/"/>
    <updated>2014-07-11T17:40:00+04:00</updated>
    <id>http://odino.org/nikki-0-dot-25-dot-1-lets-play-with-the-filesystem</id>
    <content type="html"><![CDATA[<p>In the last 24 hours I rolled out some changes
I actually personally needed to get way more
productive than ever on nikki, and leave my old-school
IDE turned off.</p>

<!-- more -->


<blockquote><p>If you are new to nikki, you might want to read
<a href="/last-weekend-i-wrote-an-ide-in-javascript/">this introductory post</a> I wrote a while ago.</p></blockquote>

<h2>What&rsquo;s new?</h2>

<p>Probably the most needed feature, at least by me,
is to be able to look for a text in files, and
it has been <a href="https://github.com/odino/nikki/commit/6e6540147d6c0d165ab0aad3d4ed7bd267eb9f5f">rudimentally implemented</a>
while  I will focus, in the next days, on how to
make this much more user-friendly: in any case,
by activating the search bar through <code>ctrl + shift + g</code>
you are going to search in <code>grep</code> mode, which means
that instead of looking by file name we are gonna
grep the content of those files.</p>

<p><img class="center" src="/images/nikki-0.25.1.png"></p>

<p>As you see in the screenshot above, Nikki then
returns you a list of files and highlights the matches:
what I  want to work on, then, is to be able to
click on those matches and open that file
at that specific line.</p>

<p>How about other changes?</p>

<ul>
<li>we are <a href="https://github.com/odino/nikki/commit/704927c369ef156d3d03d90af68853657328c5f4">watching the FS now</a>, so if you touch a file
from your terminal you&rsquo;ll magically see it appear in nikki!</li>
<li>when searching for files with <code>ctrl + shift +f</code> you are now gonna be able to also <a href="https://github.com/odino/nikki/commit/bae2c1b51617551bf814869e815a2eea1246a8cb">look for directories</a></li>
<li>generally improved the search: now <code>proj gu .js</code> will match <code>/path/to/projects/test/gulpfile.js</code></li>
<li>nikki will now show the current focus (filesystem / search / editor) right <a href="https://github.com/odino/nikki/commit/fb1d05f2eac3370348d41158a2e55c337d28a874">above the editor</a></li>
<li>added the <a href="https://github.com/odino/nikki/commit/17a4dd7a7c53a7fa5a6c360818857e35eb246143">awesome nikki logo</a></li>
<li>you can configure the <a href="https://github.com/odino/nikki/commit/5f2b680750bccac228e471fdb7b81762df8bde0c">keyboard shortcuts</a></li>
<li>you can now <a href="https://github.com/odino/nikki/commit/79f37e158417a9ea6b6dfa7a50f06b25a046cf4f">delete files and directories</a>: simply hover on a file and press <code>delete</code></li>
</ul>


<h2>What&rsquo;s fixed?</h2>

<ul>
<li>when you move between tabs, now nikki will <a href="https://github.com/odino/nikki/commit/d294446cc089207db143324a192827bcb636b65c">remember the position of the cursor</a> on each tab</li>
<li>issues while <a href="https://github.com/odino/nikki/commit/a38be0e0c14cab6036d52a585c165bcd34baf4dd">focusing on the filesystem</a></li>
<li>nikki <a href="https://github.com/odino/nikki/commit/36a820025db61a30e55735e733888d25fa2fe2c1">would epically crash</a> if you have an open tab that points to a file, you delete it, and then refresh nikki, as it couldn&rsquo;t  find the file</li>
<li>fixed <a href="https://github.com/odino/nikki/commit/1bce21bb0b60d7bbca1a3993d0b652cfff27178f">a crash</a> when re-opening a tab after closing all tabs</li>
<li>small, informative <a href="https://github.com/odino/nikki/commit/81c197f655cf4d06402ab5c930fc0bdb08e0bbd0">fixes</a></li>
</ul>


<h2>How do I get all this awesomeness?</h2>

<p>As simple as running an <code>npm install -g nikki</code> if this is the first time
you hear about it: for the ones who already have it installed on their
systems simply run a <code>npm update -g nikki</code>.</p>

<p>Then open a terminal, type <code>nikki</code> and let the show begin!</p>

<h2>What&rsquo;s  next?</h2>

<p>I&rsquo;m giving 100% priority to bugs before implementing new features:
given I&rsquo;m using nikki on a daily basis I usually find <a href="https://github.com/odino/nikki/issues?direction=desc&amp;labels=bug&amp;page=1&amp;sort=updated&amp;state=open">gotchas</a>
and fix them straight away.</p>

<p>If there are not gonna be too many fixes to do I will focus
on making the editor &ldquo;smarter&rdquo;, by improving the search in files
and adding find / find &amp; replace functionalities (the ACE editor
has built-in support for them, so shouldn&rsquo;t be that much of
a problem).</p>

<p>Keep an eye on the <a href="https://github.com/odino/nikki">github project</a> and let me know your feedback!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nikki 0.19.1: Awesomeness Won't Stop]]></title>
    <link href="http://odino.org/nikki-0-dot-19-dot-1-awesomeness-wont-stop/"/>
    <updated>2014-07-07T17:30:00+04:00</updated>
    <id>http://odino.org/nikki-0-dot-19-dot-1-awesomeness-wont-stop</id>
    <content type="html"><![CDATA[<p>Given it&rsquo;s Ramadan and we have some spare time at the
end of the day, I&rsquo;m getting the chance to be
<a href="https://github.com/odino/nikki/commits/master">quite active</a>
with the development of <a href="https://github.com/odino/nikki">Nikki</a>.</p>

<!-- more -->


<blockquote><p>If you are new to nikki, you might want to read
<a href="/last-weekend-i-wrote-an-ide-in-javascript/">this introductory post</a> I wrote a while ago.</p></blockquote>

<p>I figured out the best way to document these changes, besides
writing a blog post, would be to document them with
<a href="https://github.com/odino/nikki/issues?direction=desc&amp;page=1&amp;sort=updated&amp;state=closed">Github issues</a>
and by beefing up the <a href="https://github.com/odino/nikki/">README</a> &mdash; so
you should definitely have a look there.</p>

<h2>What&rsquo;s new?</h2>

<p><img class="center" src="/images/nikki-0.19.1.png"></p>

<p>The biggest change is that you are now gonna be running nikki
as a <a href="https://github.com/odino/nikki/commit/efecd05ab8a02406d63011e465850f2931ecef07">detached process</a>:
once you start nikki you will see it running on port <code>9123</code> (by default)
and you will be able to stop it with a simple <code>nikki --stop</code>; to
check whether nikki is running simply run a <code>nikki --status</code>.</p>

<p>This change was made possible using node&rsquo;s spawning capabilities
and <a href="https://github.com/substack/dnode">dnode</a>, which lets you
implement <a href="http://en.wikipedia.org/wiki/Remote_procedure_call">RPC</a>
in NodeJS: once you start nikki the main process spawns itself,
the spawned one listens on <code>9124</code> for signals and the main process
ends; when we issue <code>nikki --stop</code> we will just be sending a
<code>shutdown</code> signal to the spawned nikki
process through an RPC call.</p>

<p>Other changes?</p>

<ul>
<li>added the <code>ctrl + shift + l</code> shortcut to <a href="https://github.com/odino/nikki/commit/40899aaeecb70c02c1c1a00e566335d190508c2f">close editor tabs</a></li>
<li>once you re-open nikki, tabs that were open at the time you closed <a href="https://github.com/odino/nikki/commit/daa95c0efd3022b744016830e2f7995cea138a52">will be open again</a></li>
<li>using <a href="https://github.com/odino/nikki/commit/7e2f2baec4eb2aec7ba2980de2a82d8ab2b1bff5">jQuery 2.X</a></li>
<li>&ldquo;<a href="https://github.com/odino/nikki/commit/1a3fd2605ed6f325409fd8d489bd624a72d8a7af">open in github</a>&rdquo; you can now configure nikki so that
once you use the <code>ctrl + g</code> shortcut in a file it will open it, in github, in a new broser tab</li>
<li>added <a href="https://github.com/odino/nikki/commit/46e5c1881b6ca331b64cc470086f7af7936af69e">filesystem icons from fontawesome</a></li>
<li>when you search for files, now, the <a href="https://github.com/odino/nikki/commit/649106f5d491165b3e1c982cbb76e9967cb81c0d">file path will be shown next to the filename</a> (so if you have 3 <code>index.js</code> in your codebase&hellip;   &hellip;no worries anymore!)</li>
<li><a href="https://github.com/odino/nikki/commit/7db31f927b3027dfa1408e2af84b6806a6b91d12">debug mode</a>, so that you can troubleshoot problems in an easier way</li>
</ul>


<h2>What&rsquo;s fixed?</h2>

<ul>
<li>navigation used to show <a href="https://github.com/odino/nikki/commit/d829129992e5e42eed54f7f13492254f3b3df08d">incorrect</a> <a href="https://github.com/odino/nikki/commit/b463eab67816c8fa1c02d30af019e2a9628be458">paths</a></li>
<li>inconsistencies with the <a href="https://github.com/odino/nikki/commit/4450b27ea477f119b3d7a32a27a37606687ccae0">file search</a></li>
<li><a href="https://github.com/odino/nikki/commit/041397e71198599cc6c4a2ec06a706aff0c72623">shortcuts conflicts</a> with the ACE editor</li>
</ul>


<h2>How to get all these changes?</h2>

<p>As simple as running an <code>npm install -g nikki</code> if this is the first time
you hear about it: for the ones who already have it installed on their
systems simply run a <code>npm update -g nikki</code>.</p>

<p>Then open a terminal, type <code>nikki</code> and let the show begin!</p>

<h2>What&rsquo;s next?</h2>

<p>I will be implementing filesystem operations in these days (delete / create
files and folders) and probably refactor some of the key frontend components, like
the keyboard shortcuts.</p>

<p>Keep an eye on the <a href="https://github.com/odino/nikki">github project</a> and let me know your feedback!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Emailvision's CampaignCommander APIs From PHP]]></title>
    <link href="http://odino.org/using-emailvisions-campaigncommander-apis-from-php/"/>
    <updated>2013-06-28T18:38:00+04:00</updated>
    <id>http://odino.org/using-emailvisions-campaigncommander-apis-from-php</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/emailvision-template.png"></p>

<p>This weekend I finally had the chance to
work a couple hours on the <code>namshi/emailvision</code>
library, which lets you integrate CampaignCommander
as (email) notification solution in your
PHP projects.</p>

<p>I already had a proof-of-concept of this library since weeks,
and it was already pushed to Github, but since I had no
valid API account to do some integration tests, I
could not really &ldquo;publicize&rdquo; it.</p>

<p>Right now I refactored the library and added a couple integration
tests which are working flawlessy, so, in this post, I&rsquo;m
going to show you how easy it is to send emails with
Emailvision&rsquo;s solution directly from PHP.</p>

<!-- more -->


<h2>Installation</h2>

<p>As usual with the latest libraries built for PHP,
the installation can simply be done with composer,
as the library itself is available over
<a href="https://packagist.org/packages/namshi/emailvision">packagist</a>:</p>

<p><code>bash composer.json
"namshi/emailvision": "dev-master"
</code></p>

<p>then you simply have to run a <code>php composer.phar update</code> and
you can start utilizing it in your codebase (the namespace is
<code>Namshi\Emailvision</code>, as this library has been built in the
context of our company, <a href="http://en-ae.namshi.com">namshi.com</a>).</p>

<p>As of today, the latest stable release is <code>1.0.0</code>, which is the
one we recommend to run in production &ndash; keep an eye on packagist
if we come up with changes, but I bet it won&rsquo;t change that much
in the near future, as emailvision&rsquo;s API is pretty simple.</p>

<h2>Usage</h2>

<p>After you configure transactional email templates in the
CampaignCommander web interface, you just need to keep in mind
(and in your code) the unique identifier and the security tag
of the template; the rest is very straightforward:</p>

<p>``` php
&lt;?php</p>

<p>use Namshi\Emailvision\Client;</p>

<p>$config = array(</p>

<pre><code>'random'            =&gt; 'UNIQUE_IDENTIFIER',
'encrypt'           =&gt; 'SECURITY_TAG',
'senddate'          =&gt; new \DateTime(),
'uidkey'            =&gt; 'EMAIL',
'stype'             =&gt; 'NOTHING',
</code></pre>

<p>);</p>

<p>$emailvisionClient = new Client($config);
$emailvisionClient->sendEmail(&ldquo;<a href="&#109;&#97;&#105;&#108;&#x74;&#x6f;&#x3a;&#115;&#x6f;&#x6d;&#101;&#111;&#x6e;&#101;&#x40;&#103;&#x6d;&#97;&#x69;&#108;&#46;&#x63;&#x6f;&#109;">&#x73;&#x6f;&#x6d;&#101;&#x6f;&#110;&#x65;&#x40;&#103;&#x6d;&#x61;&#x69;&#108;&#46;&#x63;&#111;&#109;</a>&rdquo;);
```</p>

<p>The nice thing here is that Emailvision lets you schedule
emails, so you can just play with the <code>senddate</code> parameter
and set it to the future &ndash; just be aware that it needs to
be a <code>DateTime</code> instance:</p>

<p>``` php
&lt;?php</p>

<p>use Namshi\Emailvision\Client;</p>

<p>$date = new \DateTime(&lsquo;2025-01-01 12:45:00&rsquo;);</p>

<p>$config = array(</p>

<pre><code>'random'            =&gt; 'UNIQUE_IDENTIFIER',
'encrypt'           =&gt; 'SECURITY_TAG',
'senddate'          =&gt;  $date,
'uidkey'            =&gt; 'EMAIL',
'stype'             =&gt; 'NOTHING',
</code></pre>

<p>);</p>

<p>$emailvisionClient = new Client($config);
$emailvisionClient->sendEmail(&ldquo;<a href="&#x6d;&#97;&#x69;&#108;&#x74;&#x6f;&#x3a;&#115;&#x6f;&#x6d;&#101;&#111;&#110;&#101;&#x40;&#103;&#x6d;&#x61;&#x69;&#x6c;&#46;&#99;&#x6f;&#109;">&#x73;&#111;&#109;&#101;&#111;&#110;&#101;&#x40;&#103;&#x6d;&#x61;&#105;&#108;&#46;&#99;&#x6f;&#x6d;</a>&rdquo;);
```</p>

<p>This code will tell CampaignCommander to trigger
the email on the 1st of January 2025, at 12:45.</p>

<h2>Dynamic content in your emails</h2>

<p>If we would stop here, the library would be pretty
useless, since the power of transactional emails
is to be able to serve dynamic content: in fact, the API
allows you to pass as much variables as you want
that can be configured and used in the email templates
you&rsquo;ve created in emailvision&rsquo;s web interface.</p>

<p>To do so, once you call the <code>sendEmail</code> method of the
client, just pass an array of variables (strings) as second
argument:</p>

<p>``` php
&lt;?php</p>

<p>$emailvisionClient->sendEmail(&ldquo;<a href="&#109;&#x61;&#105;&#108;&#116;&#111;&#x3a;&#115;&#x6f;&#x6d;&#101;&#x6f;&#110;&#101;&#64;&#x67;&#x6d;&#97;&#x69;&#x6c;&#46;&#99;&#111;&#x6d;">&#115;&#111;&#109;&#101;&#111;&#x6e;&#101;&#64;&#x67;&#109;&#97;&#x69;&#108;&#x2e;&#x63;&#x6f;&#109;</a>&rdquo;, array(</p>

<pre><code>'name' =&gt; 'Alex!',
</code></pre>

<p>));
```</p>

<p>and then you will start receiving personalized emails:</p>

<p><img class="center" src="/images/emailvision-received.png"></p>

<h2>Running the tests</h2>

<p>Of course, we&rsquo;ve added some unit and <strong>integration</strong>
tests which let us refactor the library and add
functionalities to it without regressions; to run
the test suite, just use <code>phpunit</code>:</p>

<p>``` bash
cd /path/to/namshi/emailvision</p>

<p>phpunit
```</p>

<p>You will notice that even though the tests should contain
some actual HTTP calls, they are very fast: this is because,
unless you provide some real credentials for emailvision,
integration tests aren&rsquo;t run by default.</p>

<p>To run them, you will have to create a new dummy email template
on CampaignCommander and store the credentials you get
after saving it and the email address that is going to
receive the test emails in a file named <code>emailvision.config</code>
in your system&rsquo;s temporary folder (you can get it by
running <code>php -r "echo sys_get_temp_dir();"</code>):</p>

<p>``` php /tmp/emailvision.config
&lt;?php</p>

<p>$encrypt    = &lsquo;email_template_security_tag&rsquo;;
$random     = &lsquo;email_template_unique_id&rsquo;;
$email  = &lsquo;<a href="&#109;&#97;&#x69;&#108;&#116;&#111;&#x3a;&#x79;&#x6f;&#x75;&#x72;&#x2e;&#x61;&#x64;&#x64;&#x72;&#x65;&#115;&#x73;&#64;&#103;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#111;&#109;">&#x79;&#x6f;&#117;&#x72;&#46;&#x61;&#x64;&#100;&#114;&#101;&#x73;&#x73;&#64;&#103;&#109;&#x61;&#105;&#x6c;&#46;&#99;&#111;&#109;</a>&rsquo;;
```</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Back in Track With OrientDB]]></title>
    <link href="http://odino.org/back-in-track-with-orientdb/"/>
    <updated>2012-04-20T15:26:00+04:00</updated>
    <id>http://odino.org/back-in-track-with-orientdb</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a while since I don&rsquo;t release any update about
Orient, the PHP data mapper for OrientDB: we recently got
back on track and I have a few interesting news.</p>

<!-- more -->


<p>I just moved to Dubai, as you may know, so the last couple
of months have been a huge mess for me, while David was
doing some <a href="https://github.com/congow/Orient/tree/persistence">major experiments</a>
for the library: we only had the time, at the end of March,
to talk about OrientDB and the ODM at the
<a href="http://www.slideshare.net/ingdavidino/graph-db-inphp">Codemotion</a>.</p>

<p>Since in the last week we restarted pairing together to
finalize a few open things in the library, I will explain what
is the current status of Orient.</p>

<h2>Beta-5</h2>

<p>We decided to put back our effort on the <code>beta-5</code> release,
instead of letting me complete the issues still belonging
to this version by myself.</p>

<p>In these days we are finalizing the integration tests for
OrientDB&rsquo;s native data types, and refactoring a bit the
implementation of the <strong>hydration mechanism</strong>, which will be more
configurable: we will release an ODM able to let the developer
decide what to do when an hydration error occurs (in other words,
you mapped an attribute as integer but in the OrientDB record
that attribute is mistakenly set as a date): before this
refactoring process <code>null</code> was returned by default, but now
you&rsquo;ll be able to decide whether to <a href="https://github.com/congow/Orient/blob/master/src/Congow/Orient/Formatter/Caster.php#L520">force the casting or raise an exception</a> for these errors.</p>

<p>As we complete these 2 tasks, we will remove the TODOs from
the codebase and then we will release this version which,
I remind it for those who are not up-2-date with the library&rsquo;s
lifecycle, is the one introducing <strong>hydration</strong>, which is the
ability to run SQL queries against an OrientDB instance and map
the results as PHP objects.</p>

<p>Similarly to Doctrine2, Orient offers the ability to map objects
from PHP to OrientDB via annotations:</p>

<p>``` php
&lt;?php</p>

<p>use Congow\Orient\ODM\Mapper\Annotations as ODM;</p>

<p>/<em>*
* @ODM\Document(class=&ldquo;Address&rdquo;)
</em>/
class Address
{</p>

<pre><code>/**
 * @ODM\Property(type="link")
 */
public $city;
</code></pre>

<p>}</p>

<p>```</p>

<h2>Doctrine ODM</h2>

<p>From the beginning, we&rsquo;ve been committed in finding a way to make
<a href="https://github.com/congow/Orient/blob/master/src/Congow/Orient/Contract/Protocol/Adapter.php#L23">interoperability</a>
a feature of Orient: another side of this issue is the fact that
we tried to stick to Doctrine2&rsquo;s design for lots of our problems,
from the implementation of mapping to lazy-loading through
auto-generated proxy classes.</p>

<p>In the last weeks I pro-actively asked the Doctrine2 community if they
would be happy in welcoming this project in their community, and the
responses we received were positive: as a result, after going out with
the <code>beta-5</code> release we will refactor the library&rsquo;s namespaces and move
the repository on Github.</p>

<p>There will be lots of things to do, lot of code to refactor, lot of
complaints from the Doctrine2 core members because of our &ldquo;strange&rdquo;
code, but this is a huge step towards a more robust PHP library
for OrientDB.</p>

<h2>Beta-6</h2>

<p>After the incubation inside the Doctrine organization we will re-start
working on the <code>beta-6</code> version, which will bundle <strong>persistence</strong> &ndash; the
ability to persist mapped PHP objects into OrientDB, using a couple
well known design patterns like the <a href="http://martinfowler.com/eaaCatalog/unitOfWork.html">unit of work</a>
and the <a href="http://martinfowler.com/eaaCatalog/identityMap.html">identity map</a>.</p>

<p>I won&rsquo;t commit myself in an estimate: <strong>this will take a long time</strong>,
especially if only me and <a href="http://davidfunaro.com">David</a> will keep
the good work on this library.</p>

<p>But since we had <strong>huge contributions</strong> from
<a href="https://github.com/nrk">Daniele Alessandri</a> and
are gonna be part of the Doctrine community, I bet we will be able to
deliver what promised in less than then what I currently think.</p>

<h2>RC</h2>

<p>Last but not least, there will be a few planned refactorings and feature
add-ons that we don&rsquo;t need now but are mandatory for a decent stable
version, which will come as we roll out our first <code>RC</code>.</p>

<h2>Thanks, again</h2>

<p>I could not keep my effort and motivation constant during
<a href="https://github.com/congow/Orient/commit/65929ec57a2e2cb1f4af034d722e17b5339b9d48">this year</a>
without your many &ldquo;thank you&rdquo;, your enthusiasm and
encouraging words: this is what makes me eager to type
with my fat fingers new LoCs dealing with PHP and NoSQL.</p>

<p>This won&rsquo;t be a library I wrote<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>, this is something an entire
community was waiting for and contributed to.</p>

<p>So, <em>thank y'all</em>.</p>

<p><div class="footnotes">
<span>
Notes
</span>
	<ol>
		<li id='fn:1'>Although I still remember the first commit on Github: I was only wearing my underwear, alone in the hall of my flat <a href='#fnref:1' rev='footnote'>↩</a></li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Y U NO Access WHOIS Informations in PHP?]]></title>
    <link href="http://odino.org/y-u-no-access-whois-informations-in-php/"/>
    <updated>2012-04-16T00:38:00+04:00</updated>
    <id>http://odino.org/y-u-no-access-whois-informations-in-php</id>
    <content type="html"><![CDATA[<p><ol class="aseries">
	<p>This post is part of the "<strong>WHOIS in PHP: consuming the Robowhois API</strong>" series; here is a list of all the articles contained this series:</p>
	<li>
		<a href="/a-php-library-to-retrieve-whois-informations/">A PHP library to retrieve WHOIS informations</a>
	</li>
	<li>
		<a href="/retrieving-raw-whois-informations-in-php/">Retrieving raw WHOIS informations in PHP</a>
	</li>
	<li>
		<a href="/checking-a-domain-s-availability-with-php/">Checking a domain's availability with PHP</a>
	</li>
  <li>
    <a href="/y-u-no-access-whois-informations-in-php/">Y U NO access WHOIS informations in PHP?</a>
  </li>
</ol>
</p>

<p>In these days we finalized the last parts of the official
<a href="https://github.com/robowhois/robowhois-php">PHP client for the Robowhois API</a>
, and here are the changes for the <code>0.9.0</code> version.</p>

<!-- more -->


<h2>Parts and properties API</h2>

<p>As part of our job, we needed to implement the last
2 API endpoints provided by Robowhois, <code>properties</code>
and <code>parts</code>.</p>

<p>Everything is documented in the
<a href="https://github.com/robowhois/robowhois-php/blob/master/README.md">README</a>
but you can also follow the examples under the <code>sample/</code> directory:</p>

<p>``` php Using the properties API
&lt;?php</p>

<p>use Robowhois\Robowhois;
use Robowhois\Exception;</p>

<p>require &lsquo;vendor/.composer/autoload.php&rsquo;;</p>

<p>$robowhois = new Robowhois(&lsquo;INSERT-YOUR-API-KEY-HERE&rsquo;);</p>

<p>try {</p>

<pre><code>$domain = $robowhois-&gt;whoisProperties('robowhois.com');

echo $domain['properties']['created_on'] . "\n";
</code></pre>

<p>} catch (Exception $e) {</p>

<pre><code>echo "The following error occurred: " . $e-&gt;getMessage();
</code></pre>

<p>}
```</p>

<p>``` php Using the parts API
&lt;?php</p>

<p>use Robowhois\Robowhois;
use Robowhois\Exception;</p>

<p>require &lsquo;vendor/.composer/autoload.php&rsquo;;</p>

<p>$robowhois = new Robowhois(&lsquo;INSERT-YOUR-API-KEY-HERE&rsquo;);</p>

<p>try {</p>

<pre><code>$domain = $robowhois-&gt;whoisParts('robowhois.com');

echo $domain['parts'][0]['body'] . "\n";
</code></pre>

<p>} catch (Exception $e) {</p>

<pre><code>echo "The following error occurred: " . $e-&gt;getMessage();
</code></pre>

<p>}
```</p>

<h2>Magic objects, behaving like arrays</h2>

<p>We implemented the <code>\ArrayObject</code> interface for the objects
returned by the API, which means that now you can access
the results of an API call just like an array:</p>

<p>``` php
&lt;?php</p>

<p>$account = $robowhois->account();</p>

<p>// $account is an instance of Robowhois\Account
echo sprintf(&lsquo;You have %d API calls left&rsquo;, $account[&lsquo;credits_remaining&rsquo;]);
```</p>

<p>but, for those like us who like the OO synthax, we implemented
some magic to let you retrieve those values via getters, which
are built <em>on-the-fly</em> thanks to PHP&rsquo;s <code>__call()</code> method:</p>

<p>``` php
&lt;?php</p>

<p>echo $account->getCreditsRemaining();
```</p>

<p>Getters are a camelized version of the array keys, and are
built thanks to the
<a href="https://github.com/robowhois/robowhois-php/blob/master/composer.json#L28">Doctrine Inflector</a>.</p>

<h2>Mapping the existing API</h2>

<p>We renamed the methods accessing the API in order to 100% reflect
the ones exposed by the API, also used in the
<a href="https://github.com/robowhois/robowhois-ruby">Ruby client</a>: so now the
<code>Robowhois\Robowhois</code> object has:</p>

<ul>
<li><code>-&gt;account()</code></li>
<li><code>-&gt;whois()</code></li>
<li><code>-&gt;whoisProperties()</code></li>
<li><code>-&gt;whoisParts()</code></li>
<li><code>-&gt;whoisRecord()</code></li>
<li><code>-&gt;whoisAvailability()</code></li>
</ul>


<h2>Simplified exceptions</h2>

<p>We initially added tons of exceptions but we eventually
decide to keep the only <code>Robowhois\Exception</code> class.</p>

<h2>Now?</h2>

<p>Wanna retrieve WHOIS informations in PHP at a
<a href="http://www.robowhois.com/pricing">decent price</a>?</p>

<p>Start consuming the Robowhois APIs, with PHP.</p>
]]></content>
  </entry>
  
</feed>