<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Category: Teams | Alessandro Nadalin]]></title>
  <link href="http://odino.org/blog/categories/teams/atom.xml" rel="self"/>
  <link href="http://odino.org/"/>
  <updated>2014-07-06T00:10:32+04:00</updated>
  <id>http://odino.org/</id>
  <author>
    <name><![CDATA[Alessandro Nadalin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My Experience With Our Development Team in Dubai: In Between Business, SOA and Sun]]></title>
    <link href="http://odino.org/my-experience-with-our-development-team-in-dubai-in-between-business-soa-and-sun/"/>
    <updated>2013-03-29T18:08:00+04:00</updated>
    <id>http://odino.org/my-experience-with-our-development-team-in-dubai-in-between-business-soa-and-sun</id>
    <content type="html"><![CDATA[<p>Today I had the opportunity to share with the
people at the <a href="http://www.phptostart.it/">PHP.TO.START</a>
in Turin my 1-year experience in Namshi, one of
Rocket Internet&rsquo;s ventures in the Middle East.</p>

<!-- more -->


<p><img class="left" src="/images/phptostart2013.jpg"></p>

<p>Luckily, this was a great opportunity to meet some good
old friends and the talk went very well: of course,
the reharsal at the <a href="http://roma.grusp.org">PHP User Group in Rome</a>
earlier this week was a bless.</p>

<p>It basically deals with the phases that I experienced
with our team in Namshi, with some spicy details on
recruiting (from looking for talents to conducting
interviews), how to <strong>change processes to help people improving</strong>
(and not change people to improve processes) and
a big picture on what we were able to plan and achieve
in this year together, from a technical point of view.</p>

<p>At the end of the talk I invited everyone interested, and
I will repeat myself here, to look for the open positions
on <a href="http://en-ae.namshi.com/careers/">our careers site</a>,
since we are currently hiring a Lead Developer and a
PHP Developer (a junior or an intermediate, it&rsquo;s more
about the approach rather than the hands-on experience).</p>

<p>Here are the slides of the talk, in a slightly better (and more colored)
version compared to the ones I used in Rome:</p>

<iframe src="http://www.slideshare.net/odino/slideshelf" width="760px" height="570px" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:none;" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coding Bureaucracy]]></title>
    <link href="http://odino.org/coding-bureaucracy/"/>
    <updated>2012-12-05T12:23:00+04:00</updated>
    <id>http://odino.org/coding-bureaucracy</id>
    <content type="html"><![CDATA[<p>An interesting quote from an ex-Microsoft:
it can take up to <strong>several months</strong>
before you get an approval over a
technical issue.</p>

<!-- more -->


<p><blockquote><p>In my short time at Microsoft, any project that desired to use an open source library, such as jQuery, would require approval from the organization&rsquo;s legal team. There were of course political strategies to speed up the process, but it could take as long as six months just to gain approval to use the code in a project. The implicit alternative to this draconian dilemma, naturally, is write substitute code for the OSS that perpetually seems out of reach.</p><footer><strong>Matt J. Sorenson <a href="http://www.quora.com/Software-Engineering/How-long-does-it-take-a-large-tech-company-to-push-a-single-line-of-code-to-production">http://www.quora.com/Software-Engineering/How-long-does-it-take-a-large-tech-company-to-push-a-single-line-of-code-to-production</a> How long does it take a large tech company to push a single line of code to production</strong></footer></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Source Code Workflow After 3 Months of Github]]></title>
    <link href="http://odino.org/source-code-workflow-after-3-months-of-github/"/>
    <updated>2012-08-05T23:16:00+04:00</updated>
    <id>http://odino.org/source-code-workflow-after-3-months-of-github</id>
    <content type="html"><![CDATA[<p>When I joined <em>Rocket Internet</em> 4 months ago,
here in Dubai, the team was about to experience
the transition from the very old SVN to Git, with
everything hosted on <a href="https://github.com">Github</a>.</p>

<p>In this post I try to wrap-up the impressions
of the team and the changes in the lifecycle of
our source code with the adoption of the
Git+Github combo.</p>

<!-- more -->


<p><img class="right" src="/images/github.png"></p>

<h2>Premise</h2>

<p>We had our first meeting about the switch to Git
after our CTO migrated our repositories from
our hosted SVN repos to Github with
<a href="http://www.kernel.org/pub/software/scm/git/docs/git-svn.html">git-svn</a>.</p>

<p>In that meeting &ndash; useful for a lot of people who
never used Git before &ndash; we explained the basic
stuff that you should know to get started with
this VCS:</p>

<ul>
<li>distribute vs centralized versioning system</li>
<li>Github act as a remote</li>
<li><code>commit</code> is local</li>
<li><code>push</code>, <code>pull</code> and <code>fetch</code></li>
<li>rebasing</li>
<li>branching and merging</li>
<li><a href="http://nvie.com/posts/a-successful-git-branching-model/">gitflow</a></li>
</ul>


<p>All in all we wanted to follow gitflow but at the
end it turned out that in some parts we had to simplify
the workflow and add more complexity somewhere else:
keep reading to get more insights.</p>

<h2>Our development workflow</h2>

<p>So let&rsquo;s say that today we have <code>master</code> and <code>dev</code> aligned:</p>

<ul>
<li><code>master</code> is an <em>always-ready-to-be-released</em> branch, in which
you commit code that is tested and works on production: the aim is
to have a solid fallback if you deploy and need to rollback ( <a href="https://github.com/capistrano/capistrano/wiki/">capistrano</a>
would probably be a better solution, since it&rsquo;s more immediate, but
again you need an history of working versions )</li>
<li><code>dev</code> branches from <code>master</code>: it&rsquo;s the integration branch, where
you merge features developed for your next release</li>
</ul>


<p>As the days go by, people will branch from develop to
implement new features/fix bugs:</p>

<p><code>bash
git checkout develop
git checkout -b bug-1123
</code></p>

<p>The developer is free to handle its <em>ticket</em> with both
local and remote branches: although pushing to the remote
makes <a href="http://ariejan.net/2011/07/05/git-squash-your-latests-commits-into-one/">squashing</a> harder, I would always recommend to push
every day.</p>

<p>Let&rsquo;s say that the bugfixing seems done and we are ready
to include that code in the <code>develop</code>, which is gonna lead
to our next release: the developer now opens a <a href="https://help.github.com/articles/using-pull-requests/">pull request</a>
from its branch to <code>develop</code>:</p>

<p><img class="center" src="/images/pull-request.jpeg"></p>

<p>It&rsquo;s always useful to name the PR like <code>TICKET-ID Headline</code>
and add a few more comments to explain your changes, if it&rsquo;s worth it:
given that you <strong>name your branches after the tickets</strong> that they
implement/fix, adding the ticket ID to the PR&rsquo;s title lets
who needs to merge it into develop to directly copy the branch
name from Github &ndash; otherwise you need to type it manully<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>.</p>

<p>The release manager ( who reviews PRs and merges them into
the integration branch ) can now have a look at your PR,
comment it and accept or reject it:</p>

<ul>
<li>if it&rsquo;s accepted it gets merged and the ticket status
changes from <code>bugfixing</code><sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup> to <code>Ready for QA</code></li>
<li>if rejected it&rsquo;s re-assigned back to the developer, and
technical comments are added <strong>directly on Github</strong></li>
</ul>


<p><code>bash After the release manager has positively evaluated your PR, ctrl+c on the branch name...
git fetch
git checkout TICKET-ID
git checkout develop
git merge --no-ff TICKET-ID
</code></p>

<p><img class="left" src="/images/pull-request-namshi.png"></p>

<p>Now times has come to go live with a set of changes:
a <strong>release branch</strong> is created and we tag version
<code>X.Y.Z-beta1</code>, that is gonna be deployed in the first
development environment ( sort of pre-staging ).</p>

<p>If some tests are not passing, the developers add the
related fixes and open the PRs in the release branch
( <code>release-X.Y.Z</code> ), so we re-tag and redeploy ( <code>X.Y.Z-beta2</code> ):
if someone is working on other tickets, which don&rsquo;t have to
be included in version <code>X.Y.Z</code>, the integration branch
is still <code>develop</code>.</p>

<p>After this, a new tag <code>X.Y.Z-rc1</code> is deployed into the
staging environment: if everything is good we create a
new tag, <code>X.Y.Z</code> and go live with it.</p>

<p>After a few hours, we can consider this tag <strong>valid</strong>
and update both <code>master</code> and <code>develop</code>:</p>

<p><code>bash
git checkout master
git merge --no-ff X.Y.Z
git push origin master
git checkout develop
git rebase master
git push -f origin develop
</code></p>

<p>The development cycle starts again.</p>

<h2>Critical paths</h2>

<p>There are some problematic aspects to consider when
you are working with almost 10 people daily pushing/pulling
from the same remote:</p>

<ul>
<li>when you rebase <code>develop</code>, pull request can include old commits
that are already merged, so you just need to ask for a rebase of the
PR&rsquo;s branch</li>
<li>when you rebase <code>develop</code>, always ask people to pull the remote
develop in their local ones, otherwise they will be working with a
different tree ( after the rebase Git is not smart enough to
connect the pre-rebase and after-rebase trees )</li>
<li>if you need to do an hotfix deployment, always branch from
<code>master</code> or the release branch ( if the related tag wasn&rsquo;t merged into
<code>master</code> ): you don&rsquo;t want to <code>cherry-pick</code> commits and then
manually update the PR which takes care of the hotfix</li>
</ul>


<h2>Conclusions</h2>

<p>All in all I think our process has improved so much: first of all
we see less conflicts, thanks to the Git engine<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>, second we have more <strong>control,
transparency and visibility</strong> towards code: being able to comment
every single line of code on Github really helps you when you need
to handle several PRs at once; not to mention the fact that doing
<strong>release-management is way easier</strong>.</p>

<p>By the way, pull request are another good stage of the workflow, since
they let the developer take a final look at the code, review it for
the last time and explain it in the PR message, something that with
SVN and SVN-based services ( like GH ) was <strong>nearly impossible</strong>.</p>

<p>Additionally, coming from Atlassian&rsquo;s hosted services, Github gives
you the reliability I always missed: no apparent downtime so far
and pulling/pushing is really fast; compared to SVN,
this is a huge win for us.</p>

<p>At the end I&rsquo;d say that <strong>we almost doubled our potential</strong> with
these changes, and I think it&rsquo;s 50% because of Git and another 50%
&lsquo;cause of Github: if you don&rsquo;t use them, I definitely recommend
you to switch as soon as possible<sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup>.</p>

<p><div class="footnotes">
<span>
Notes
</span>
	<ol>
		<li id='fn:1'>We use &lsquo;bigfixing&rsquo; both for new features and bugs, it&rsquo;s just to identify a status in which the developer is working on the ticket <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>Github&rsquo;s markup makes it difficult to <code>ctrl+c</code> it from the &ldquo;You&rsquo;re asking @user to merge 1 commit into repo:develop from repo:TICKET-ID&rdquo; string <a href='#fnref:2' rev='footnote'>↩</a></li><li id='fn:3'>But this can just be just my personal feeling <a href='#fnref:3' rev='footnote'>↩</a></li><li id='fn:4'>BitBucket is a pretty cheap alternative to Github <a href='#fnref:4' rev='footnote'>↩</a></li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wanna Be Hired? Go Get Yourself a Blog and a Github Profile]]></title>
    <link href="http://odino.org/wanna-be-hired-go-get-yourself-a-blog-and-a-github-profile/"/>
    <updated>2012-03-27T11:32:00+04:00</updated>
    <id>http://odino.org/wanna-be-hired-go-get-yourself-a-blog-and-a-github-profile</id>
    <content type="html"><![CDATA[<p>As part of my last days in <a href="http://dnsee.com">DNSEE</a> and first days in
<a href="http://rocket-internet.de">Rocket</a> I&rsquo;m involved in two recruitment processes
and after the huge amount of CVs we got for DNSEE after the
<a href="http://www.codemotion.it/">Codemotion</a> I thought it would be good to
share some thoughts about <strong>my</strong> recruiting habits.</p>

<!-- more -->


<h2>European format</h2>

<p>First of all, <strong>forget about the <a href="http://en.wikipedia.org/wiki/Europass">european CV format</a></strong>:
it works when you want to work in a body rental Java company and want to
be identified with a mere number (and if you want to end up like that,
stop reading this article)<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.</p>

<p><img class="left" src="/images/hipster.glasses.jpg"></p>

<p>Some months ago someone on Twitter was suggesting to move the CV on
<a href="http://slideshare.net">slideshare</a>, something I really wanted to do &ndash; but
I never took the time to do so: bare in mind that reading a CV can be
funny at the beginning of the hiring process, but as you get tons of
applies, it becomes &ndash; as everything &ndash; a repetitive, thus annoying,
activity, so putting a bit of creativity on your CV will be considered
as a huge plus; <strong>the more you attract, the less you&rsquo;ll be considered
the average</strong>.</p>

<p>The european format just does not work when you need to highlight
your motivation and expertise you have on interesting practices,
which is what I basically look for, at least for a first glance.</p>

<h2>It&rsquo;s not where you worked unless it was The Place</h2>

<p><img class="right" src="/images/virgin.jpg"></p>

<p>It&rsquo;s pretty common to see dozens of working experiences in a CV,
without a deep description of the position held and a summary of
your daily duties.</p>

<p>Do you think people care about <strong>where</strong> you worked or <strong>what</strong> you did?</p>

<p>Unless you have been working for some major, people won&rsquo;t care about
your employer because it will never add anything to your profile, it&rsquo;s
just a (bad) sign that you worked for N years at this place.</p>

<p>What I suggest is to <strong>add various aspects of your working experience</strong>,
like big customers you had to deal with, good practices like TDD or
&ndash; in general &ndash; automated test and what you brought inside the company,
like a new approach to development or a (new) technology which was
suitable for their use-case.</p>

<h2>Ideal code VS production one</h2>

<p><blockquote><p>Any developer can show you diamonds, but a few are able not to deliver crap to your customers.</p></blockquote></p>

<p>Let&rsquo;s be honest for a moment: <strong>production code isn&rsquo;t ideal code</strong><sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>.</p>

<p>Technical debt is something we are used to deal with and it&rsquo;s not <em>that</em> big issue:
I like when developers admit that under difficult circumstances,
they took creepy shortcuts to overcome an issue which needed to
be fixed in a relatively short amount of time.</p>

<p>So, given that you won&rsquo;t show your next employer your production code
(since it is intellectual property of your current company or customers)
it would be nice if you show them the top line of your skiils, maybe
via a Github profile; doing so, you give the chance to take a
look at your best code.</p>

<p><img class="right" src="/images/hand.jpg"></p>

<h2>Why don&rsquo;t you share your thoughts with me?</h2>

<p>A big plus would be reading your blog wherever &ndash; blogspot,
posterous, etc &ndash; to gain confidence with your ideas and
what you like to talk about when not (necessarily) coding
for your current company.</p>

<p>Blogging, also once in a month, gives you the possibility
to be evaluated without the need to do anything: reading your
posts will make recruiters get in touch with you, as a person,
your style, coding skills, aims and so on.</p>

<h2>MS Excel, really?</h2>

<p>Please stop mentioning know-how on the following subjects:</p>

<ul>
<li>MS Word</li>
<li>MS Excel</li>
<li>Photoshop</li>
<li>Dreamweaver</li>
<li><em>stuff like that</em></li>
</ul>


<p>because they will make you look like <strong>a developer who doesn&rsquo;t understand
its precise scope</strong>.</p>

<h2>So what?</h2>

<p>Do I have to mention that I would like to see great people joining me
and <a href="http://www.linkedin.com/company/rocket-internet-gmbh/careers">Rocket</a>
in Dubai or my former <a href="http://www.linkedin.com/company/dnsee/careers">DNSEE colleagues</a>
in Rome?</p>

<p>I did it :)</p>

<p><div class="footnotes">
<span>
Notes
</span>
	<ol>
		<li id='fn:1'>I give this advice although I have an Europass CV, but &ndash; as I like to say &ndash; it&rsquo;s a raped-european-format CV, so not as standard as you might think <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>Since production code has a deadline and ideal code is a never-ending refactoring, I won&rsquo;t listen to any objection here <a href='#fnref:2' rev='footnote'>↩</a></li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Argue With Junior and Stubborn Developers]]></title>
    <link href="http://odino.org/how-to-argue-with-junior-and-stubborn-developers/"/>
    <updated>2012-02-23T12:00:00+04:00</updated>
    <id>http://odino.org/how-to-argue-with-junior-and-stubborn-developers</id>
    <content type="html"><![CDATA[<p>In these days I had a nice chat with
<a href="http://www.linkedin.com/in/gogebakan">Önder Göğebakan</a> to exchange
some views about <strong>team leading</strong>: one of the points I loved to face
was how to deal with arrogant coders that <strong>don&rsquo;t want to consider
the indications received from their technical lead</strong>.</p>

<!-- more -->


<h2>Pulling responsabilites is not that bad</h2>

<p>It makes no difference the reason why the developers is going against your
opinion/advice/dictation: it may be due to inexperience or attitude, and this
is not <em>that</em> bad.</p>

<p><img class="right" src="/images/rooster.jpg"></p>

<p>A developer which pulls responsabilities shows a good attitude, as it
demonstrates that he wants to take a decision based on different variables
evaluated differently than you: passive coders<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup> are just a bad
smell within your organization, because they won&rsquo;t ever be as productive
as you might need; don&rsquo;t get me wrong on this: <strong>passive developers are
a valuable asset</strong>, as you can&rsquo;t rely on a team of cocks, but you
shouldn&rsquo;t hire too many passives, since, in a team of 4~6 people there
will be room for 1, maybe 2, washermen.</p>

<p>Push systems are just a bad idea: if you throw duties and responsabilities
to your developers they won&rsquo;t feel comfortable with them and will suddenly
fear the assigned tasks; make a developer pull his responsabilities and you
will be able to work in a strongy energized, motivated, self aware and
fast growing team<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>.</p>

<p>If you will ever be in troubles when a proactive developer go against
your decision, I want to share with you a few thoughts on that.</p>

<h2>Use exampl&hellip;your experience</h2>

<p>Being a CTO, team leader, technical fellow or whatever, you gained
so much experience from your previous &ldquo;developer&rsquo;s years&rdquo; that you have
an unvaluable knowledge about problem solving, and when I say
unvaluable I mean that there&rsquo;s no inexperienced brain that could
overcome a seasoned veteran.</p>

<p><img class="left" src="/images/jordan.jpg"></p>

<p>Think about the way you solved that technical problem earlier in your
career and start adding examples to your cause: don&rsquo;t pretend to
think that this new problem &ldquo;it&rsquo;s just the same I saw in <code>some company</code>
back in 2001&rdquo;, because the developer will think that your are
just scratching the surface of the issue and will look at you
with no trust.</p>

<p>When Michael Jordan got back into the NBA for the second time,
with the partially self-owned team of the Washington Wizards,
he was 38, and wasn&rsquo;t able to provide the physical strength,
speed and responsiveness that he had back on his 20s.</p>

<p>Although all of this, the great thing that Mike did was to <strong>take
advantage of his experience</strong> to overcome youger players and
rough defenders: without a fully-supporting body, he was able to
perform great games, with a
<a href="http://www.basketball-reference.com/boxscores/200112290WAS.html">51-points legendary performance</a>
against the Charlotte Hornets, just to mention one episode.</p>

<p>At 38.</p>

<p>Don&rsquo;t think your technical knowledge will be as exhaustive as
during your full-development period, but take advantage of the
situations occurred during those valuable years.</p>

<h2>Approach the problem from different points of view</h2>

<p><img class="right" src="/images/sheldon.board.jpg"></p>

<p><a href="http://en.wikipedia.org/wiki/Sheldon_Cooper">Sheldon Cooper</a>
has a huge problem in his life: he&rsquo;s not open to
look at the situations he faces from perspectives different
from his own one.</p>

<p>This makes impossible, for him, to solve decisional problems
taking different looks, from different point of views: one
aspect of your job is to provide different solutions to the
same problem instead.</p>

<p>Solutions may be incomplete, or may be not suitable for the
developer against you, but will help you in gaining trust when
explaining your points: someone stucked to his view may be
considered stubborn and not qualificated, but if you are able
to <strong>provide different pros and cons to different solutions</strong>
you will get respect from the person at the other side of
the argument, as you will be recognized not as a firm
believer, but as a thinker.</p>

<h2>Make spikes</h2>

<p>It may sound inefficient, but spikes are a good way to bring your
result home: you are not meant to directly write a spike for a
<em>use case</em> but you should <strong>encourage the counterpart to start
writing small and rough pieces of code</strong> to test if some of the
solutions he thiks are gonna work seem to be working fine.</p>

<p><img class="left" src="/images/lego.technic.jpg"></p>

<p>This makes the developer feel that he&rsquo;s  gaining trust from you,
as he is allowed to actually spend some billable time on his
implementation, but as some problem comes out ask him how to
solve it: a good developer may immediately find that he was wrong
about it, so your problem is solved; if he keeps trying to follow
this deadly way &ndash; maybe for <a href="http://c2.com/cgi/wiki?CowboyCoder">pride</a>
&ndash; just move at the subsequent step, which means making the
developer recognise he needs help.</p>

<p>Bear in mind that whenever you decide to make a spike, something
practical actually happens, and it could turn out that the
implementation you were criticizing may accomplish its duty:
since no one is perfect prepare your words to congratulate with
the developer and thank him for the good approach, <strong>without
feeling embarassed</strong>.</p>

<p><img class="right" src="/images/socrates.gif"></p>

<h2>Consolidate doubts</h2>

<p>With a <a href="http://en.wikipedia.org/wiki/Socratic_method">socratic approach</a>,
as you see that he is developing some spikes but <strong>comes to
unacceptable endpoints</strong>, start smashing his beliefs pointing
out the flaws his design has, the possible problems that you are
going to face and the limitations that this piece of code will
bring to his direct components &ndash; just to mention a few possible
type of problems.</p>

<p>I strongly recommend you to read
<a href="http://en.wikipedia.org/wiki/The_Republic_(Plato)">The Republic</a>,
by Plato, to understand how the socratic approach works in
practice: it&rsquo;s a really good practice to <strong>rely on ancient wisdom</strong>
to solve inter-people issues, as this kind of knowledge is
transversal to any kind of context.</p>

<h2>Give trust, feed the monster and save him before death</h2>

<p>May 8, 1970: <a href="http://en.wikipedia.org/wiki/Willis_Reed">Willis Reed</a>,
captain and leader of the
<a href="http://www.nba.com/knicks/">New York Knickerbockers</a> is
injured, and the Knicks need to defeat the Los Angeles Lakers
in game 7 (last game of a 3-3 tied series) to become NBA champions.</p>

<p><img class="right" src="/images/walt.frazier.jpg"></p>

<p>Willis starts the game, sinks down the first two points for New York
with a perimetral shot and, well, then he stops there.</p>

<p>Your developer is Reed: he&rsquo;s under pressure, feels he can&rsquo;t solve
the situation but dramatically tries not to drown; <strong>there comes Walt</strong>.</p>

<p><a href="http://en.wikipedia.org/wiki/Walt_Frazier">Walt Frazier</a> is a
tiny little point guard, a decent scorer: he&rsquo;s facing
LA&rsquo;s <a href="http://en.wikipedia.org/wiki/Jerry_West">Jerry West</a>, one of the
legends of the NBA, named Mr. Clutch due to his ability to stay
focused and sink shots in high-pressure conditions.</p>

<p>Walt does not care: inspired by his captain, he puts together an awesome
performance, scoring 36 points, serving 19 assists and stealing several
balls from West&rsquo;s hands.</p>

<p>Now it&rsquo;s time &ndash; for you &ndash; to play as Walt &lsquo;Clyde&rsquo; Frazier: as the developer
is drowning down you need to come there, <strong>give him the advices</strong> to fix his
implementation and to get out of that situation, <strong>pair with him</strong> and make
him feel that <strong>you could also be in that situation</strong>, it&rsquo;s not such a big
problem: doing this he will firmly listen to you, as you are leading
him out of troubles, the best way to gain respect from others.</p>

<h2>Gain trust</h2>

<p>The key to lead a team is gain trust from its components: it is rarely acceptable
that a team leader could lead his team with a cocky behaviour, so you are
going to fail if your only aim is to do <strong>people management</strong>, and not team
leading.</p>

<p>Letting people pull responsabilities, giving them trust, analyzing with the
team the problems which may occur after a decision (an implementation, or
the change of a process), involving everyone in your job.</p>

<p>As I like to state:</p>

<p><blockquote><p>Great leaders let other leaders emerge.</p></blockquote></p>

<h2>Be humble and step back</h2>

<p>What if you were wrong? It may happen, and it&rsquo;s perfectly acceptable:
don&rsquo;t be rude when supporting your ideas, because as it turns out
that you were wrong, this may harm your position.</p>

<p>If you sell yourself as a humble guy, you will get the trust of your
team, because <strong>they will recognize you as a wise guide</strong>, not a tyrant.</p>

<p><div class="footnotes">
<span>
Notes
</span>
	<ol>
		<li id='fn:1'>Monkeys <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>Worth to mention, the recruiting process plays a big role in this process <a href='#fnref:2' rev='footnote'>↩</a></li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
</feed>