<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Category: Github | Alessandro Nadalin]]></title>
  <link href="https://odino.org/categories/github/atom.xml" rel="self"/>
  <link href="https://odino.org/"/>
  <updated>2021-07-18T10:30:01+00:00</updated>
  <id>https://odino.org/</id>
  <author>
    <name><![CDATA[Alessandro Nadalin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Running CI Tests in Kubernetes Through Github Actions]]></title>
    <link href="https://odino.org/running-ci-tests-in-kubernetes-through-github-actions/"/>
    <updated>2020-03-20T09:21:00+00:00</updated>
    <id>https://odino.org/running-ci-tests-in-kubernetes-through-github-actions</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/github-actions-kubernetes.png"></p>

<p>Remember me? At the end of last decade I shared a post on <a href="/local-k8s-development-in-2020/">a simple way to run a Kubernetes cluster for local development</a>.</p>

<p>Today I&rsquo;d like to show the other side of the medal &mdash; running your CI
environment on Kubernetes (through <a href="https://github.com/features/actions">Github Actions</a>).</p>

<p>It&rsquo;s simple, mimics your production environment and it&rsquo;s automated &mdash;
let&rsquo;s get to it!</p>

<!-- more -->


<h2>How Github Actions work</h2>

<p>If you&rsquo;ve ever used <a href="https://travis-ci.com/">Travis CI</a> or similar tools
you&rsquo;re already familiar with Actions: they provide you an environment where
you can test your applications &mdash; generally in the form of a server with
your code checked out in a directory. When you push code to your Github
repository, an environment is booted, your code gets checked out and you
can run tasks on the environment &mdash; if any of the tasks fails, your CI
task fail.</p>

<p>This is not just useful for running automated tests &mdash; you could have
builds of your app being compiled in your CI environment and uploaded
to S3 or similar services, or send an email to your QA team to let them
know what tests are passing / failing.</p>

<p>So yes, you can think of Actions as Github booting a server, checking
out your code in there and giving you the option to run any command you
want on it &mdash; the actual implementation might be fairly different, but
this is all the eli5 you need right now.</p>

<h2>Like having a server. What now?</h2>

<p>If your development environment runs on a k8s cluster, or if you&rsquo;re planning
to run your CI environment in k8s, having a machine to play with everytime
you push code to Github is like a <em>manna from heaven</em>: you can simply
setup a k8s cluster in there and watch your application run like it would
on production.</p>

<p>You might be skeptical about installing k8s in your CI environment for
a couple of very valid reasons:</p>

<ul>
<li>installing k8s on a server is not always a straightforward operation</li>
<li>loads of moving parts that need to talk to each other (kubectl, apiserver, etcd, kubelet and so on),
so it could require quite some time to get everything up &amp; running</li>
</ul>


<p>Given that a CI environment should ideally be up in seconds,
the task of booting up a k8s cluster there seems quite daunting.</p>

<p>Luckily, the folks at <a href="https://rancher.com/">Rancher</a> got us covered:
they developed <a href="https://k3s.io/">k3s</a>, a lightweight Kubernetes distribution
geared towards IoT &amp; edge computing &mdash; with the main selling point
being the fact that the cluster is up &amp; running in a few seconds
with a simple:</p>

<p>```sh
curl -sfL <a href="https://get.k3s.io">https://get.k3s.io</a> | sh &ndash;</p>

<h1>wait ~30s</h1>

<p>k3s kubectl get node
```</p>

<p>With k3s, bringing k8s into our Action is extremely simple &mdash; let&rsquo;s
see it in action!</p>

<h2>The Kubernetes Github Action</h2>

<p>First off, create your action file, eg. <code>test.yml</code> under the folder
<code>.github/workflows</code> in your repo &mdash; then add the following steps
to the workflow:</p>

<p>```yaml
name: Example action</p>

<p>on: [push]</p>

<p>jobs:
  build:</p>

<pre><code>runs-on: ubuntu-latest
timeout-minutes: 5
steps:
- uses: actions/checkout@v2
- name: install k8s
  run: |
    curl -sfL https://get.k3s.io | K3S_KUBECONFIG_MODE=777 sh -
    cat /etc/rancher/k3s/k3s.yaml
    mkdir -p ~/.kube
    cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
- name: example tests
  run: |
    # Whatever command you want to run
</code></pre>

<p>```</p>

<p>As you can see, all the magic happens here:</p>

<p><code>sh
curl -sfL https://get.k3s.io | K3S_KUBECONFIG_MODE=777 sh -
cat /etc/rancher/k3s/k3s.yaml
mkdir -p ~/.kube
cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
</code></p>

<p>We download k3s, install it and copy its configuration into
the usual kubeconfig path. This is done so that <code>kubectl</code>
can talk to the cluster, else you have to use the one provided
by k3s under the alias <code>k3s kubectl</code> (meaning you need to run
commands such as <code>k3s kubectl get po</code>).</p>

<p>If you&rsquo;re wondering how does this look like in action,
you should probably head over to the sample repo I
setup at <a href="https://github.com/odino/k8s-github-action">github.com/odino/k8s-github-action</a>:
it&rsquo;s really not that crazy, as it simply contains the above
code. What you might find interesting, though, is having
a look at <a href="https://github.com/odino/k8s-github-action/actions">some of the &ldquo;builds&rdquo; that ran</a>, where you can clarly
see k8s up &amp; running:</p>

<p><img class="center" src="/images/k8s-github-action-example.png"></p>

<p>As usual, <a href="https://github.com/odino/k8s-github-action/pull/1">Actions report their status on PRs</a>, so you get
Github to confirm that everything ran smoothly whenever
you push:</p>

<p><img class="center" src="/images/k8s-github-action-pr.png"></p>

<p>Hope this was helpful &mdash; peace!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finding Where That IP Address Is From With Iploc]]></title>
    <link href="https://odino.org/finding-where-that-ip-address-is-from-with-iploc/"/>
    <updated>2018-07-07T16:45:00+00:00</updated>
    <id>https://odino.org/finding-where-that-ip-address-is-from-with-iploc</id>
    <content type="html"><![CDATA[<p>Today I spent some time building <a href="https://github.com/odino/iploc">iploc</a>, a small CLI utility that lets you retrieve
geographical information of an IP address.</p>

<!-- more -->


<p>First and foremost, I&rsquo;d like to clarify that this library is nothing but a CLI
wrapper for the <a href="http://ip-api.com/">ip-api.com</a>, which does the actual heavy-lifting
for us.</p>

<p>Long story short, <code>iploc</code> is a very small utility that let&rsquo;s you lookup geographical
information of an IP address directly from the CLI &mdash; you simply give it the address
you want to &ldquo;reverse geocode&rdquo; and it will print out a bunch of information:</p>

<p><code>
iploc 12.34.56.78
{"as":"AS7018 AT\u0026T Services, Inc.","city":"Columbus","country":"United States","countryCode":"US","isp":"AT\u0026T Services","lat":39.9653,"lon":-83.0235,"org":"AT\u0026T Services","query":"12.34.56.78","region":"OH","regionName":"Ohio","status":"success","timezone":"America/New_York","zip":"43215"}
</code></p>

<p>Indulging my passion for <a href="https://en.wikipedia.org/wiki/Seven_deadly_sins#Gluttony">gluttony</a>,
I&rsquo;ve added a <em>pretty-print</em> option for humans:</p>

<p>```
iploc 12.34.56.78 -p
{</p>

<pre><code>"as": "AS7018 AT\u0026T Services, Inc.",
"city": "Columbus",
"country": "United States",
"countryCode": "US",
"isp": "AT\u0026T Services",
"lat": 39.9653,
"lon": -83.0235,
"org": "AT\u0026T Services",
"query": "12.34.56.78",
"region": "OH",
"regionName": "Ohio",
"status": "success",
"timezone": "America/New_York",
"zip": "43215"
</code></pre>

<p>}
```</p>

<p>but you&rsquo;d really be better off with tools such as <a href="https://stedolan.github.io/jq/">jq</a>:</p>

<p><code>
iploc 12.34.56.78 | jq -r .city
Columbus
</code></p>

<p>Installing <code>iploc</code> is fairly straightforward, as you can simply grab the right binary
from the release page on GitHub:</p>

<p>```
/tmp ·êÖ wget <a href="https://github.com/odino/iploc/releases/download/v1.0.0/iploc_linux_amd64_v1.0.0.tar.gz">https://github.com/odino/iploc/releases/download/v1.0.0/iploc_linux_amd64_v1.0.0.tar.gz</a>
&mdash;2018-07-07 16:35:12&mdash;  <a href="https://github.com/odino/iploc/releases/download/v1.0.0/iploc_linux_amd64_v1.0.0.tar.gz">https://github.com/odino/iploc/releases/download/v1.0.0/iploc_linux_amd64_v1.0.0.tar.gz</a>
Resolving github.com (github.com)&hellip; 192.30.253.113, 192.30.253.112
Connecting to github.com (github.com)|192.30.253.113|:443&hellip; connected.
HTTP request sent, awaiting response&hellip; 302 Found
Location: <a href="https://github-production-release-asset-2e65be.s3.amazonaws.com/140064185/ae86980c-81dd-11e8-86f7-510d153790f8?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20180707%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20180707T123513Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=32b345f28416ae597379622a361e9f01347cfac31984125353ba4801d147473e&amp;X-Amz-SignedHeaders=host&amp;actor_id=0&amp;response-content-disposition=attachment%3B%20filename%3Diploc_linux_amd64_v1.0.0.tar.gz&amp;response-content-type=application%2Foctet-stream">https://github-production-release-asset-2e65be.s3.amazonaws.com/140064185/ae86980c-81dd-11e8-86f7-510d153790f8?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20180707%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20180707T123513Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=32b345f28416ae597379622a361e9f01347cfac31984125353ba4801d147473e&amp;X-Amz-SignedHeaders=host&amp;actor_id=0&amp;response-content-disposition=attachment%3B%20filename%3Diploc_linux_amd64_v1.0.0.tar.gz&amp;response-content-type=application%2Foctet-stream</a> [following]
&mdash;2018-07-07 16:35:13&mdash;  <a href="https://github-production-release-asset-2e65be.s3.amazonaws.com/140064185/ae86980c-81dd-11e8-86f7-510d153790f8?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20180707%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20180707T123513Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=32b345f28416ae597379622a361e9f01347cfac31984125353ba4801d147473e&amp;X-Amz-SignedHeaders=host&amp;actor_id=0&amp;response-content-disposition=attachment%3B%20filename%3Diploc_linux_amd64_v1.0.0.tar.gz&amp;response-content-type=application%2Foctet-stream">https://github-production-release-asset-2e65be.s3.amazonaws.com/140064185/ae86980c-81dd-11e8-86f7-510d153790f8?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20180707%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20180707T123513Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=32b345f28416ae597379622a361e9f01347cfac31984125353ba4801d147473e&amp;X-Amz-SignedHeaders=host&amp;actor_id=0&amp;response-content-disposition=attachment%3B%20filename%3Diploc_linux_amd64_v1.0.0.tar.gz&amp;response-content-type=application%2Foctet-stream</a>
Resolving github-production-release-asset-2e65be.s3.amazonaws.com (github-production-release-asset-2e65be.s3.amazonaws.com)&hellip; 52.216.96.227
Connecting to github-production-release-asset-2e65be.s3.amazonaws.com (github-production-release-asset-2e65be.s3.amazonaws.com)|52.216.96.227|:443&hellip; connected.
HTTP request sent, awaiting response&hellip; 200 OK
Length: 2977802 (2.8M) [application/octet-stream]
Saving to: ‚Äòiploc_linux_amd64_v1.0.0.tar.gz.1‚Äô</p>

<p>iploc_linux_amd64_v1.0.0.tar.gz.1                     100%[======================================================================================================================>]   2.84M   362KB/s    in 10s</p>

<p>2018-07-07 16:35:24 (287 KB/s) &ndash; ‚Äòiploc_linux_amd64_v1.0.0.tar.gz.1‚Äô saved [2977802/2977802]</p>

<p>/tmp ·êÖ tar -xzf iploc_linux_amd64_v1.0.0.tar.gz                                                  <br/>
/tmp ·êÖ ./iploc_linux_amd64_v1.0.0 12.34.56.78
{&ldquo;as&rdquo;:&ldquo;AS7018 AT\u0026T Services, Inc.&rdquo;,&ldquo;city&rdquo;:&ldquo;Columbus&rdquo;,&ldquo;country&rdquo;:&ldquo;United States&rdquo;,&ldquo;countryCode&rdquo;:&ldquo;US&rdquo;,&ldquo;isp&rdquo;:&ldquo;AT\u0026T Services&rdquo;,&ldquo;lat&rdquo;:39.9653,&ldquo;lon&rdquo;:-83.0235,&ldquo;org&rdquo;:&ldquo;AT\u0026T Services&rdquo;,&ldquo;query&rdquo;:&ldquo;12.34.56.78&rdquo;,&ldquo;region&rdquo;:&ldquo;OH&rdquo;,&ldquo;regionName&rdquo;:&ldquo;Ohio&rdquo;,&ldquo;status&rdquo;:&ldquo;success&rdquo;,&ldquo;timezone&rdquo;:&ldquo;America/New_York&rdquo;,&ldquo;zip&rdquo;:&ldquo;43215&rdquo;}
```</p>

<p>&hellip;that&rsquo;s it: there&rsquo;s nothing else the tool does (rightfully, I would say).</p>

<p><a href="/mssqldump-a-small-utility-to-dump-ms-sql-server-data/#a-couple-surprises">As opposed to last time</a>,
today I opted to use <a href="https://github.com/spf13/cobra">cobra</a> as I wanted to see what overhead
it would introduce in a tool this small: from my perspective, setting up the CLI app
with cobra was fairly quick and straightforward, even though the binaries are a bit
chubbier (the amd64 linux binary is 2.8mb vs 2.5mb, so nothing crazy to be honest).
Definitely recommended.</p>

<p>That&rsquo;s it for today!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Import a Google Spreadsheet Into a MySQL Table With Docsql]]></title>
    <link href="https://odino.org/import-a-google-spreadsheet-into-a-mysql-table-with-docsql/"/>
    <updated>2018-05-18T13:05:00+00:00</updated>
    <id>https://odino.org/import-a-google-spreadsheet-into-a-mysql-table-with-docsql</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/google-docs.jpg"></p>

<p>There&rsquo;s a lot of open-source software I&rsquo;m not proud of; probably, though, nothing
compares to <a href="https://github.com/odino/docsql">docsql</a>, as this rare piece of
Golang qualifies as one of the weirdest of my creations.</p>

<!-- more -->


<p>At Namshi, we&rsquo;ve been using spreadsheets as a mean of configuration for quite some
time &mdash; you tell the stakeholder &ldquo;hey, here&rsquo;s a google doc, if you need to change
one of the translations just edit the doc and wait 5 mins&rdquo; and the bets are down.</p>

<p>Sometimes we actually need to import this data into MySQL (could be a <em>una-tantum</em>
import as well as a scheduled job) and we traditionally did this manually,
by pulling down a <code>.tsv</code> export from Google docs, amending it and running something
such as <code>LOAD DATA LOCAL INFILE</code>.</p>

<p>One evening, I found myself wifeless and with a strong desire to try out
<a href="https://github.com/spf13/cobra">cobra</a> and <a href="https://github.com/spf13/viper">viper</a>,
so I started to look into automating the process of importing a spreadsheet hosted
on Google Docs into a MySQL table: the result was <a href="https://github.com/odino/docsql">docsql</a>, a small piece of
weird software that simply:</p>

<ul>
<li><a href="https://github.com/odino/docsql/blob/bdfd6deeaf5dfb34ee1e00f23c48e0f1658c6d17/gdocs/gdocs.go#L13-L46">downloads a spreadsheet</a> in <a href="/tsv-better-than-csv/">TSV format</a></li>
<li>creates a <a href="https://github.com/odino/docsql/blob/bdfd6deeaf5dfb34ee1e00f23c48e0f1658c6d17/db/mysql.go#L51-L67">tmp table</a></li>
<li><a href="https://github.com/odino/docsql/blob/bdfd6deeaf5dfb34ee1e00f23c48e0f1658c6d17/db/mysql.go#L70-L86">imports the TSV</a> in the tmp table</li>
<li><a href="https://github.com/odino/docsql/blob/bdfd6deeaf5dfb34ee1e00f23c48e0f1658c6d17/db/mysql.go#L90-L111">swaps the tmp table with the original table</a> you want to import the spreadsheet to (this allows <a href="https://stackoverflow.com/a/34391961/934439">atomic operations</a> on the DB)</li>
</ul>


<p>and turns this:</p>

<p><img class="center <a" src="href="https://raw.githubusercontent.com/odino/docsql/master/images/doc.png">https://raw.githubusercontent.com/odino/docsql/master/images/doc.png</a>"></p>

<p>into this:</p>

<p><img class="center <a" src="href="https://raw.githubusercontent.com/odino/docsql/master/images/docsql.png">https://raw.githubusercontent.com/odino/docsql/master/images/docsql.png</a>"></p>

<p>Considering this was a funny experiment to try to automate a task I do quite
infrequently<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>, I don&rsquo;t think I&rsquo;m going to spend a lot more time
expanding it or adding random features<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>, but I&rsquo;m happy to share the
source code as I was pleasantly surprised with how straightforward it was to build
such a small, isolated CLI tool.</p>

<p><div class="footnotes">
<span>
Notes
</span>
	<ol>
		<li id='fn:1'>Even if infrequent, it&rsquo;s still a pain <a href='#fnref:1' rev='footnote'>‚Ü©</a></li><li id='fn:2'>Especially considering my good old love for the Unix philosophy of &ldquo;do one thing and do it well&hellip;&rdquo; <a href='#fnref:2' rev='footnote'>‚Ü©</a></li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Contributing to React Native for Android]]></title>
    <link href="https://odino.org/contributing-to-react-native-for-android/"/>
    <updated>2016-01-01T11:19:00+00:00</updated>
    <id>https://odino.org/contributing-to-react-native-for-android</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/reactjs.png"></p>

<p>It is no news that we, at <a href="http://tech.namshi.com">Namshi</a>, like to play around with all
sorts of interesting technologies: last but not least, we&rsquo;re
taking a closer look at <a href="https://facebook.github.io/react-native/">react native</a>, the framework from Facebook
that allows you to build mobile, native apps with <a href="https://facebook.github.io/react/">React components</a>.</p>

<p>While developing a small prototype, we had a small issue with
a <a href="http://developer.android.com/reference/android/webkit/WebView.html">WebView</a> that was supposed to run within our application and
wanted to enable <a href="https://developer.chrome.com/devtools/docs/remote-debugging#debugging-webviews">remote debugging on chrome</a>
to troubleshoot it: since this is <a href="https://github.com/facebook/react-native/blob/e4272b456e6948c0942c610d3bc65bc29f0a7be6/ReactAndroid/src/main/java/com/facebook/react/views/webview/ReactWebViewManager.java#L77-L82">turned
off by default</a>, we had to recompile react native with webview
debugging enabled, and I wanted to share my brief experience with
it since, with the same approach, you can start hacking and
contributing to react native itself.</p>

<!-- more -->


<p>The guys have created a <a href="https://facebook.github.io/react-native/docs/android-building-from-source.html#content">small guide on how to compile RN from source</a>,
which can be summarized in just a couple steps: first, add the <a href="http://developer.android.com/tools/sdk/ndk/index.html">android NDK</a> to
your environment and then configure the build system to build from source and
not from the <a href="http://mvnrepository.com/artifact/com.facebook.react/react-native">pre-built react-native packages</a>.</p>

<h2>Download and configure the Android NDK</h2>

<p>Download the latest version of the NDK, make it executable
and run it: the package extracts itself in the current folder
and then you only need to set an environment variable
pointing to the NDK, so that the android build system will
be able to locate the NDK:</p>

<p><code>
cd /somewhere
wget http://dl.google.com/android/ndk/android-ndk-r10e-linux-x86_64.bin
chmod a+x android-ndk-r10e-linux-x86_64.bin
./android-ndk-r10e-linux-x86_64.bin
export ANDROID_NDK=/somewhere/android-ndk-r10e
</code></p>

<h2>Configure RN to build from source</h2>

<p>This involves a few manual steps, but should be pretty straightforward.</p>

<p>In your react project, open <code>android/app/build.gradle</code>, you should see a
<code>dependencies</code> section like the following:</p>

<p>```
dependencies {</p>

<pre><code>compile fileTree(dir: "libs", include: ["*.jar"])
compile "com.android.support:appcompat-v7:23.0.1"

compile "com.facebook.react:react-native:0.17.+"
</code></pre>

<p>}
```</p>

<p>See, <code>compile "com.facebook.react:react-native:0.17.+"</code> tells the build system
to get the pre-built packages, released by facebook, rather that building react-native
from your local sources.</p>

<p>Now, change that line to:</p>

<p><code>
compile project(':ReactAndroid')
</code></p>

<p>then open <code>android/settings.gradle</code> and tell the build system how to locate
the new project that will be compiled; add, at the bottom of the file:</p>

<p>```
include &lsquo;:ReactAndroid&rsquo;</p>

<p>project(&lsquo;:ReactAndroid&rsquo;).projectDir = new File(</p>

<pre><code>rootProject.projectDir, '../node_modules/react-native/ReactAndroid')
</code></pre>

<p>```</p>

<p>Last but not least, you will need 1 change in <code>android/build.gradle</code>, in the
<code>dependencies</code> section:</p>

<p><code>
classpath 'de.undercouch:gradle-download-task:2.0.0'
</code></p>

<p>That&rsquo;s it!</p>

<h2>At the end</h2>

<p>Now, when you run <code>react-native run-android</code>, you should notice that the
build is slightly slower, due to the fact that <a href="http://gradle.org/">gradle</a>
is trying to compile RN from source rather than from the pre-built packages.</p>

<p>You can then open <code>./node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/</code>
and start hacking around, making your own changes and testing them with a simple
<code>react-native run-android</code>.</p>

<p>For us, we were eventually able to enable remote debugging on webviews and found out
why our webview wasn&rsquo;t running: it simply needed access to the
<a href="https://developer.mozilla.org/en/docs/Web/API/Window/localStorage">localStorage</a>,
which is turned off by default on android webviews<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.</p>

<p><div class="footnotes">
<span>
Notes
</span>
	<ol>
		<li id='fn:1'>We then sent a PR (<a href="https://github.com/facebook/react-native/commit/67931284350ebd2b60d1e11870690272079b1726">https://github.com/facebook/react-native/commit/67931284350ebd2b60d1e11870690272079b1726</a>) so that we can turn DOM storage on at will ;&ndash;) <a href='#fnref:1' rev='footnote'>‚Ü©</a></li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Have Built My Own IDE and I'm Happy to Trash It After a Year]]></title>
    <link href="https://odino.org/i-have-built-my-own-ide-and-im-happy-to-trash-it-after-a-year/"/>
    <updated>2015-08-01T11:42:00+00:00</updated>
    <id>https://odino.org/i-have-built-my-own-ide-and-im-happy-to-trash-it-after-a-year</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/nikki-logo.svg" width="180"></p>

<p>Last year I dedicated quite some time, <a href="https://github.com/odino/nikki/graphs/contributors">during ramadan</a>, to a project
I really cared about: building a <strong>fast and smart text editor</strong> to use
on a daily basis.</p>

<p>That&rsquo;s how <a href="/last-weekend-i-wrote-an-ide-in-javascript/">Nikki was born</a>, and today I am happy to announce that the
project is dead, simply because I found another, very similar tool
that does the job.</p>

<p>This is the story of <strong>how open source projects get born and die</strong>,
and why we should still celebrate it.</p>

<!-- more -->


<h2>Preface</h2>

<p>I had been using <a href="https://www.jetbrains.com/phpstorm/">PHPStorm</a> for quite some time and I was happily
paying its license since, in the PHP world, it seemed like no
editor could match its features while performing that fast: the
problem was that PHPStorm was still an IDE at its core, meaning
that to be able to write a couple lines of code I needed to wait
at least 10 seconds for it to boot the GUI, scan the current project,
look for updates, cook dinner, do the dishes and whatever else
it needed to do&hellip;</p>

<p>See, it&rsquo;s been a while <strong>I changed job</strong>: at <a href="https://www.namshi.com">Namshi</a> I&rsquo;m no longer the guy who is
going to implement long-term features or will need to spend a lot of time on a single, monolithic
project; right now I am mostly kicking new projects off, adding
small features, pairing or discussing with the team what kind of
design to use and so on: most of my time is really spent in
scripting over microservices which, in my opinion, rarely require
an IDE, especially when they&rsquo;re written in JavaScript.</p>

<p>At the end of the day our typical project looks very slim: if
I compare the size of our initial API layer (a Symfony app with
lots of bundles and abstraction) to our newest services (express
apps with 10/15 files in total<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>) they look like night
and day; our node microservices ain&rsquo;t very complex and are quite
self-explanatory: you won&rsquo;t need to navigate through a lot of
methods to understand the responsibilities of each module.</p>

<p>Want to make an API call? Just open <code>api.js</code> and
see which methods are public:</p>

<p>``` javascript api.js: an example module that wraps some API calls
function request(uri, params) {
  // &hellip;
}</p>

<p>function getCustomer(email) {
  return request(&lsquo;/customers/&rsquo; + email);
}</p>

<p>module.exports = {
  getCustomer: getCustomer,
  //  &hellip;
}
```</p>

<p>This transition happened around a year and a half ago, and
I started growing frustrated of PHPStorm as it wasn&rsquo;t very helpful
for my use-case: it was doing too much, taking too long.</p>

<p>Time to look for an alternative!</p>

<h2>Looking around</h2>

<p>There were a few alternatives at that time:</p>

<ul>
<li><a href="http://www.sublimetext.com/">sublime</a></li>
<li><a href="http://lighttable.com/">lighttable</a></li>
<li>a pimped <a href="http://grigio.org/pimp_my_gedit_was_textmate_linux/">gedit</a></li>
</ul>


<p>but none of them felt &ldquo;right&rdquo;: either they didn&rsquo;t have a
vibrant community behind them or they simply lacked of
coolness (I&rsquo;m looking at you, gedit).</p>

<p>So far I couldn&rsquo;t find a real winner amongst them, so I started thinking that
writing a simple thingy on my own would have been a very
good learning experience now that the new <a href="http://socket.io/">socket.io</a>
had just been <a href="http://socket.io/blog/introducing-socket-io-1-0/">released</a>.</p>

<p>I mean, you can create editors in <a href="https://coderwall.com/p/lhsrcq/one-line-browser-notepad">one line of code</a>,
how big of a task would this be?</p>

<h2>Enter Nikki</h2>

<p>That&rsquo;s how Nikki was born: I put up some <a href="https://raw.githubusercontent.com/odino/nikki/master/bin/images/nikki-ss.png">crappy frontend</a>
and made it talk with a simple NodeJS server that would have
fun browsing, opening and modifying files on my machine.</p>

<p>I can&rsquo;t say that the code was the <a href="https://github.com/odino/nikki/blob/master/server/socket.js#L81-L93">best I&rsquo;ve ever written</a>
(especially on the <a href="https://github.com/odino/nikki/blob/master/client/scripts/fs.js">frontend</a> :-P), but
at the end of the day I got the chance to play with socket.io,
<a href="https://github.com/substack/dnode">dnode</a>, learned how to &ldquo;<a href="https://github.com/odino/nikki/commit/efecd05ab8a02406d63011e465850f2931ecef07">daemonize</a>&rdquo;
a node process, played with the <a href="http://ace.c9.io/">ACE editor</a> and
learned <a href="https://github.com/odino/nikki/commit/704927c369ef156d3d03d90af68853657328c5f4">how to watch for file changes in Node</a> (and the fact that this feature was <a href="https://nodejs.org/docs/latest/api/fs.html#fs_fs_watch_filename_options_listener">quite unstable</a>):
I dedicated a lot of time to Nikki but I also practiced
a lot with new tools and patterns, which resulted in me getting to know
the platform and becoming more confident with JavaScript<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>
as the days went by.</p>

<p>I&rsquo;m not lying: whenever I needed to start a new project or make some
changes my terminal would look like:</p>

<p><code>
~ (master ‚úî) ·êÖ cd projects/something
~/projects/something (master ‚úî) ·êÖ nikki
</code></p>

<p>and my browser would open on port <code>9123</code> and let me code in milliseconds:
how nice it felt!</p>

<p>Of course, Nikki didn&rsquo;t have a community behind it so
<a href="https://github.com/odino/nikki/issues?q=is%3Aissue+is%3Aclosed">features or bugfixes took me some time</a>
but, by using it on a daily basis, I made sure that it
wouldn&rsquo;t crash or misbehave &mdash; else I would have grown
frustrated at my own child!</p>

<h2>Then, one night&hellip;</h2>

<p><img class="right" src="/images/atom.png"></p>

<p>This went on for over a year: I think I was the only guy
on the planet using it, and it still made me feel very proud
as it fit my needs very well.</p>

<p>At the same time, I got very curious when I first heard of <a href="https://atom.io/">Atom</a>
as it felt modern (JavaScript) and cool (GitHub), though, as soon as
GitHub released it, I realized it was still missing a couple things:</p>

<ul>
<li>not battle-tested</li>
<li>not a huge community</li>
<li>no Linux build</li>
</ul>


<p>The first 2 points were quickly resolved: developers started to love
the &ldquo;hackable text editor&rdquo; and the community beefed up in a very short
span of time, meaning that the project could reach a stable
version very quickly as lots of people were using and testing it<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>.</p>

<p>A working version for Linux came into existence after
a few months, which meant that Atom was ready for me:
then, one night, I decided to format my machine and give
it a brand new life, a good excuse to <strong>try something new</strong>.</p>

<p>I installed Atom and never looked back: it behaves quite like Nikki<sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup>,
has plugins, a well-tested ground and has a huge community of users / developers
ready to help: this product <strong>makes much more sense</strong>. I am
happily using it since a month or so and I <strong>totally love it</strong>: the way it uses
shortcuts for a ton of things, &ldquo;open in github&rdquo;, the speed it takes to open
up, how simple it is to customize&hellip;</p>

<p>&hellip;and here we are: now that <strong>Nikki is dead</strong>, was it a wasted effort?</p>

<h2>Let&rsquo;s celebrate Open Source</h2>

<p>I think, on a smaller scale, PHPStorm, Nikki and Atom represent a very
common pattern in technology and Open Source: a cool project that
doesn&rsquo;t age very well, or needs to adapt to new technologies.</p>

<p>The same has happened with Solr, just a few years ago: ElasticSearch
was born and Solr suddenly lost its coolness.</p>

<p>The same is happening with Python and Golang.</p>

<p>The same for the <a href="https://en.wikipedia.org/wiki/Zend_Engine">Zend Engine</a>
and <a href="http://hhvm.com/">HHVM</a>.</p>

<p>Same for Ruby and NodeJS.</p>

<p>Might be that the same will happen for <a href="https://www.graylog.org/">Graylog</a> and <a href="https://github.com/getsentry/sentry">Sentry</a>.</p>

<p>Now&hellip;you got me.</p>

<p>The beauty of Open Source is that <strong>no one
will prevent you from converting your ideas into working code</strong>: great
engineers will develop a new product, the underlying technology
will age and look less appealing in 1, 3 or 5 years and a new
group of developers will pick those great ideas, patterns and
implement them on their own, on a newer, different platform, to
provide some competition to the &ldquo;old guys&rdquo;.</p>

<p>At the end of the day, I have 3 key takeaways from this experience:</p>

<ul>
<li><strong>community wins</strong>: no man is an island, you should look for help
and be guided by the community as they most-likely had your same
problem and already found an answer. In most cases, follow what smart
people do and look at the size of the community, as that will tell you
how big of a reach the project has</li>
<li><strong>OSS is a phenomenal learning experience</strong>: open source your code,
use the tools that the community gives you. Even if you have to trash
it after a few months you&rsquo;ll probably learn so much on your way to <code>v1.0</code></li>
<li><strong>don&rsquo;t go too far</strong>: do not think that you are going to create
the Next Big Thing, keep a low profile and learn not to love code:
it doesn&rsquo;t age well and there will always be someone that can write
a faster and more elegant version of your function. From <a href="https://github.com/docker/libcontainer/blob/master/PRINCIPLES.md">libcontainer&rsquo;s principles</a>:
&ldquo;<em>Don&rsquo;t try to replace every tool. Instead, be an ingredient to improve them</em>&rdquo;</li>
</ul>


<p>With this in mind, I am still glad I wrote Nikki: it was a truly great
learning experience.</p>

<p><strong>Check</strong>.</p>

<p>And I&rsquo;m still happy to trash it: it served
its purpose, I knew its limitations and led me to another great tool.</p>

<p><strong>Check</strong>.</p>

<p>And yeah, I&rsquo;m super-excited for who&rsquo;s going to challenge Atom.<br />
That&rsquo;s the way it is, the way it will always be.</p>

<p><div class="footnotes">
<span>
Notes
</span>
	<ol>
		<li id='fn:1'>Plus tests&hellip;   &hellip;most of the times :-P <a href='#fnref:1' rev='footnote'>‚Ü©</a></li><li id='fn:2'>Back at the time my go-to language was still PHP, whereas now I can almost only do JS <a href='#fnref:2' rev='footnote'>‚Ü©</a></li><li id='fn:3'>Funny enough, a couple guys at the office told me they tried it way back at the time and weren&rsquo;t happy with it because it used to be quirky <a href='#fnref:3' rev='footnote'>‚Ü©</a></li><li id='fn:4'>or&hellip;I should say Nikki behaves quite like Atom :) <a href='#fnref:4' rev='footnote'>‚Ü©</a></li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
</feed>