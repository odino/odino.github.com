<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Category: React Native | Alessandro Nadalin]]></title>
  <link href="https://odino.org/categories/react-native/atom.xml" rel="self"/>
  <link href="https://odino.org/"/>
  <updated>2021-05-20T10:16:37+00:00</updated>
  <id>https://odino.org/</id>
  <author>
    <name><![CDATA[Alessandro Nadalin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Enable Remote Debugging on Chrome for React Native's Webviews]]></title>
    <link href="https://odino.org/enable-remote-debugging-on-chrome-for-react-natives-webviews/"/>
    <updated>2016-01-02T09:00:00+00:00</updated>
    <id>https://odino.org/enable-remote-debugging-on-chrome-for-react-natives-webviews</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/android.jpg"></p>

<p>In my <a href="/contributing-to-react-native-for-android/">last post</a> I explained how
you can hack on react native for android locally, so that if you need any
change to the java packages<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup> you can do it yourself, with
immediate feedback upon a <code>react-native run-android</code>.</p>

<p>One thing I immediately patched was the ability to
<a href="https://developer.chrome.com/devtools/docs/remote-debugging#debugging-webviews">enable remote debugging on webviews</a>,
which is turned off in react native &mdash; and here&rsquo;s
how you can do the same.</p>

<!-- more -->


<p>If you look at the <code>ReactWebViewManager.java</code> you immediately notice that
<a href="https://github.com/facebook/react-native/blob/master/ReactAndroid/src/main/java/com/facebook/react/views/webview/ReactWebViewManager.java#L79-L80">debugging is commented</a>: this is because
it needs to be enabled on the <a href="http://stackoverflow.com/questions/3652560/what-is-the-android-uithread-ui-thread">UI thread</a>, else android is funny enough to <a href="https://android.googlesource.com/platform/frameworks/webview/+/3e9cdbe3fe00ef50eff256e7b5f4b6a1ae796ec5/chromium/java/com/android/webview/chromium/WebViewChromiumFactoryProvider.java#343">crash the application through a RuntimeException</a>.
Putting it in a static initializer makes it run on any thread that requires
this class, which is <a href="https://github.com/facebook/react-native/issues/4857">why is disabled</a>.</p>

<p>At the same time, you can just move it around to have it enabled in your dev environment;
just place the line that enables debugging in the <code>onPageStarted</code> method:</p>

<p>```java
@Override
public void onPageStarted(WebView webView, String url, Bitmap favicon) {
  super.onPageStarted(webView, url, favicon);
  mLastLoadFailed = false;</p>

<p>  ReactContext reactContext = (ReactContext) ((ReactWebView) webView).getContext();</p>

<p>  WebView.setWebContentsDebuggingEnabled(true);</p>

<p>  &hellip;
```</p>

<p>and, after re-running <code>react native run-android</code>, you should be good to go:</p>

<p><img class="center" src="/images/webview-remote-debugging.png"></p>

<p>Other stuff like live screencasting work as expected:</p>

<p><img class="center" src="/images/webview-remote-debugging-screencast.jpg"></p>

<p>Sweet!</p>

<p><div class="footnotes">
<span>
Notes
</span>
	<ol>
		<li id='fn:1'>BTW hey, it&rsquo;s 2016 and Java is still a thing! <a href='#fnref:1' rev='footnote'>↩</a></li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Contributing to React Native for Android]]></title>
    <link href="https://odino.org/contributing-to-react-native-for-android/"/>
    <updated>2016-01-01T11:19:00+00:00</updated>
    <id>https://odino.org/contributing-to-react-native-for-android</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/reactjs.png"></p>

<p>It is no news that we, at <a href="http://tech.namshi.com">Namshi</a>, like to play around with all
sorts of interesting technologies: last but not least, we&rsquo;re
taking a closer look at <a href="https://facebook.github.io/react-native/">react native</a>, the framework from Facebook
that allows you to build mobile, native apps with <a href="https://facebook.github.io/react/">React components</a>.</p>

<p>While developing a small prototype, we had a small issue with
a <a href="http://developer.android.com/reference/android/webkit/WebView.html">WebView</a> that was supposed to run within our application and
wanted to enable <a href="https://developer.chrome.com/devtools/docs/remote-debugging#debugging-webviews">remote debugging on chrome</a>
to troubleshoot it: since this is <a href="https://github.com/facebook/react-native/blob/e4272b456e6948c0942c610d3bc65bc29f0a7be6/ReactAndroid/src/main/java/com/facebook/react/views/webview/ReactWebViewManager.java#L77-L82">turned
off by default</a>, we had to recompile react native with webview
debugging enabled, and I wanted to share my brief experience with
it since, with the same approach, you can start hacking and
contributing to react native itself.</p>

<!-- more -->


<p>The guys have created a <a href="https://facebook.github.io/react-native/docs/android-building-from-source.html#content">small guide on how to compile RN from source</a>,
which can be summarized in just a couple steps: first, add the <a href="http://developer.android.com/tools/sdk/ndk/index.html">android NDK</a> to
your environment and then configure the build system to build from source and
not from the <a href="http://mvnrepository.com/artifact/com.facebook.react/react-native">pre-built react-native packages</a>.</p>

<h2>Download and configure the Android NDK</h2>

<p>Download the latest version of the NDK, make it executable
and run it: the package extracts itself in the current folder
and then you only need to set an environment variable
pointing to the NDK, so that the android build system will
be able to locate the NDK:</p>

<p><code>
cd /somewhere
wget http://dl.google.com/android/ndk/android-ndk-r10e-linux-x86_64.bin
chmod a+x android-ndk-r10e-linux-x86_64.bin
./android-ndk-r10e-linux-x86_64.bin
export ANDROID_NDK=/somewhere/android-ndk-r10e
</code></p>

<h2>Configure RN to build from source</h2>

<p>This involves a few manual steps, but should be pretty straightforward.</p>

<p>In your react project, open <code>android/app/build.gradle</code>, you should see a
<code>dependencies</code> section like the following:</p>

<p>```
dependencies {</p>

<pre><code>compile fileTree(dir: "libs", include: ["*.jar"])
compile "com.android.support:appcompat-v7:23.0.1"

compile "com.facebook.react:react-native:0.17.+"
</code></pre>

<p>}
```</p>

<p>See, <code>compile "com.facebook.react:react-native:0.17.+"</code> tells the build system
to get the pre-built packages, released by facebook, rather that building react-native
from your local sources.</p>

<p>Now, change that line to:</p>

<p><code>
compile project(':ReactAndroid')
</code></p>

<p>then open <code>android/settings.gradle</code> and tell the build system how to locate
the new project that will be compiled; add, at the bottom of the file:</p>

<p>```
include &lsquo;:ReactAndroid&rsquo;</p>

<p>project(&lsquo;:ReactAndroid&rsquo;).projectDir = new File(</p>

<pre><code>rootProject.projectDir, '../node_modules/react-native/ReactAndroid')
</code></pre>

<p>```</p>

<p>Last but not least, you will need 1 change in <code>android/build.gradle</code>, in the
<code>dependencies</code> section:</p>

<p><code>
classpath 'de.undercouch:gradle-download-task:2.0.0'
</code></p>

<p>That&rsquo;s it!</p>

<h2>At the end</h2>

<p>Now, when you run <code>react-native run-android</code>, you should notice that the
build is slightly slower, due to the fact that <a href="http://gradle.org/">gradle</a>
is trying to compile RN from source rather than from the pre-built packages.</p>

<p>You can then open <code>./node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/</code>
and start hacking around, making your own changes and testing them with a simple
<code>react-native run-android</code>.</p>

<p>For us, we were eventually able to enable remote debugging on webviews and found out
why our webview wasn&rsquo;t running: it simply needed access to the
<a href="https://developer.mozilla.org/en/docs/Web/API/Window/localStorage">localStorage</a>,
which is turned off by default on android webviews<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.</p>

<p><div class="footnotes">
<span>
Notes
</span>
	<ol>
		<li id='fn:1'>We then sent a PR (<a href="https://github.com/facebook/react-native/commit/67931284350ebd2b60d1e11870690272079b1726">https://github.com/facebook/react-native/commit/67931284350ebd2b60d1e11870690272079b1726</a>) so that we can turn DOM storage on at will ;&ndash;) <a href='#fnref:1' rev='footnote'>↩</a></li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
</feed>