<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Category: Vcs | Alessandro Nadalin]]></title>
  <link href="https://odino.org/categories/vcs/atom.xml" rel="self"/>
  <link href="https://odino.org/"/>
  <updated>2021-07-18T10:30:41+00:00</updated>
  <id>https://odino.org/</id>
  <author>
    <name><![CDATA[Alessandro Nadalin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How Did That Bug Happen? Git Bisect to the Rescue!]]></title>
    <link href="https://odino.org/how-did-that-bug-happen-git-bisect-to-the-rescue/"/>
    <updated>2018-06-24T23:47:00+00:00</updated>
    <id>https://odino.org/how-did-that-bug-happen-git-bisect-to-the-rescue</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/git.png"></p>

<p><code>git bisect</code> is a very handy command that lets you <a href="https://git-scm.com/docs/git-bisect">isolate which commit introduced a bug</a>:
you tell it which version of your repository was bug-free and it runs a <a href="https://en.wikipedia.org/wiki/Binary_search_algorithm">binary search</a>
between your current commit and the one that seems to have bug, asking you to
confirm on whether the bug seems to be there at each step of the search.</p>

<p>Curious? Let&rsquo;s see it in action!</p>

<!-- more -->


<p>Let&rsquo;s first create a repository with a bunch of &ldquo;fake&rdquo; commits:</p>

<p>```
/tmp ᐅ mkdir test-repo</p>

<p>/tmp ᐅ cd test-repo</p>

<p>/tmp/test-repo ᐅ git init
Initialized empty Git repository in /tmp/test-repo/.git/</p>

<p>/tmp/test-repo (master ✔) ᐅ touch test.txt</p>

<p>/tmp/test-repo (master ✔) ᐅ for i in $(seq 1 100); do echo $i > test.txt &amp;&amp; git add test.txt &amp;&amp; git commit -m &ldquo;Now: $i&rdquo;; done
[master (root-commit) 28ea863] Now: 1
 1 file changed, 1 insertion(+)
 create mode 100644 test.txt
[master fc57245] Now: 2
 1 file changed, 1 insertion(+), 1 deletion(&ndash;)
[master 81e693c] Now: 3
 1 file changed, 1 insertion(+), 1 deletion(&ndash;)
&hellip;
&hellip;
&hellip;
[master b68f338] Now: 100
 1 file changed, 1 insertion(+), 1 deletion(&ndash;)
```</p>

<p>Let&rsquo;s say that the commit that introduced our bug is where the number in the <code>test.txt</code>
file is higher than 9 (so the commit that starts at 10 is the culprit) &mdash; how would we find it in real life?</p>

<p>Enter <code>git bisect</code> &mdash; let&rsquo;s tell git that:</p>

<ul>
<li>we want to start <em>bisecting</em></li>
<li>our current, latest commit seems to be broken</li>
<li>a commit back in the history does not seem to have the bug</li>
</ul>


<p>&hellip;and let&rsquo;s have git do the heavy-lifting for us:</p>

<p>```
/tmp/test-repo (master ✔) ᐅ git bisect start</p>

<p>/tmp/test-repo (master ✔) ᐅ git bisect bad # Our last commit seems to have a bug</p>

<p>/tmp/test-repo (master ✔) ᐅ git checkout 28ea863 # let&rsquo;s go back to a commit we&rsquo;re sure does not have the bug
Note: checking out &lsquo;28ea863&rsquo;.</p>

<p>You are in &lsquo;detached HEAD&rsquo; state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.</p>

<p>If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:</p>

<p>  git checkout -b &lt;new-branch-name></p>

<p>HEAD is now at 28ea863&hellip; Now: 1</p>

<p>/tmp/test-repo (28ea863 ✔) ᐅ git bisect good
Bisecting: 49 revisions left to test after this (roughly 6 steps)
[bcba603c516783f6ad42b9410f6889e10aea0717] Now: 50
```</p>

<p>Now git will checkout right in the middle of those 2 commits &mdash; it asks you to
test your changes and ask you whether this commit is good or bad. Let&rsquo;s go ahead:</p>

<p>```
/tmp/test-repo (bcba603 ✔) ᐅ cat test.txt
50</p>

<p>/tmp/test-repo (bcba603 ✔) ᐅ git bisect bad
Bisecting: 24 revisions left to test after this (roughly 5 steps)
[b276476e9f1d989f011db4fefc5b92df1685b313] Now: 25</p>

<p>/tmp/test-repo (b276476 ✔) ᐅ cat test.txt
25</p>

<p>/tmp/test-repo (b276476 ✔) ᐅ git bisect bad
Bisecting: 11 revisions left to test after this (roughly 4 steps)
[ba653f4df25a0192d83c813e14ca5851653ab30f] Now: 13</p>

<p>/tmp/test-repo (ba653f4 ✔) ᐅ cat test.txt<br/>
13</p>

<p>/tmp/test-repo (ba653f4 ✔) ᐅ git bisect bad
Bisecting: 5 revisions left to test after this (roughly 3 steps)
[a77f93ed29fe3bfaac69c686ce140a4284acee68] Now: 7</p>

<p>/tmp/test-repo (a77f93e ✔) ᐅ cat test.txt<br/>
7</p>

<p>/tmp/test-repo (a77f93e ✔) ᐅ git bisect good
Bisecting: 2 revisions left to test after this (roughly 2 steps)
[affade823e7f0cb72a1a97052f700c31dc90cfee] Now: 10</p>

<p>/tmp/test-repo (affade8 ✔) ᐅ cat test.txt <br/>
10</p>

<p>/tmp/test-repo (affade8 ✔) ᐅ git bisect bad
Bisecting: 0 revisions left to test after this (roughly 1 step)
[11e5f969458ad51f4009e2e3ac81f38d1ede6d07] Now: 9</p>

<p>/tmp/test-repo (11e5f96 ✔) ᐅ cat test.txt<br/>
9</p>

<p>/tmp/test-repo (11e5f96 ✔) ᐅ git bisect good
affade823e7f0cb72a1a97052f700c31dc90cfee is the first bad commit
commit affade823e7f0cb72a1a97052f700c31dc90cfee
Author: odino <a href="&#x6d;&#x61;&#x69;&#108;&#116;&#111;&#58;&#115;&#111;&#109;&#101;&#46;&#x6f;&#x6e;&#101;&#64;&#103;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#x6d;">&#115;&#111;&#x6d;&#101;&#46;&#x6f;&#x6e;&#101;&#64;&#x67;&#109;&#x61;&#105;&#108;&#x2e;&#99;&#111;&#x6d;</a>
Date:   Sun Jun 24 23:29:02 2018 +0400</p>

<pre><code>Now: 10
</code></pre>

<p>:100644 100644 ec635144f60048986bc560c5576355344005e6e7 f599e28b8ab0d8c9c57a486c89c4a5132dcbd3b2 M  test.txt
```</p>

<p>Amazing, <code>git bisect</code> found out the exact commit our bug was introduced &mdash; nothing more,
nothing less: just an amazing trick that can save you hours of debugging!</p>
]]></content>
  </entry>
  
</feed>