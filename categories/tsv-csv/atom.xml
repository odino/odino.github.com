<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Category: Tsv. Csv | Alessandro Nadalin]]></title>
  <link href="https://odino.org/categories/tsv-csv/atom.xml" rel="self"/>
  <link href="https://odino.org/"/>
  <updated>2022-02-21T09:37:30+00:00</updated>
  <id>https://odino.org/</id>
  <author>
    <name><![CDATA[Alessandro Nadalin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TSV, Better Than CSV]]></title>
    <link href="https://odino.org/tsv-better-than-csv/"/>
    <updated>2018-03-23T14:29:00+00:00</updated>
    <id>https://odino.org/tsv-better-than-csv</id>
    <content type="html"><![CDATA[<p>Lately I&rsquo;ve been getting a few questions on why one should use <code>.tsv</code> files
since CSVs are &ldquo;standard&rdquo; and virtually everyone knows how they work &mdash; so I wanted
to clarify this once and for all.</p>

<!-- more -->


<p><strong>CSVs ARE A PAIN IN THE BACK. USE TSVs SINCE THEY LIKELY WON&rsquo;T SCREW AROUND WITH
YOUR SOURCE DATA.</strong></p>

<p>To put it differently:</p>

<p><blockquote><p>TSV is an alternative to the common comma-separated values (CSV) format, which often causes difficulties because of the need to escape commas â€“ literal commas are very common in text data, but literal tab stops are infrequent in running text. The IANA standard for TSV achieves simplicity by simply disallowing tabs within fields.</p><footer><strong>Wikipedia <a href="https://en.wikipedia.org/wiki/Tab-separated_values">https://en.wikipedia.org/wiki/Tab-separated_values</a> Tab-separated values</strong></footer></blockquote></p>

<p>Do yourself a favor and stop using CSVs, transition over to
TSVs since they&rsquo;re insanely less error-prone &mdash; say goodbye to sleepless nights
trying to figure out why funny data has been uploaded to the DB.</p>

<p>If you&rsquo;re worried about converting old CSV documents, python has the answer:</p>

<p>``` python csv2tsv.sh</p>

<h1>!/usr/bin/env python</h1>

<p>import csv, sys
csv.writer(sys.stdout, dialect=&lsquo;excel-tab&rsquo;).writerows(csv.reader(sys.stdin))
```</p>

<p>It&rsquo;s then a matter of pipes: <code>cat file.csv | csv2tsv.sh</code> and you&rsquo;re done.</p>
]]></content>
  </entry>
  
</feed>