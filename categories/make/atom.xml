<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Category: Make | Alessandro Nadalin]]></title>
  <link href="https://odino.org/categories/make/atom.xml" rel="self"/>
  <link href="https://odino.org/"/>
  <updated>2022-02-21T09:37:30+00:00</updated>
  <id>https://odino.org/</id>
  <author>
    <name><![CDATA[Alessandro Nadalin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Makefile 101]]></title>
    <link href="https://odino.org/makefile-101/"/>
    <updated>2018-06-15T09:53:00+00:00</updated>
    <id>https://odino.org/makefile-101</id>
    <content type="html"><![CDATA[<p>It seems like developers are afraid of using <code>make</code> as they link it to the painful
experience of compiling things from scratch &mdash; the dreaded <code>./configure &amp;&amp; make &amp;&amp; make install</code>.</p>

<p>Part of this fear is due to the description of what <a href="https://linux.die.net/man/1/make">make(1)</a>
does:</p>

<p><blockquote><p>The purpose of the make utility is to determine automatically which pieces of a large program need to be recompiled, and issue the commands to recompile them.</p><footer><strong>Free Software Foundation <a href="https://linux.die.net/man/1/make">https://linux.die.net/man/1/make</a> The Linux man pages</strong></footer></blockquote></p>

<p>Not everyone is aware that make can be easily
used to manage tasks in your projects, so I wanted to share a brief introduction
ad how <a href="https://github.com/odino/mssqldump/blob/master/Makefile">Makefiles help me automate some tasks</a>
in my day to day activities: this brief guide will focus on using make as an
automation tool for tasks rather than a tool for compiling code.</p>

<!-- more -->


<h2>Executing tasks&hellip;</h2>

<p>Let&rsquo;s start by simply creating a <code>Makefile</code>, and defining a task to run:</p>

<p><code>
task:
  date
</code></p>

<p>If you run <code>make task</code> you will bump into the following error:</p>

<p><code>
/tmp ᐅ make task
Makefile:2: *** missing separator.  Stop.
</code></p>

<p>and that&rsquo;s because Makefiles use tabs to indent code. Let&rsquo;s update our example by
using tabs rather than spaces and&hellip;   &hellip;voila:</p>

<p><code>
/tmp ᐅ make task
date
Fri Jun 15 08:34:15 +04 2018
</code></p>

<p>What kind of sorcery is this? Well, <code>make</code> understood you wanted to run the section
<code>task</code> of your makefile, and ran the code (<code>date</code>) within that section in a shell,
outputting both the command and its output. If you want skip outputting the command
that&rsquo;s being executed you can simply prefix it with an <code>@</code>:</p>

<p><code>
task:
  @date
</code></p>

<p><code>
/tmp ᐅ make task
Fri Jun 15 08:34:15 +04 2018
</code></p>

<p>The first task in a <code>Makefile</code> is the <em>default</em> one, meaning we can run <code>make</code>
without any argument:</p>

<p><code>
/tmp ᐅ make       
Fri Jun 15 08:37:11 +04 2018
</code></p>

<p>You can add additional tasks in your <code>Makefile</code> and call them with <code>make $TASK</code>:</p>

<p>```
task:</p>

<pre><code>@date
</code></pre>

<p>some:</p>

<pre><code>sleep 1
echo "Slept"
</code></pre>

<p>thing:</p>

<pre><code>cal
</code></pre>

<p>```</p>

<p>```
/tmp ᐅ make thing
cal</p>

<pre><code> June 2018        
</code></pre>

<p>Su Mo Tu We Th Fr Sa</p>

<pre><code>            1  2  
</code></pre>

<p> 3  4  5  6  7  8  9<br/>
10 11 12 13 14 15 16<br/>
17 18 19 20 21 22 23<br/>
24 25 26 27 28 29 30<br/>
```</p>

<h2>&hellip;in a specific order</h2>

<p>A lot of times you will want to execute a task before the current one &mdash; think of
it as <code>before</code> or <code>after</code> hooks in your automated tests. This can be done by specifying
a list of tasks right after your task&rsquo;s name:</p>

<p>```
task: thing some</p>

<pre><code>@date
</code></pre>

<p>&hellip;
```</p>

<p>```
/tmp ᐅ make task
cal</p>

<pre><code> June 2018        
</code></pre>

<p>Su Mo Tu We Th Fr Sa</p>

<pre><code>            1  2  
</code></pre>

<p> 3  4  5  6  7  8  9<br/>
10 11 12 13 14 15 16<br/>
17 18 19 20 21 22 23<br/>
24 25 26 27 28 29 30</p>

<p>sleep 1
echo &ldquo;Slept&rdquo;
Slept
Fri Jun 15 08:40:23 +04 2018
```</p>

<h2>Variables</h2>

<p>Defining and using variables is fairly straightforward:</p>

<p>```
VAR=123</p>

<p>print_var:</p>

<pre><code>    echo ${VAR}
</code></pre>

<p>&hellip;
```</p>

<p><code>
/tmp ᐅ make print_var    
echo 123
123
</code></p>

<p>but watch out as your shell variables won&rsquo;t work out of the box:</p>

<p>```
print_user:</p>

<pre><code>    echo $USER
</code></pre>

<p>```</p>

<p><code>
/tmp ᐅ make print_user   
echo SER
SER
</code></p>

<p>as you will need to escape them with either <code>${VAR}</code> or <code>$$VAR</code>.</p>

<p>Passing flags is also a bit different from what you might be used to &mdash; they&rsquo;re
positioned as flags but use the same syntax as environment variables:</p>

<p>```
print_foo:</p>

<pre><code>echo $$FOO
</code></pre>

<p>```</p>

<p>```
/tmp ᐅ make print_foo
echo $FOO</p>

<p>/tmp ᐅ make print_foo FOO=bar
echo $FOO
bar
```</p>

<h2>The shell</h2>

<p>```</p>

<h2>5.3.1 Choosing the Shell</h2>

<p>The program used as the shell is taken from the variable <code>SHELL'.  If
this variable is not set in your makefile, the program</code>/bin/sh' is
used as the shell.
```</p>

<p>Make will use <code>sh</code> to execute code in a task, meaning some stuff might not work
as you&rsquo;re probably using some syntax that&rsquo;s specific to bash &mdash; in order to switch
you can simply specify the <code>SHELL</code> variable (in our case
we would want to use <code>SHELL:=/bin/bash</code>).</p>

<p>As seen before, sometimes you will need to use a quirky, custom syntax to get a
regular shell command to work in <code>make</code> &mdash; just like variables need to be escaped
with a <code>$$</code> or <code>${...}</code>, you will need to use <code>shell</code> when using <a href="http://tldp.org/LDP/abs/html/commandsub.html">command substitution</a>:</p>

<p>```
subshell:</p>

<pre><code>echo $(shell echo ${USER})
</code></pre>

<p>```</p>

<p><code>
/tmp ᐅ make subshell
echo alex
alex
</code></p>

<p>Don&rsquo;t believe me? Try removing the <code>shell</code> instruction and here&rsquo;s what you&rsquo;re going
to get:</p>

<p>```
/tmp ᐅ make subshell
echo</p>

<p>```</p>

<h2>Conclusion</h2>

<p>There&rsquo;s so much more <code>make</code> can do, and so many more quirky things you might need
to find out to decrease the wps (<em>WTF per second</em>) when working with it :) that
doesn&rsquo;t erase the fact that <code>make</code> is an extremely helpful took that allows us
to automate workflows with ease, without having to setup very complicated pipelines,
by writing tab-separated lines with a bunch of shell commands instead.</p>
]]></content>
  </entry>
  
</feed>