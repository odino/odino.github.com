<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Category: Web | Alessandro Nadalin]]></title>
  <link href="https://odino.org/categories/web/atom.xml" rel="self"/>
  <link href="https://odino.org/"/>
  <updated>2021-07-24T08:15:36+00:00</updated>
  <id>https://odino.org/</id>
  <author>
    <name><![CDATA[Alessandro Nadalin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HTTP Cache 101: Scaling the Web]]></title>
    <link href="https://odino.org/http-cache-101-scaling-the-web/"/>
    <updated>2017-06-18T22:05:00+00:00</updated>
    <id>https://odino.org/http-cache-101-scaling-the-web</id>
    <content type="html"><![CDATA[<p><img class="right nobo" src="/images/internetz.png"></p>

<p>I recently gave another read at my original post &ldquo;<a href="http://odino.org/rest-better-http-cache/">REST better: HTTP cache</a>&rdquo;
and I felt compelled to write a more in-depth dive into the subject, especially since it&rsquo;s
one of the most popular topics in this blog; at the same time, with the advent of
new technologies such as <a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers">sevice workers</a>, people jumped into the bandwagon of
offline applications without, in my opinion, understanding that the HTTP cache
provides some basic but extremely interesting features for offline experiences
&mdash; thus, I want to shed some light on one of the most ingenious sections of the
HTTP protocol.</p>

<!-- more -->


<h2>What is the HTTP cache?</h2>

<p>First of all, let&rsquo;s start by dividing HTTP into 2 entities:</p>

<ul>
<li>the <a href="https://www.w3.org/Protocols/rfc2616/rfc2616.txt">spec</a><sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>, which highlights how messages can be exchanged between clients and servers</li>
<li>the implementation (for example, Google Chrome is an HTTP client, Nginx implements an HTTP server and so on)</li>
</ul>


<p>So, for example, with HTTP/2 we have seen a revamped <em>implementation</em>, one that
brings TSL by default, that turned plaintext messages (the way messages were exchanged
in HTTP/1) into binary, along with the introduction of <a href="https://en.wikipedia.org/wiki/Multiplexing">multiplexing</a>
(in short: one connection can channel multiple requests and responses) and the
likes &mdash; HTTP/2 was a massive upgrade to HTTP and is making the web a much
safer, faster place. At the same time, <strong>the spec itself didn&rsquo;t change as much</strong>, as
the semantics of the protocol have been widely unaffected by HTTP/2.</p>

<p>HTTP caching falls under the HTTP spec, as it&rsquo;s simply a chapter that defines how messages can be cached by both clients &amp; servers: the current
version of the HTTP caching spec is <a href="https://tools.ietf.org/html/rfc7234">RFC7234</a>,
so you can always head there and have a look by yourself.</p>

<p>The goal of the HTTP caching spec is, in short, to:</p>

<p><blockquote><p>[&hellip;] significantly improve performance by reusing a prior response message to satisfy a current request.</p><footer><strong>RFC7234 <a href="https://tools.ietf.org/html/rfc7234">https://tools.ietf.org/html/rfc7234</a></strong></footer></blockquote></p>

<p>or, as <a href="https://tomayko.com/">some smart guy</a> once said:</p>

<p><blockquote><p>[&hellip;] never generate the same response twice</p><footer><strong>Ryan Tomayko <a href="https://tomayko.com/blog/2008/rack-cache-announce">https://tomayko.com/blog/2008/rack-cache-announce</a> Introducing Rack Cache</strong></footer></blockquote></p>

<p>Surround your pullquote like this {" text to be quoted "}</p>

<h2>Expiration</h2>

<p>This is the sort of caching you&rsquo;re used to see every day, which allows you to specify TTLs
(<em>time to live</em>) for static assets like JS, CSS &amp; the likes: we know those assets
are cacheable for a long time, so we specify an expiration date on those resources.</p>

<p>As I mentioned, expiration is generally used for static assets, but can be used
for any kind of resource (ie. <code>GET /news/1</code>), so don&rsquo;t just think caching is for
content that never changes (such as a minified JS file).</p>

<p>How can we implement expiration though? Through 2 very simple HTTP headers.</p>

<h3>Expires</h3>

<p>The <code>Expires</code> HTTP header allows  us to specify a future date that defines until
when a resource should be cacheable:</p>

<p><img class="center nobo" src="/images/expires.png"></p>

<p>If the client needs to fetch the same resources later on, it will first figure out
if it has expired and, if not, use the local copy stored in the cache, without
hitting the origin server. An example implementation might look like:</p>

<p>``` js
cache = {}</p>

<p>server.on(&lsquo;request&rsquo;, (req, res) => {
  if (cache[req.url] &amp;&amp; cache[req.url].headers.expires > now) {</p>

<pre><code>return res.send(cache[req.url])
</code></pre>

<p>  }</p>

<p>  upstreamResponse = server.forward(req)</p>

<p>  if (upstreamResponse.headers.expires) {</p>

<pre><code>cache[req.url] = upstreamResponse;
</code></pre>

<p>  }</p>

<p>  res.send(upstreamResponse)
})
```</p>

<p>This is a very simplistic implementation, but should give you an idea of the
process an <em>HTTP intermediary</em> (a browser, a proxy, etc) goes through when
implementing basic HTTP cache through the <code>Expires</code> header.</p>

<h3>Cache-Control</h3>

<p>If we want to get a bit fancier, we can use the <code>Cache-Control</code> header, which allows
us more control over how a response should be cached; for example, here&rsquo;s an HTTP
response using <code>Cache-Control</code>:</p>

<p>``` bash
HTTP/1.1 200 OK
Content-Type: application/json
Content-Length: &hellip;
Cache-Control: public, max-age=3600, s-maxage=60, stale-if-error=600, no-transform</p>

<p>// &hellip;JS content here&hellip;
```</p>

<p>Wow, that&rsquo;s a lot of stuff to process, so let&rsquo;s break it down:</p>

<ul>
<li><code>Cache-Control</code> allows you to embed multiple caching directives into one header</li>
<li>directives are comma separated</li>
<li>in most cases, directives are parsed as key-value pairs (ie. <code>key=val</code>) &mdash; some of them, though, require no value (ie. <code>no-transform</code>)</li>
<li>they control different aspects of the cacheability of a resource</li>
</ul>


<p>Surround your pullquote like this {" text to be quoted "}</li>
</ul>


<h3>Stale-* directives</h3>

<p>An ingenious trick, the <code>stale-while-revalidate</code> and <code>stale-if-error</code> cache-control
directives are worth a mention on their own, as what they let you achieve is <a href="https://tools.ietf.org/html/rfc5861">pretty
interesting</a>:</p>

<ul>
<li><code>stale-if-error</code> tells the cache that it can serve a cached response if, by any chance, it encounters an error when fetching a fresh response from the origin server. In other words, this means that an HTTP cache can be smart enough to serve cached content when you server starts returning 500 errors &mdash; talk about fault tolerance!</li>
</ul>


<p><img class="center nobo" src="/images/stale-if-error.png"></p>

<ul>
<li><code>stale-while-revalidate</code> lets you serve cached content while refreshing the cache instead. This is fairly interesting as, if 100 clients are accessing your cache at <em>T0</em>, you can serve them a cached resource at <em>T1</em> (even if it&rsquo;s  stale), while revalidating the cache in background. If a client then requests the same resource at <em>T2</em>, he will receive the version that&rsquo;s been revalidated from the origin server</li>
</ul>


<p><img class="center nobo" src="/images/stale-while-revalidate.png"></p>

<p>Funny enough, <a href="https://www.mnot.net/blog/2014/06/01/chrome_and_stale-while-revalidate">Chrome has been considering implementing this directive</a> for quite
some time, and last I heard it was still just <a href="https://www.chromestatus.com/features/5050913014153216">under consideration</a>,
though it looks like <a href="https://bugs.chromium.org/p/chromium/issues/detail?id=348877#c68">it might never going to make it to Chrome Stable</a>.</p>

<h3>Pragma: an obsolete header you&rsquo;ll still see around</h3>

<p><code>Cache-Control</code> was introduced in HTTP/1.1, meaning there had to be some way to
control caches in the olden HTTP/1.0 days &mdash; that would be
the <a href="https://tools.ietf.org/html/rfc7234#section-5.4">Pragma header</a>.</p>

<p><code>Pragma</code> doesn&rsquo;t let you do much, as you can just tell caches not to cache through
<code>Pragma: no-cache</code> &mdash; nothing too complicated here.</p>

<p>What&rsquo;s interesting, though, is that a few HTTP clients will still consider responses
cacheable if they don&rsquo;t see a <code>no-cache</code> in the <code>Pragma</code>, and so the best practice
to avoid caching has been to send both <code>Cache-Control</code> and <code>Pragma</code>:</p>

<p><code>
HTTP/1.1 200 Ok
Cache-Control: no-cache
Pragma: no-cache
</code></p>

<p>At the same time, a peculiar use of Pragma is by telling HTTP/1.0 caches not to
cache (via <code>Pragma</code>) while allowing HTTP/1.1 caches to do so (via <code>Cache-Control</code>):</p>

<p><code>
HTTP/1.1 200 Ok
Cache-Control: max-age=3600
Pragma: no-cache
</code></p>

<p><strong>Enough with expiration</strong>: it&rsquo;s now time to move on to validation, a more expensive
but granular way to implement HTTP caching.</p>

<h2>Validation</h2>

<p>Expiration provides a very interesting way to keep clients off the server, at the
cost of serving stale content more often than we&rsquo;d might like: in cases when that&rsquo;s
not an acceptable compromise you can use <strong>validation</strong>, as it ensures clients will
always be able to receive the latest, most fresh version of a resource.</p>

<p><img class="right nobo" src="/images/if-none.png"></p>

<p>At its core, validation works in a very simple manner: when you request a resource,
the server assigns a &ldquo;tag&rdquo; to it (let&rsquo;s say <code>v1</code>) and the next time you request the
same resource you include the tag in your request; the server, at this point, can
quickly check if the resource has changed: if so, it returns the new version, else
it tells you to use the cached version you should have with you.</p>

<p>In HTTP words this is how it basically works:</p>

<p>``` bash</p>

<h1>First request</h1>

<p>GET /news/1 HTTP/1.1</p>

<h1>Response</h1>

<p>HTTP/1.1 200 OK
Etag: 1234</p>

<p>The content of the resource</p>

<h1>Second request</h1>

<p>GET /news/1 HTTP/1.1
If-None-Match: 1234</p>

<h1>Response if the content has changed</h1>

<p>HTTP/1.1 200 OK
Etag: 9876</p>

<p>The NEW content of the resource</p>

<h1>Response if the content is the same</h1>

<p>HTTP/1.1 304 Not Modified
```</p>

<p>As you see, returning a <code>304 Not Modified</code> is cheaper as it doesn&rsquo;t contain as many
information as the &ldquo;real&rdquo; resource: less packets traveling through the network, thus
a faster response.</p>

<p>At the same time, calculating an <code>Etag</code> (the HTTP header used to tag resources) is
generally cheaper than rendering your resource again &mdash; let&rsquo;s look at some pseudo-code
to understand what we&rsquo;re talking about:</p>

<p>``` js
// GET /news/:id
server.on(&lsquo;request&rsquo;, (req, res) => {
  news = db.fetchNews(req.params.id)</p>

<p>  if (req.headers.etag === news.version) {</p>

<pre><code>return res.send(304)
</code></pre>

<p>  }</p>

<p>  res.render(&lsquo;news_template.html&rsquo;, {news})
})
```</p>

<p>We have saved the server some extra work by not rendering the news template all
over again: this might feel like a small saving, but put it in the context of
thousands of requests every day and you see where we&rsquo;re going.</p>

<p>Looking back at our second request:</p>

<p><code>bash
GET /news/1 HTTP/1.1
If-None-Match: 1234
</code></p>

<p>you might be wondering what&rsquo;s that <code>If-None-Match</code>, so let me break the whole
process down for you:</p>

<ul>
<li>client requests a resource</li>
<li>server returns it and tags it with the <code>Etag</code> header</li>
<li>client requests the same resource again, and tells the server to return it only if the resource&rsquo;s etag doesnt match the one we&rsquo;re sending (that&rsquo;s why the header is called <code>If-None-Match</code>)</li>
</ul>


<p>A request that contains the <code>If-None-Match</code> header is called a &ldquo;conditional request&rdquo;:
it&rsquo;s expected to fetch a resource only if the condition it is sending
won&rsquo;t be satisfied (the condition is that the client&rsquo;s etag matches the server&rsquo;s).</p>

<p>Conditional requests and validation can be implemented with etags as well as dates:
if you&rsquo;re more comfortable using the latter (think of an <code>updated_at</code> column in the DB)
you can replace <code>Etag</code> with <code>Last-Modified</code> and <code>If-None-Match</code> with <code>If-Modified-Since</code>:</p>

<p>``` bash</p>

<h1>First request</h1>

<p>GET /news/1 HTTP/1.1</p>

<h1>Response</h1>

<p>HTTP/1.1 200 OK
Last-Modified: Wed, 21 Oct 2020 06:00:00 GMT</p>

<p>The content of the resource</p>

<h1>Second request</h1>

<p>GET /news/1 HTTP/1.1
If-Modified-Since: Wed, 21 Oct 2020 06:00:00 GMT</p>

<h1>Response if the content was updated after that date</h1>

<p>HTTP/1.1 200 OK
Last-Modified: Wed, 30 Oct 2020 06:05:00 GMT</p>

<p>The NEW content of the resource</p>

<h1>Response if the content is the same</h1>

<p>HTTP/1.1 304 Not Modified
```</p>

<p>Again, the spec is very simple and doesn&rsquo;t get too fancy, yet it&rsquo;s powerful enough
to let you save so much time and data by returning <code>304</code> rather than &ldquo;full&rdquo; responses &mdash;
that&rsquo;s why I like the HTTP caching spec: it&rsquo;s so clever and simple!</p>

<h2>Who can cache my responses?</h2>

<p>HTTP is a layered protocol, meaning there can be countless intermediaries between
the client and the server &mdash; a picture is worth
a thousand words:</p>

<p><img class="center nobo" src="/images/types-caches.png"></p>

<p>So, who are all these guys that can cache resources all along the way?</p>

<ul>
<li>nothing to explain in terms of <strong>browsers</strong>, as we&rsquo;re all familiar with them.
Worth to note that, when you use <code>curl</code> from your command-line, that&rsquo;s your browser</li>
<li><strong>proxies</strong>, instead, are generally installed between the client and the internet,
and they provide a shield between the two. Proxies are shared caches as, for example,
you could install them at your company so that multiple browsers use the same proxy
&mdash; that way, if I request a cacheable resource and one of my co-workers requests the
same, he will be served the cached response I generated, by the proxy</li>
<li><strong>ISPs / the internet</strong>: well, that&rsquo;s the backbone of your internet connection, and
they could implement caching on their own</li>
<li>proxies installed on the server-side are called <strong>reverse proxies</strong> instead,
as their job is to shield multiple servers from requests. Reverse proxies are also
called &ldquo;HTTP accelerators&rdquo;, as their main job is to avoid requests from hitting
the origin servers. <a href="https://varnish-cache.org/">Varnish</a> is one of the most popular reverse proxies out there</li>
<li>last but not least you&rsquo;ve got your <strong>origin servers</strong>, where your applications
run. They can implement HTTP caching on their own, even though it&rsquo;s generally
preferred to have a dedicated reverse proxy to offload origins</li>
</ul>


<h2>Warning: when things don&rsquo;t go as planned&hellip;</h2>

<p>An interesting header is <code>Warning</code>, as it&rsquo;s used to signal that <em>something went wrong</em>
when fetching the response from the upstream, something that&rsquo;s hard to infer from the HTTP status code
alone: for example, when the cache knows that the response being served is stale, it
could include a <code>Warning: 110 - "Response is Stale"</code> to inform the client that the response
he&rsquo;s receiving isn&rsquo;t fresh at all &mdash; that, for example, could happen when <code>stale-while-revalidate</code>
or <code>stale-if-error</code> kick in:</p>

<p>```</p>

<h1>The HTTP status code says everything&rsquo;s good,</h1>

<h1>but the warning header tells the client the</h1>

<h1>response being served is not fresh</h1>

<p>HTTP/1.1 200 Ok
Warning: 110 &ndash; &ldquo;Response is Stale&rdquo;
```</p>

<h2>A note on Service Workers</h2>

<p>Surround your pullquote like this {" text to be quoted "}</p>

<p><img class="right nobo" src="/images/99-devs.png"></p>

<p>Service workers are great because they let us implement functionalities we traditionally
never had on the web (think of <a href="https://developers.google.com/web/fundamentals/getting-started/codelabs/push-notifications/">push notifications</a>, <a href="https://developers.google.com/web/fundamentals/engage-and-retain/app-install-banners/">add to homescreen</a>, <a href="https://developers.google.com/web/updates/2015/12/background-sync">background sync</a>
and the likes) but, for stuff that&rsquo;s been there, I
would advise to stick to the basics.</p>

<p>Let&rsquo;s have a look at an example code from a service worker that implements its own
caching &mdash; as you see not most straightforward code you&rsquo;ll bump
into:</p>

<p>``` js
this.addEventListener(&lsquo;fetch&rsquo;, function(event) {
  event.respondWith(</p>

<pre><code>caches.match(event.request).then(function(resp) {
  return resp || fetch(event.request).then(function(response) {
    caches.open('v1').then(function(cache) {
      cache.put(event.request, response.clone());
    });
    return response;
  });
}).catch(function() {
  return caches.match('/sw-test/gallery/myLittleVader.jpg');
})
</code></pre>

<p>  );
});
```</p>

<p>As Jake Archibald, developer advocate at Google,
puts it:</p>

<p><blockquote><p>You can hack around poor caching in your service worker, but you&rsquo;re way better off fixing the root of the problem. Getting your [HTTP] caching right makes things easier in service worker land, but also benefits browsers that don&rsquo;t support service worker (Safari, IE/Edge), and lets you get the most out of your CDN.</p><footer><strong>Jake Archibald <a href="https://jakearchibald.com/2016/caching-best-practices/">https://jakearchibald.com/2016/caching-best-practices/</a> Caching best practices</strong></footer></blockquote></p>

<p>Ditto.</p>

<h2>Conclusion</h2>

<p>Caching in HTTP has been here for almost 2 decades, it&rsquo;s a battle-tested
part of the protocol and allows you to efficiently trade freshness with scale
(emphasis on <em>efficiently</em>): there&rsquo;s no reason to implement our own application-level
caches when the protocol we use to exchange messages allows you to do the same,
for free, by just jamming a bunch of headers in your responses.</p>

<p>HTTP caching is truly the hidden gem of the protocol, and I wish more people would
be aware of the inner workings of the spec &mdash; to me it is a great example of
achieving great results without compromising on complexity, and this is the kind
of design we should aim towards when building software.</p>

<p>In short: <em>the HTTP cache is great. Be like the HTTP cache</em>.</p>

<h2>Further readings</h2>

<p>If you enjoyed this article I would suggest you to read further stuff on the HTTP
cache:</p>

<ul>
<li>the complete <a href="https://tools.ietf.org/html/rfc7234">HTTP caching spec</a></li>
<li>I have a <a href="/categories/cache/">few articles</a> on this very same blog</li>
<li><a href="https://www.mnot.net/blog/">Mark Nottingham&rsquo;s blog</a> (Mark is known for his contribution to the HTTP protocol, web caching and for being the &ldquo;chairman&rdquo; of HTTP/2)</li>
<li><a href="https://tomayko.com/blog/2008/rack-cache-announce">Ryan Tomayko</a> is a very smart guy who spoke about HTTP caching in the past. He turns whatever he touches into gold, so follow him ;&ndash;)</li>
<li><a href="https://www.subbu.org/">Subbu Allamaraju</a> is a well-known member of the REST community and <a href="https://www.subbu.org/blog/2005/01/http-caching">has written about HTTP caching</a> in the past</li>
</ul>


<p>See you next time!</p>

<p><div class="footnotes">
<span>
Notes
</span>
	<ol>
		<li id='fn:1'>Worth to note that RFC2616 has been superseded by a few updates (RFCs 7230, 7231, 7232, 7233, 7234, 7235, which update part of the original spec) <a href='#fnref:1' rev='footnote'>↩</a></li>
	</ol>
</div>
</p>

<!--

BALSAMIQ

{"mockup":{"controls":{"control":[{"ID":"3","measuredH":"128","measuredW":"128","properties":{"icon":{"ID":"server","size":"xxlarge"}},"typeID":"Icon","x":"871","y":"251","zOrder":"2"},{"ID":"5","measuredH":"128","measuredW":"128","properties":{"icon":{"ID":"laptop","size":"xxlarge"}},"typeID":"Icon","x":"246","y":"261","zOrder":"3"},{"ID":"10","h":"50","measuredH":"126","measuredW":"100","properties":{"hasHeader":"false","icons":{"icons":[{"size":null}]},"rowHeight":"39","size":"17","text":"GET /static/app.js","verticalScrollbar":"false"},"typeID":"List","w":"190","x":"517","y":"220","zOrder":"4"},{"ID":"14","h":"55","measuredH":"54","measuredW":"439","properties":{"curvature":"1","direction":"top","leftArrow":"false","p0":{"x":0,"y":44},"p1":{"x":0.4808345264880343,"y":0.10920433626508488},"p2":{"x":439,"y":54},"rightArrow":"true","shape":"bezier","text":""},"typeID":"Arrow","w":"440","x":"401","y":"232","zOrder":"1"},{"ID":"16","h":"30","measuredH":"54","measuredW":"439","properties":{"curvature":"-1","direction":"top","leftArrow":"true","p0":{"x":0,"y":0},"p1":{"x":0.48416925542342376,"y":-0.055030313088304694},"p2":{"x":439,"y":10},"rightArrow":"false","shape":"bezier","text":""},"typeID":"Arrow","w":"440","x":"401","y":"378","zOrder":"0"},{"ID":"17","h":"120","measuredH":"140","measuredW":"200","properties":{"size":"18","text":"HTTP/1.1 200 Ok\nContent-Type: application/javascript\nContent-Length: 1234\n*Expires: Wed, 21 Oct 2020 07:00:00*"},"typeID":"TextArea","w":"332","x":"455","y":"351","zOrder":"5"}]},"measuredH":"471","measuredW":"999","mockupH":"251","mockupW":"753","version":"1.0"}}
 -->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web APIs of the Future]]></title>
    <link href="https://odino.org/web-apis-of-the-future/"/>
    <updated>2017-04-15T12:47:00+00:00</updated>
    <id>https://odino.org/web-apis-of-the-future</id>
    <content type="html"><![CDATA[<p>I generally like to think of myself as a server-side guy but, since a few
years, I&rsquo;ve been more and more involved with the frontend &mdash; especially
since logic, and not just UI, started to become a hot-topic for the client as
well (this is all thanks to Angular, y'all remember that thingy?).</p>

<p>So, more often than I admit, I keep an eye on the upcoming features of various
browsers through their <em>platform status</em> pages, and I&rsquo;ve decided to start sharing
a bunch of the stuff you should probably be excited as well. I plan of writing
a couple articles like this one on a yearly basis, as browsers evolve quickly and
there&rsquo;s always lots of stuff to be looking forward to.</p>

<!-- more -->


<h2>First things first: sources</h2>

<ul>
<li><a href="https://www.chromestatus.com/features">Chrome</a></li>
<li><a href="https://developer.microsoft.com/en-us/microsoft-edge/platform/status/">Edge</a></li>
<li><a href="https://platform-status.mozilla.org/">Firefox</a></li>
<li><a href="https://webkit.org/status/">Webkit</a></li>
</ul>


<p>These browsers provide different functionalities on their status pages, so I
generally tend to spend more time on Chrome &amp; Edge&rsquo;s since they let me filter
stuff out with ease. Webkit allows the same but, hell let&rsquo;s be honest, I&rsquo;m not
very interested in their roadmap, as I think they&rsquo;re being
<a href="https://arstechnica.com/information-technology/2015/06/op-ed-safari-is-the-new-internet-explorer/">strangely slow to adopt</a>.</p>

<h2>Notable highlights</h2>

<p>The past few days were a boom for MS Edge, which rolled out some <a href="https://blogs.windows.com/msedgedev/2017/04/11/introducing-edgehtml-15/?utm_content=buffer9f1e8&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer#JYTlGJyKDuRVomoG.97">major updates</a>
including:</p>

<ul>
<li><a href="https://developers.google.com/web/fundamentals/discovery-and-monetization/payment-request/">PaymentRequest API</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function">async/await</a></li>
<li><a href="https://github.com/google/brotli">Brotli</a></li>
<li><a href="https://www.w3.org/TR/CSP2/">CSP level 2</a></li>
</ul>


<p>This was personally very surprising for me, as I always considered Edge an
afterthought &mdash; how naive of me. These guys are here to push forward, and
quickly buying into the PaymentRequest API is a huge sign for online payments. Love it!</p>

<h2>Upcoming stuff</h2>

<p><img class="right" src="/images/chrome.jpg"></p>

<p>In Chrome canary:</p>

<ul>
<li><a href="https://www.chromestatus.com/features/5694225681219584">Feature Policy</a>, a way to <a href="https://wicg.github.io/feature-policy/">selectively disable browser features</a></li>
<li><a href="https://www.chromestatus.com/features/5695378309513216">Get Installed Related Apps API</a>,
which will let website owners figure out <a href="https://github.com/WICG/get-installed-related-apps/blob/master/EXPLAINER.md">if the user has a (related) native app installed</a></li>
<li><a href="https://www.chromestatus.com/features/6443143280984064">Temporarily stop permission requests after 3 dismissals</a>,
so that annoying websites won&rsquo;t screw around as much</li>
</ul>


<p>Under development:</p>

<ul>
<li><a href="https://www.chromestatus.com/features/5861289330999296">Asynchronous Clipboard API</a>,
a modern clipboard API</li>
<li><a href="https://www.chromestatus.com/features/5684934484164608">Dynamc imports (from ESNext)</a>,
to dynamically load modules at runtime</li>
<li><a href="https://www.chromestatus.com/features/5365692190687232">ES6 modules</a></li>
<li><a href="https://www.chromestatus.com/features/5669923372138496">Web Authentication</a>,
to support serious <a href="https://w3c.github.io/webauthn/">authentication on the client</a></li>
<li><a href="https://www.chromestatus.com/features/5662315307335680">Web Share Target</a>, a consequence of the <a href="https://developers.google.com/web/updates/2016/10/navigator-share">Web Share API</a>,
so that websites can register themselves as &ldquo;targets&rdquo; of a share action (check this <a href="https://blog.hospodarets.com/demos/web-share-api/">demo of Web Share on Chrome for Android</a>)</li>
<li><a href="https://www.chromestatus.com/features/4532810371039232">WebVR</a>, which integrates
VR gears such as the Oculus with your browser (fun times ahead!)</li>
</ul>


<p><img class="right" src="/images/edge.png"></p>

<p>MS Edge has previews of <a href="https://developer.microsoft.com/en-us/microsoft-edge/platform/status/?q=edge%3A%27Preview%20Release%27">Web Assembly and ES6 modules</a>
as well, but what&rsquo;s under development is even more exciting:</p>

<ul>
<li><a href="https://developer.microsoft.com/en-us/microsoft-edge/platform/status/backgroundsyncapi/?q=edge%3A%27In%20Development%27">Background Sync API</a>,
to let Service Workers know when the user&rsquo;s back online</li>
<li><a href="https://developer.microsoft.com/en-us/microsoft-edge/platform/status/serviceworker/?q=edge%3A%27In%20Development%27">Service Workers</a> of course :)</li>
<li><a href="https://developer.microsoft.com/en-us/microsoft-edge/platform/status/pushapi/?q=edge%3A%27In%20Development%27">Web Push notifications</a></li>
<li><a href="https://developer.microsoft.com/en-us/microsoft-edge/platform/status/urlapi/?q=edge%3A%27In%20Development%27">URL API</a>, to manipulate URLs, a feature that&rsquo;s there in all of the other major browsers</li>
</ul>


<p>Looks like Edge is gaining momentum and closing the gap, which is definitely the
right direction for them. Of course, as you might notice, the road ahead is <a href="https://developer.microsoft.com/en-us/microsoft-edge/platform/status/consoletable/?q=edge%3A%27Under%20Consideration%27">still
long</a> ;&ndash;)</p>

<p><img class="right" src="/images/firefox.png"></p>

<p>Firefox&rsquo;s <a href="https://platform-status.mozilla.org/">focusing</a> on:</p>

<ul>
<li>Background Sync</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM">Shadow DOM</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/Manifest">Web Manifest</a></li>
<li>PaymentRequest</li>
</ul>


<p><img class="right" src="/images/safari.gif"></p>

<p>whereas <a href="https://webkit.org/status/">Safari is probably at its lamest</a> with:</p>

<ul>
<li><a href="http://asmjs.org/">ASM.js</a></li>
<li><a href="https://www.w3.org/TR/WebCryptoAPI/">Web Cryptography API</a></li>
<li><a href="http://webassembly.org/">WebAssembly</a></li>
</ul>


<p>currently being developed &mdash; or, at least, those are the features that I think
are going to impact us, common mortals, the most.</p>

<p>Service Workers, Web Authentication, Web App Manifest and <a href="https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity">Subresource Integrity</a>
are all under consideration though.</p>

<h2>Conclusion</h2>

<p>As usual, I think Chrome is pushing ahead, even though sometimes their ideas are
quite weird &mdash; but that&rsquo;s part of trying to innovate. I&rsquo;m very happy to see
Firefox working on solid stuff and Edge catching up with the biggest themes of
2016 (<em>aka Service Workers</em>).</p>

<p>I see the <strong>PaymentRequest API as the clear winner of the past 6 months</strong>, and I&rsquo;m
really excited as this will mean a lot for online payments and e-commerce as well.
Browsers are becoming more of a platform rather than just a rendering engine, and
that makes it possible to create app-like experiences for your users<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.</p>

<p>Last but not least, time has come to <strong>start shipping <a href="https://github.com/google/brotli">Brotli</a> to your users</strong>:
<a href="https://community.akamai.com/thread/2956#comment-15758">Akamai supports it since few weeks</a>
and <a href="https://caniuse.com/#search=brotli">browser support is kind of complete</a> (again, Safari&hellip;)
&mdash; time to knock on your CDN provider&rsquo;s door!</p>

<p><div class="footnotes">
<span>
Notes
</span>
	<ol>
		<li id='fn:1'>And that&rsquo;s why, in my opinion, Safari is pushing back big time <a href='#fnref:1' rev='footnote'>↩</a></li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2 Web APIs I'm Particularly Excited About]]></title>
    <link href="https://odino.org/2-web-apis-im-particularly-excited-about/"/>
    <updated>2016-10-25T01:02:00+00:00</updated>
    <id>https://odino.org/2-web-apis-im-particularly-excited-about</id>
    <content type="html"><![CDATA[<p>In the past few months we have seen Google and Apple push in 2
very different directions &mdash; as much as Apple has been steady
pushing publishers to embrace their app market, Google has been
working on a bunch of initiatives to improve the &ldquo;web platform&rdquo;,
rolling out projects like <a href="http://tech.namshi.com/blog/2016/09/20/embracing-amp-for-the-speed-and-profit/">AMP</a> and giving a lot of coverage to
technologies like <a href="https://developers.google.com/web/progressive-web-apps/">PWAs</a>.</p>

<p>I&rsquo;m particularly excited about the work that Google is putting
on the web as they&rsquo;re slowly bridging the gap with the native experience,
and there are 2 Web APIs I can&rsquo;t really wait to use in
production to give <a href="https://www.namshi.com/">our users</a> an enhanced
experience on the web.</p>

<!--  more -->


<p>As much as these aren&rsquo;t coming just from Google, I need to tribute them
to big G as they&rsquo;re the ones who are throwing them onto the mainstream:
I&rsquo;m talking about <a href="https://www.w3.org/TR/payment-request/">Web Payments</a> and
<a href="https://developers.google.com/web/fundamentals/engage-and-retain/push-notifications/">Web Push Notifications</a>.</p>

<h2>Web Push Notifications</h2>

<p>You can start adding push notifications to your web app today: they involve
installing a <a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers">service worker</a>
which &ldquo;lives&rdquo; in background and is capable of listening for push events.</p>

<p><img class="center <a" src="href="https://blog.kissmetrics.com/wp-content/uploads/2015/11/push-notifications-desktop-mobile.png">https://blog.kissmetrics.com/wp-content/uploads/2015/11/push-notifications-desktop-mobile.png</a>"></p>

<p>Let&rsquo;s test it out real quick on Chrome:</p>

<ul>
<li>if you&rsquo;re reading this article from a <strong>desktop machine</strong>:

<ul>
<li>head <a href="https://gauntface.github.io/simple-push-demo/">here</a></li>
<li>accept permissions</li>
<li>copy the curl command</li>
<li>close that webpage</li>
<li>open a terminal and run that curl</li>
<li>be amazed</li>
</ul>
</li>
<li>if you&rsquo;re reading this article from a <strong>mobile device</strong>:

<ul>
<li>head <a href="https://gauntface.github.io/simple-push-demo/">here</a></li>
<li>accept permissions</li>
<li>copy that curl command and send it to a friend</li>
<li>close the browser</li>
<li>ask your friend to run it</li>
<li>be amazed</li>
</ul>
</li>
</ul>


<p>If you close your browser (at least on android) the service worker
keeps living, making it possible to reach your users until the SW dies,
which generally happens when the app (chrome) crashes or the phone
is rebooted, which are unlikely to happen on a frequent basis<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.</p>

<p>You will need a good understanding of service workers but the code
to implement push notifications is <a href="https://github.com/GoogleChrome/samples/blob/gh-pages/push-messaging-and-notifications/service-worker.js">really trivial</a>
and the &ldquo;backend&rdquo; implementation is very well explained by &ndash; again &ndash; the <a href="https://developers.google.com/web/fundamentals/getting-started/codelabs/push-notifications/">Google guys</a>, which use
Firebase Cloud Messaging (formerly known as GCM) to deliver pushes
to the subscribed clients.</p>

<p>Web Push requires <a href="http://caniuse.com/#feat=serviceworkers">service workers</a>, and support
is currently limited to <a href="http://caniuse.com/#feat=push-api">Chrome / Firefox / Opera</a>.</p>

<h2>Payment Request API</h2>

<p>This one isn&rsquo;t as immediate as Web Pushes, especially since it <a href="https://9to5google.com/2016/08/08/chrome-53-beta-features/">landed in Chrome just a few weeks back</a>, so support is
pretty experimental &mdash; but have a look at the following video to get an idea
of how checkouts could be much simpler through a native way of collecting payment
details:</p>

<iframe width="760" height="415" src="https://www.youtube.com/embed/hmqZxP6iTpo" frameborder="0" allowfullscreen></iframe>


<p>This API isn&rsquo;t a payment solution but rather a sophisticated way to collect payment
data from your users, without needing to implement payment forms on your own &mdash; you
simply create a payment request and the browser does the rest:</p>

<p>``` js
// is this real?
if (window.PaymentRequest) {
  // what kind of payments are we accepting?
  let methodData = [</p>

<pre><code>{
  supportedMethods: ['visa', 'mastercard']
}
</code></pre>

<p>  ];</p>

<p>  // what is the user purchasing?
  let details = {</p>

<pre><code>displayItems: [
  {
    label: 'Argo, Blue-Ray movie',
    amount: { currency: 'USD', value : '15.00' }
  },
  {
    label: 'Power customer discount',
    amount: { currency: 'USD', value : '-10.00' }
  }
],
total:  {
  label: 'Total',
  amount: { currency: 'USD', value : '5.00' }
}
</code></pre>

<p>  };</p>

<p>  let request = new window.PaymentRequest(methodData, details, {});</p>

<p>  // start the fun!
  request.show().then(function(result) {</p>

<pre><code>result.complete('success');
// example of result.details:
//  - cardNumber
//  - cardSecurityCode
//  - expiryMonth
//  - expiryYear

return apiCallToThePaymentGateway(result.details).then(res =&gt; {
  return result.complete('success');
}).catch(result =&gt; {
  return result.complete('fail');
})
</code></pre>

<p>  });
}
```</p>

<p>You simply need to create a <code>PaymentRequest</code> and <code>.show()</code> it &mdash; the browser
will then show the native UI and you&rsquo;ll eventually receive the details once
the user is done entering his / her details: it&rsquo;s pretty neat since it&rsquo;s a very
simple yet powerful way of offloading this kind of annoying &ldquo;feature&rdquo; to the
browser (who&rsquo;s really happy to write a new credit card form in 2016? anyone who actually likes <a href="https://en.wikipedia.org/wiki/Luhn_algorithm">luhn</a>?).</p>

<p>As I said, this is pretty experimental, meaning that support is&hellip; &hellip;well,
you&rsquo;re <a href="http://caniuse.com/#feat=payment-request">on your own for now</a>, as
the <strong>only</strong> browser that supports it is chrome for mobile<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>.</p>

<h2>So?</h2>

<p>Who could have though things like these could actually happen in a browser
3 years ago?</p>

<p>I bet most of us didn&rsquo;t, which is why I&rsquo;m excited to see the
web growing and adding capabilities that make the browsing experience
better day after day.</p>

<p>And with things like <a href="https://www.chromestatus.com/feature/5298357018820608">Ambient Light Sensor API</a>,
<a href="https://www.chromestatus.com/feature/5762982487261184">CompositorWorkers</a> (worker threads that can respond to input and update visuals)
and <a href="https://www.chromestatus.com/feature/4532810371039232">WebVR</a> in the pipeline,
the future of browsers looks yummier than ever!</p>

<p><div class="footnotes">
<span>
Notes
</span>
	<ol>
		<li id='fn:1'>How many times do you reboot your phone daily? Sorry, what? You have a Samsung? Oh&hellip; <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>What&rsquo;s  scary, though, is that &ldquo;Apple provides an equivalent proprietary API called Apple Pay JS&rdquo; (<a href="http://caniuse.com/#feat=payment-request">http://caniuse.com/#feat=payment-request</a>) <a href='#fnref:2' rev='footnote'>↩</a></li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Technologies You Should Keep an Eye on in 2015]]></title>
    <link href="https://odino.org/5-technologies-you-should-keep-an-eye-on-in-2015/"/>
    <updated>2015-02-27T15:55:00+00:00</updated>
    <id>https://odino.org/5-technologies-you-should-keep-an-eye-on-in-2015</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a very short while since we landed
in 2015, but the technology scene is already
taking shape: here I&rsquo;d like to point at some
of the technologies that you should definitely
keep an eye on this year.</p>

<!-- more -->


<h2>React native</h2>

<p>Right out of <a href="http://jlongster.com/First-Impressions-using-React-Native">an article</a> describing the experience
using react native:</p>

<p><blockquote><p>It only takes a few minutes playing with React Native to realize the potential it has. This works.</p></p><p><p>It feels like I&rsquo;m developing for the web. But I&rsquo;m writing a real native app, and you seriously can&rsquo;t tell the difference.</p></p><p><p>At the UI level, there is no difference; these are all native UIViews beautifully sliding around like normal.</p></p><p><p>This is solid engineering. And it completely reinforces the fact that React.js is the right way to build apps.<br/>I can write a native app using the same techniques as I would write web app.</p></p><p><p>Let&rsquo;s start treating the DOM as an implementation detail, just like UIViews.</p></blockquote></p>

<p>For those of you who have missed the news, Facebook
is planning to completely <a href="https://www.youtube.com/watch?v=KVZ-P-ZI6W4">open source it&rsquo;s react native</a>
framework which is a layer to build native apps (on ios only, for now)
with good old DOM and a layer of JavaScript.</p>

<p>Not that similar tools do not exist as of now (among them
<a href="http://ionicframework.com/">ionic</a> seems to be very popular,
as it&rsquo;s built over <a href="http://cordova.apache.org/">cordova</a> and angular)
but the real deal is that it seems that react native
<strong>feels really native</strong>: the limitation of hybrid solutions
has always been the fact that the UI turns quite sluggish
and doesn&rsquo;t feel very smooth, which is why react native
is kind of uber-exciting.</p>

<h2>Docker&rsquo;s ecosystem</h2>

<p><img class="right" src="/images/docker.png"></p>

<p>During the DockerCon in Amsterdam, at the end of last year,
the docker guys announced that <a href="https://blog.docker.com/2014/12/announcing-docker-machine-swarm-and-compose-for-orchestrating-distributed-apps/">a bunch of new tools</a> were
coming along to support <a href="https://blog.docker.com/2015/02/orchestrating-docker-with-machine-swarm-and-compose/">better orchestration</a>.</p>

<p>In these days those tools have seen their first
decent beta and stable releases:</p>

<ul>
<li><a href="https://blog.docker.com/2015/02/scaling-docker-with-swarm/">swarm</a>, a tool for clustering / scaling containers</li>
<li><a href="https://blog.docker.com/2015/02/announcing-docker-compose/">compose</a>, a way to orchestrate those clusters</li>
<li><a href="https://blog.docker.com/2015/02/announcing-docker-machine-beta/">machine</a>, the easiest way to get started with your first container</li>
</ul>


<p>As someone stated durint the european docker event:</p>

<blockquote><p>Docker was on no one&rsquo;s agenda in 2014, it&rsquo;s on everyone&rsquo;s agenda in 2015</p></blockquote>

<p>Can&rsquo;t use better words than those to describe how docker
is changing the way we want apps to be running.</p>

<p>Now, with the advent of these new tools that should provide
a better experience in terms of getting started / orchestration
things are just going to be more interesting.</p>

<h2>JavaScript</h2>

<p>For better or for worse, JavaScript has taken the programming
ecosystem by storm over the past 5 years: it used to be just a
tool to make nicer interfaces whereas now hordes of programmers
are writing business logic with it<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>,
thanks to NodeJS and modern client-side frameworks like
AngularJS or Ember.</p>

<p>Truth is, JavaScript opens the door for <a href="http://nerds.airbnb.com/isomorphic-javascript-future-web-apps/">isomorphic apps</a>
which is something developers are quite keen on (the ability
of running the &ldquo;same&rdquo; app / code both on the browser and the
server): the idea sounds quite crazy but it might become
more than a <em>weirdo</em> as we get more robust and solid solutions
to implement isomorphism.</p>

<p><img class="center" src="/images/isomorphic-trend.png"></p>

<p>In other words, <strong>JavaScript ain&rsquo;t done yet</strong>.</p>

<h2>Microservices</h2>

<p>Microservices, an <a href="/on-monoliths-service-oriented-architectures-and-microservices/">implementation of SOA</a>,
are gaining a lot of attention simply because
the tooling around them has become much more
powerful in recent years: you can provision
hardware in minutes thanks to platforms like AWS
and deploy images of your application <a href="https://www.digitalocean.com/features/one-click-apps/docker/">in seconds</a>
thanks to Docker.</p>

<p>There&rsquo;s a lot to <a href="http://tech.namshi.com/blog/2015/02/27/reflecting-on-microservices/">figure out when using microservices</a>,
and everyone quite agrees on the fact that to roll
this kind of architectures out your entire infrastructure
needs to be very mature and robust, but at the same time
a lot more organizations seem keen on giving them a shot,
as they provide great flexibility when compared to good
old monoliths.</p>

<p>I recently watched <a href="https://www.youtube.com/watch?v=wgdBVIX9ifA&amp;index=2&amp;list=PLEx5khR4g7PIIBNcNhHOMmOhzxcwI5joG">Martin Fowler&rsquo;s take on microservices</a>
and read the <a href="http://nginx.com/blog/microservices-at-netflix-architectural-best-practices/">best practices Netflix uses</a> in this kind
of architecture. I strongly recommend keeping an eye on the
topic as there will be more to come this year.</p>

<h2>Golang</h2>

<p><img class="right" src="/images/golang.png"></p>

<p>Now, seriously, I have lost the count of how many
technologies are being built with <a href="http://golang.org/">Golang</a>
these days!</p>

<p>You want me to mention a few of them?</p>

<ul>
<li>docker</li>
<li><a href="https://github.com/hashicorp/terraform">terraform</a></li>
<li><a href="https://github.com/tsenart/vegeta">vegeta</a></li>
<li><a href="https://github.com/rancherio/os">rancher/os</a></li>
<li><a href="https://github.com/joewalnes/websocketd">websocketd</a></li>
<li><a href="https://github.com/GoogleCloudPlatform/kubernetes">kubernetes</a></li>
<li><a href="https://github.com/hashicorp/consul">consul</a></li>
</ul>


<p>The list can go on for a while&hellip;</p>

<p>What is clear is that it seems like we are witnesses
of a shift into 2 programming emispheres: on one side,
web development is being taken by storm by JavaScript;
on the other end, it looks like <strong>Golang is ruling the
DevOps side of things</strong>.</p>

<p>I am exploring Go these days mostly because I&rsquo;m seeing a
lot of people going crazy for it, and I can understand where
they come from: sometimes you need strong typing and the
feeling that distributing your packages will be a painless
experience, plus the performances are great and the built-in
stuff in the <a href="http://golang.org/pkg/">standard library</a> is
quite awesome. I&rsquo;m not a big fan of some things of the language
(ie. not a big supporter of how error handling works<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>)
but, hey, who&rsquo;s perfect?</p>

<p>So, yeah, I like Go for some of the things it can do and I like
other tools for doing other stuff, which is, I think, the
essence of technology: <strong>pick the right tool for the right
job</strong>.</p>

<p>Nowadays DevOps is leaning towards Golang and that is why,
I believe, we will see an even bigger shift in 2015.</p>

<p>The next Varnish? Probably written in Go.</p>

<h2>To wrap up</h2>

<p>This list gets a clear bias because of the fact that
I mostly work with the web, thus most of the tools
are either web-related or come from a web-ish background,
this is why you won&rsquo;t read about wearables or those
kind of things here.</p>

<p>I think these 5 technologies are something that we should
be closely monitoring in 2015 as they indicate which path
big players, industry leaders and the open source community
are taking.</p>

<p><div class="footnotes">
<span>
Notes
</span>
	<ol>
		<li id='fn:1'>How crazy, right? <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>Which I hate in JS as well :) <a href='#fnref:2' rev='footnote'>↩</a></li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Increase Mobile Performances by Implementing Transparent Redirects]]></title>
    <link href="https://odino.org/increase-mobile-performances-by-implementing-transparent-redirects/"/>
    <updated>2014-03-03T17:58:00+00:00</updated>
    <id>https://odino.org/increase-mobile-performances-by-implementing-transparent-redirects</id>
    <content type="html"><![CDATA[<p>Most of you are aware that one of the biggest problems while
developing mobile apps / websites, is the reduced bandwidth / connectivity
that the user has on his phone compared to traditional devices
connected to a solid WiFi or via cable.</p>

<p>How can you actually improve connectivity to the app? There are tricks to
improve performances, like <strong>transparent redirects</strong>.</p>

<!-- more -->


<h2>An heavy stack</h2>

<p>The stack on which your web apps will run will be heavy, by definition:
HTTP wasn&rsquo;t built with performances in mind<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>, and you might
want to add SSL, to provide your users with an additional security layer,
on top of that.</p>

<p>Now imagine your users requesting <code>GET /my-page</code> and you serving a redirect:</p>

<p><code>
HTTP/1.1 302 Moved temporarily
Host: example.org
Location: /my-new-page
</code></p>

<p>Even though, semantically, this is a logic operation,
it doesnt work well with the demand of great performances, since the user will need to
make nother roundtrip connection to get the new resource</p>

<h2>Transparent redirects</h2>

<p>What you can do, instead, is to serve a <em>transparent redirect</em> to the user, so that there is
no additional request to be made:</p>

<p>```
HTTP/1.1 200 Ok
Host: example.org
Transparent-Status-Code: 302 Moved temporarily
Transparent-Location-Location: /my-new-page</p>

<p>&lt;html &hellip;
```</p>

<p>In this way the client already has all the information it needs in
order to show the user the data he requested.</p>

<p>Even better: if you are serving contents from an API you can have your main
application handle the transparent redirect with the <code>history.pushState(...)</code>
API of <code>HTML5</code>.</p>

<h2>Current implemetation</h2>

<p>At the moment you will have to be cautious with it, as current browsers (or, at least,
a few of them) treat non <code>2XX</code> status codes as errors, thing that becomes tricky when you
handle things with JS callbacks / promises:</p>

<p>```
http.get(&hellip;, onSuccess, onError)</p>

<p>// the browser will call onError if the response status code is
// different than 2XX
```</p>

<p>I remember banging our heads over our desks here at the <a href="https://www.namshi.com">Namshi</a>
office, so we decided to use a very simple approach, using <strong>custom headers</strong> with a <code>200 Ok</code>:
if the response ends up in a redirect, we use 2 custom headers (<code>N-Status-Code</code> and <code>N-Location</code>),
intercept the response in our frontends and do our trick with <code>#pushState(...)</code>.</p>

<h2>Future considerations</h2>

<p>It would be nice if, one day, the HTTP spec would be able to incorporate this
behavior natively, with a status code like <code>308 Transparent redirect</code>, so that browser will be able to
automatically update the state of the apps and the user wouldn&rsquo;t need to wait for another roundtrip
connection to see the data they have been requesting, no matter the location.</p>

<p><div class="footnotes">
<span>
Notes
</span>
	<ol>
		<li id='fn:1'>We're talking about  raw performances, scalability is another matter, which is implemented almost flawlessy in the protocol <a href='#fnref:1' rev='footnote'>↩</a></li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
</feed>