<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Category: Oss | Alessandro Nadalin]]></title>
  <link href="https://odino.org/categories/oss/atom.xml" rel="self"/>
  <link href="https://odino.org/"/>
  <updated>2021-07-24T08:15:36+00:00</updated>
  <id>https://odino.org/</id>
  <author>
    <name><![CDATA[Alessandro Nadalin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mssqldump, a Small Utility to Dump MS SQL Server Data]]></title>
    <link href="https://odino.org/mssqldump-a-small-utility-to-dump-ms-sql-server-data/"/>
    <updated>2018-05-22T14:56:00+00:00</updated>
    <id>https://odino.org/mssqldump-a-small-utility-to-dump-ms-sql-server-data</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/mssql-logo.png"></p>

<p>In the past few months I found myself busier with moving data here and there, so
much that scripts ending with <code>load(transform(extract()))</code> have become my bread
and butter &mdash; sad life, some say!</p>

<p>Last night I wanted to import a bunch of data stored in SQL Server
into a MySQL database, but didn&rsquo;t want to get my hards dirty with a GUI or PowerShell
because, well, <a href="https://www.google.ae/search?q=powershell+sucks&amp;oq=powershell+sucks&amp;aqs=chrome..69i57j69i61j0l4.3713j0j7&amp;sourceid=chrome&amp;ie=UTF-8">PowerShell</a>.</p>

<p>The result was <a href="https://github.com/odino/mssqldump">mssqldump</a>, a small utility
&ndash; similar to <code>mysqldump</code> &ndash; to export data into <a href="/tsv-better-than-csv/">TSV</a>.</p>

<!-- more -->


<h2>Usage</h2>

<p><code>mssqldump</code> does one thing &mdash; and hopefully well &mdash; run a query against the
database and export the results as TSV to the stdout:</p>

<p><code>
./mssqldump -q "SELECT Name, 1 as ID, RAND() as thing from sys.Databases"
master    1    0.4318099474883688
tempdb    1    0.4318099474883688
model     1    0.4318099474883688
msdb      1    0.4318099474883688
test      1    0.4318099474883688
</code></p>

<p>You can also include headings (column names) with the <code>-c</code> option:</p>

<p><code>
./mssqldump -q "SELECT Name, 1 as ID, RAND() as thing from sys.Databases"
Name      ID   thing
master    1    0.4318099474883688
tempdb    1    0.4318099474883688
model     1    0.4318099474883688
msdb      1    0.4318099474883688
test      1    0.4318099474883688
</code></p>

<p>If you want to print <code>mssqldump</code>&rsquo;s version information you can just specify <code>v</code>
or <code>version</code> as the query parameter:</p>

<p><code>
./mssqldump -qversion
1.0.0
</code></p>

<p>If you want to use <code>mssqldump</code> simply download the <a href="https://github.com/odino/mssqldump/releases">latest release from github</a>
and start dumping data around!</p>

<h2>A couple surprises</h2>

<p>Building <code>mssqldump</code> was an experience on its own, as I discovered a couple useful
things:</p>

<ul>
<li>Microsoft is killing it lately &mdash; I wanted to test this out and was resigned to
spinning up a SQL Server instance on Azure. Turns out a simple <code>docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=Password123!' --net host -d --name mssql --rm microsoft/mssql-server-linux</code>
does the trick!</li>
<li>knowing I was developing a CLI tool in Golang, I thought I would <em>need</em> to resort
to <a href="https://github.com/spf13/cobra">cobra</a> &mdash; wanting to try to simplify things
up I instead opted for <a href="https://github.com/jessevdk/go-flags">go-flags</a>, which has way less
features but is also less opinionated and faster to setup (cobra is probably overkill
for a CLI app with only one command)</li>
</ul>


<p>Adios!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concise Async / Await in ExpressJS]]></title>
    <link href="https://odino.org/async-slash-await-in-expressjs/"/>
    <updated>2017-10-04T17:36:00+00:00</updated>
    <id>https://odino.org/async-slash-await-in-expressjs</id>
    <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function">Async / await</a> is one of the biggest revolutions (<em>read: one of the sweetest
syntactical sugars</em>) that has come to JavaScript over the past few months,
and has personally helped me appreciate the language a lot more.</p>

<p>At <a href="http://tech.namshi.io">work</a>, we rely quite a lot on <a href="https://expressjs.com/">ExpressJS</a> to build small services deployed in our
architecture and, as you can imagine, have converted a whole bunch of them to
async / await over time.</p>

<p>One interesting problem, though, has been converting express routes to use
async functions: my personal solution has been to write <a href="https://github.com/odino/express-async-await">express-async-await</a>,
and I want to share the reasons and ideas behind the library in this post.</p>

<!-- more -->


<h2>A typical express scenario</h2>

<p>Before we understand the problem, I want to clarify the scenario we&rsquo;re looking
at &mdash; a simple app with a few routes and an error handler to <em>catch'em all</em>:</p>

<p>``` js
app.get(&lsquo;/users&rsquo;, function(req, res, next){
  db.getUsers().then(function(users) => {</p>

<pre><code>res.json(users)
</code></pre>

<p>  }).catch(next)
})</p>

<p>app.get(&lsquo;/users/:id&rsquo;, function(req, res, next){
  db.getUser(req.params.id).then(function(users) => {</p>

<pre><code>res.json(users)
</code></pre>

<p>  }).catch(next)
})</p>

<p>app.use(function(err, req, res, next) {
  console.error(err)
  res.status(500).json({message: &lsquo;an error occurred&rsquo;})
})
```</p>

<p>As you see, we simply have a couple routes which use some promise-based service
(we could even use callbacks, I&rsquo;m using promises here just for the sake&hellip;)
and an error handler that intercepts any error and returns a &ldquo;standard&rdquo; response
should anything fail in the routes.</p>

<p>Can we do better?</p>

<h2>The problem with async functions</h2>

<p>Lauded for its simplicity and readability, async / await can help us make the
code a bit more elegant:</p>

<p>``` js
app.get(&lsquo;/users&rsquo;, async function(req, res, next){
  try {</p>

<pre><code>res.json(await db.getUsers())
</code></pre>

<p>  } catch(err) {</p>

<pre><code>next(err)
</code></pre>

<p>  }
})</p>

<p>app.get(&lsquo;/users/:id&rsquo;, async function(req, res, next){
  try {</p>

<pre><code>res.json(await db.getUser(req.params.id))
</code></pre>

<p>  } catch(err) {</p>

<pre><code>next(err)
</code></pre>

<p>  }
})</p>

<p>app.use(function(err, req, res, next) {
  console.error(err)
  res.status(500).json({message: &lsquo;an error occurred&rsquo;})
})
```</p>

<p>Now, you probably see where I&rsquo;m headed: each and every route we add needs to have
some boilerplate to catch errors and forward them to the error handler, and that&rsquo;s
where my OCD kicked in &mdash; there needs to be a better way of doing this.</p>

<h2>Solution 1: the wrapper</h2>

<p>Turns out that the solution is quite simple, you can just create a wrapper that catches
the error and calls <code>next</code>:</p>

<p>``` js
const asyncMiddleware = fn =>
  (req, res, next) => {</p>

<pre><code>Promise.resolve(fn(req, res, next))
  .catch(next);
</code></pre>

<p>  };</p>

<p>app.get(&lsquo;/users&rsquo;, asyncMiddleware(async function(req, res, next){
  res.json(await db.getUsers())
}))</p>

<p>app.get(&lsquo;/users/:id&rsquo;, asyncMiddleware(async function(req, res, next){
  res.json(await db.getUser(req.params.id))
}))</p>

<p>app.use(function(err, req, res, next) {
  console.error(err)
  res.status(500).json({message: &lsquo;an error occurred&rsquo;})
})
```</p>

<p>Much better, right? Well, at least I think so: now our routes are one-liners that
defer to a service and error handling is out of the picture, as it&rsquo;s taken care by
the <code>asyncMiddleware</code> function (here&rsquo;s a <a href="https://medium.com/@Abazhenov/using-async-await-in-express-with-node-8-b8af872c0016">good article on the topic</a>).</p>

<p>The biggest drawback, in my opinion, is that the routes are now looking less
&ldquo;pure&rdquo; than they should: they&rsquo;re all wrapped in this <code>asyncMiddleware</code> which looks
kind of awkward. What if we were able to &ldquo;hide&rdquo; this implementation detail from
our code?</p>

<h2>Solution 2: express-async-await</h2>

<p>That&rsquo;s where <a href="https://github.com/odino/express-async-await">express-async-await</a>
kicks in: it&rsquo;s a tiny library I wrote to be able to monkey-patch your express app
so that you don&rsquo;t need to wrap each and every route:</p>

<p>``` js
require(&lsquo;express-async-await&rsquo;)(app)</p>

<p>app.get(&lsquo;/users&rsquo;, async function(req, res, next){
  res.json(await db.getUsers())
})</p>

<p>app.get(&lsquo;/users/:id&rsquo;, async function(req, res, next){
  res.json(await db.getUser(req.params.id))
})</p>

<p>app.use(function(err, req, res, next) {
  console.error(err)
  res.status(500).json({message: &lsquo;an error occurred&rsquo;})
})
```</p>

<p>&hellip;and that&rsquo;s it! The library takes care of monkey-patching express' <a href="https://github.com/odino/express-async-await/blob/7e86c2b1ba58e95613c5d38c1b641c8eca6b35d4/index.js#L4">HTTP methods</a> (like <code>app.get</code>, <code>app.post</code>, etc)
and <a href="https://github.com/odino/express-async-await/blob/7e86c2b1ba58e95613c5d38c1b641c8eca6b35d4/index.js#L8-L16">automatically wrap them</a> with the <code>asyncMiddleware</code> we&rsquo;ve seen earlier on.</p>

<p>Biggest drawback? Well, some are really against monkey-patching (for good reasons) but,
when used with caution, I think it can be a really effective way to enhance a library
that&rsquo;s missing an interesting feature<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.</p>

<p><div class="footnotes">
<span>
Notes
</span>
	<ol>
		<li id='fn:1'>By the way, my bet is that within a year express is going to support this &ldquo;natively&rdquo; <a href='#fnref:1' rev='footnote'>↩</a></li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Contributing to React Native for Android]]></title>
    <link href="https://odino.org/contributing-to-react-native-for-android/"/>
    <updated>2016-01-01T11:19:00+00:00</updated>
    <id>https://odino.org/contributing-to-react-native-for-android</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/reactjs.png"></p>

<p>It is no news that we, at <a href="http://tech.namshi.com">Namshi</a>, like to play around with all
sorts of interesting technologies: last but not least, we&rsquo;re
taking a closer look at <a href="https://facebook.github.io/react-native/">react native</a>, the framework from Facebook
that allows you to build mobile, native apps with <a href="https://facebook.github.io/react/">React components</a>.</p>

<p>While developing a small prototype, we had a small issue with
a <a href="http://developer.android.com/reference/android/webkit/WebView.html">WebView</a> that was supposed to run within our application and
wanted to enable <a href="https://developer.chrome.com/devtools/docs/remote-debugging#debugging-webviews">remote debugging on chrome</a>
to troubleshoot it: since this is <a href="https://github.com/facebook/react-native/blob/e4272b456e6948c0942c610d3bc65bc29f0a7be6/ReactAndroid/src/main/java/com/facebook/react/views/webview/ReactWebViewManager.java#L77-L82">turned
off by default</a>, we had to recompile react native with webview
debugging enabled, and I wanted to share my brief experience with
it since, with the same approach, you can start hacking and
contributing to react native itself.</p>

<!-- more -->


<p>The guys have created a <a href="https://facebook.github.io/react-native/docs/android-building-from-source.html#content">small guide on how to compile RN from source</a>,
which can be summarized in just a couple steps: first, add the <a href="http://developer.android.com/tools/sdk/ndk/index.html">android NDK</a> to
your environment and then configure the build system to build from source and
not from the <a href="http://mvnrepository.com/artifact/com.facebook.react/react-native">pre-built react-native packages</a>.</p>

<h2>Download and configure the Android NDK</h2>

<p>Download the latest version of the NDK, make it executable
and run it: the package extracts itself in the current folder
and then you only need to set an environment variable
pointing to the NDK, so that the android build system will
be able to locate the NDK:</p>

<p><code>
cd /somewhere
wget http://dl.google.com/android/ndk/android-ndk-r10e-linux-x86_64.bin
chmod a+x android-ndk-r10e-linux-x86_64.bin
./android-ndk-r10e-linux-x86_64.bin
export ANDROID_NDK=/somewhere/android-ndk-r10e
</code></p>

<h2>Configure RN to build from source</h2>

<p>This involves a few manual steps, but should be pretty straightforward.</p>

<p>In your react project, open <code>android/app/build.gradle</code>, you should see a
<code>dependencies</code> section like the following:</p>

<p>```
dependencies {</p>

<pre><code>compile fileTree(dir: "libs", include: ["*.jar"])
compile "com.android.support:appcompat-v7:23.0.1"

compile "com.facebook.react:react-native:0.17.+"
</code></pre>

<p>}
```</p>

<p>See, <code>compile "com.facebook.react:react-native:0.17.+"</code> tells the build system
to get the pre-built packages, released by facebook, rather that building react-native
from your local sources.</p>

<p>Now, change that line to:</p>

<p><code>
compile project(':ReactAndroid')
</code></p>

<p>then open <code>android/settings.gradle</code> and tell the build system how to locate
the new project that will be compiled; add, at the bottom of the file:</p>

<p>```
include &lsquo;:ReactAndroid&rsquo;</p>

<p>project(&lsquo;:ReactAndroid&rsquo;).projectDir = new File(</p>

<pre><code>rootProject.projectDir, '../node_modules/react-native/ReactAndroid')
</code></pre>

<p>```</p>

<p>Last but not least, you will need 1 change in <code>android/build.gradle</code>, in the
<code>dependencies</code> section:</p>

<p><code>
classpath 'de.undercouch:gradle-download-task:2.0.0'
</code></p>

<p>That&rsquo;s it!</p>

<h2>At the end</h2>

<p>Now, when you run <code>react-native run-android</code>, you should notice that the
build is slightly slower, due to the fact that <a href="http://gradle.org/">gradle</a>
is trying to compile RN from source rather than from the pre-built packages.</p>

<p>You can then open <code>./node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/</code>
and start hacking around, making your own changes and testing them with a simple
<code>react-native run-android</code>.</p>

<p>For us, we were eventually able to enable remote debugging on webviews and found out
why our webview wasn&rsquo;t running: it simply needed access to the
<a href="https://developer.mozilla.org/en/docs/Web/API/Window/localStorage">localStorage</a>,
which is turned off by default on android webviews<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.</p>

<p><div class="footnotes">
<span>
Notes
</span>
	<ol>
		<li id='fn:1'>We then sent a PR (<a href="https://github.com/facebook/react-native/commit/67931284350ebd2b60d1e11870690272079b1726">https://github.com/facebook/react-native/commit/67931284350ebd2b60d1e11870690272079b1726</a>) so that we can turn DOM storage on at will ;&ndash;) <a href='#fnref:1' rev='footnote'>↩</a></li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refresh Your JavaScript Configurations With Freshen-up]]></title>
    <link href="https://odino.org/refresh-your-javascript-configurations-with-freshen-up/"/>
    <updated>2015-02-20T16:24:00+00:00</updated>
    <id>https://odino.org/refresh-your-javascript-configurations-with-freshen-up</id>
    <content type="html"><![CDATA[<p>Today I wrote a simple (silly, I&rsquo;d say) library
that I had in mind since a while to refresh
configuration values for JS apps.</p>

<!-- more -->


<p>The library is called <code>freshen-up</code> and it comes
from some internal discussions we had at <a href="http://tech.namshi.com/">Namshi</a>
on how to refresh some content we load once a
NodeJS app boots.</p>

<p>I was discussing various approaches with <a href="https://ae.linkedin.com/in/unlucio">Lucio</a>
and, even if we don&rsquo;t need to employ anything
like this at the moment, I decided to give it a
shot to see how simple it would have been to write down
something that would do that.</p>

<p>Turns out there are a few different approaches to
do this:</p>

<ul>
<li>send a <a href="http://en.wikipedia.org/wiki/Unix_signal">signal</a> to the app
and have it reload the configuration: this will work
nicely but you need someone else to send the signal
to the app, so it might be that when you&rsquo;re bootstrapping
this system you don&rsquo;t want / need too many actors around;
though my overall sense is that this is the most elegant
approach</li>
<li>have the application listen to a message queue
and publish a message everytime you need to reload
the cache: I feel this is overkill and I am not a big
fan of making the application aware of a system like
RabbitMQ just for this, I feel it kind of breaks
responsibilities / it&rsquo;s a bit &ldquo;too much&rdquo;</li>
<li>have the application reload the cache at a certain
interval: a very simple approach and probably the least
&ldquo;precise&rdquo; of the options, but feels legit enough when
you don&rsquo;t want to complicate things</li>
</ul>


<p>I then decided to give a try to the third approach and
released <a href="https://github.com/odino/node-freshen-up">freshen-up</a>;
it&rsquo;s usage is pretty straightforward:</p>

<p>``` javascript
var freshenUp = require(&lsquo;freshen-up&rsquo;);</p>

<p>function loadConfigurationFromTheDatabase() {
  // &hellip;do stuff&hellip;
};</p>

<p>var config = freshenUp(loadConfigurationFromTheDatabase);</p>

<p>config.get().someValue; // will be something</p>

<p>// after some time&hellip;</p>

<p>config.get().someValue; // will be something else
```</p>

<p>The library will refresh the configuration, by default,
every 50ms, though you can override this:</p>

<p>```
// Refreshing the configuration every 1s
var config = freshenUp(loadConfigurationFromTheDatabase, 1000);</p>

<p>config.get().someValue; // will be &ldquo;something&rdquo;</p>

<p>// after 500ms
config.get().someValue; // will still be &ldquo;something&rdquo;</p>

<p>// after 1s
config.get().someValue; // will be &ldquo;something else&rdquo;
```</p>

<p><code>freshen-up</code> is basically just a <a href="https://github.com/odino/node-freshen-up/blob/2f9a3ab2ad2dd5529fff9cd1f3137983746e91ec/index.js#L11-L19">nice wrapper</a> over the
JavaScript&rsquo;s global <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers.setInterval">setInterval</a>
function, so nothing really fancy here.</p>

<p>By the way, you can also use <code>freshen-up</code> to do other
things like running checks every N seconds:</p>

<p>``` javascript
function checkIfInternetIsDown() {
  require(&lsquo;dns&rsquo;).resolve(&lsquo;www.google.com&rsquo;, function(err) {</p>

<pre><code>if (err) {
  doSomethingDude(err);
}
</code></pre>

<p>  });
};</p>

<p>freshenUp(checkIfInternetIsDown, 1000);
```</p>

<p>That&rsquo;s basically it: I added a couple tests just in case,
though I still think there are better ways to do
<a href="http://martinfowler.com/bliki/TwoHardThings.html">cache invalidation</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nikki 0.25.1: Let's Play With the Filesystem!]]></title>
    <link href="https://odino.org/nikki-0-dot-25-dot-1-lets-play-with-the-filesystem/"/>
    <updated>2014-07-11T17:40:00+00:00</updated>
    <id>https://odino.org/nikki-0-dot-25-dot-1-lets-play-with-the-filesystem</id>
    <content type="html"><![CDATA[<p>In the last 24 hours I rolled out some changes
I actually personally needed to get way more
productive than ever on nikki, and leave my old-school
IDE turned off.</p>

<!-- more -->


<blockquote><p>If you are new to nikki, you might want to read
<a href="/last-weekend-i-wrote-an-ide-in-javascript/">this introductory post</a> I wrote a while ago.</p></blockquote>

<h2>What&rsquo;s new?</h2>

<p>Probably the most needed feature, at least by me,
is to be able to look for a text in files, and
it has been <a href="https://github.com/odino/nikki/commit/6e6540147d6c0d165ab0aad3d4ed7bd267eb9f5f">rudimentally implemented</a>
while  I will focus, in the next days, on how to
make this much more user-friendly: in any case,
by activating the search bar through <code>ctrl + shift + g</code>
you are going to search in <code>grep</code> mode, which means
that instead of looking by file name we are gonna
grep the content of those files.</p>

<p><img class="center" src="/images/nikki-0.25.1.png"></p>

<p>As you see in the screenshot above, Nikki then
returns you a list of files and highlights the matches:
what I  want to work on, then, is to be able to
click on those matches and open that file
at that specific line.</p>

<p>How about other changes?</p>

<ul>
<li>we are <a href="https://github.com/odino/nikki/commit/704927c369ef156d3d03d90af68853657328c5f4">watching the FS now</a>, so if you touch a file
from your terminal you&rsquo;ll magically see it appear in nikki!</li>
<li>when searching for files with <code>ctrl + shift +f</code> you are now gonna be able to also <a href="https://github.com/odino/nikki/commit/bae2c1b51617551bf814869e815a2eea1246a8cb">look for directories</a></li>
<li>generally improved the search: now <code>proj gu .js</code> will match <code>/path/to/projects/test/gulpfile.js</code></li>
<li>nikki will now show the current focus (filesystem / search / editor) right <a href="https://github.com/odino/nikki/commit/fb1d05f2eac3370348d41158a2e55c337d28a874">above the editor</a></li>
<li>added the <a href="https://github.com/odino/nikki/commit/17a4dd7a7c53a7fa5a6c360818857e35eb246143">awesome nikki logo</a></li>
<li>you can configure the <a href="https://github.com/odino/nikki/commit/5f2b680750bccac228e471fdb7b81762df8bde0c">keyboard shortcuts</a></li>
<li>you can now <a href="https://github.com/odino/nikki/commit/79f37e158417a9ea6b6dfa7a50f06b25a046cf4f">delete files and directories</a>: simply hover on a file and press <code>delete</code></li>
</ul>


<h2>What&rsquo;s fixed?</h2>

<ul>
<li>when you move between tabs, now nikki will <a href="https://github.com/odino/nikki/commit/d294446cc089207db143324a192827bcb636b65c">remember the position of the cursor</a> on each tab</li>
<li>issues while <a href="https://github.com/odino/nikki/commit/a38be0e0c14cab6036d52a585c165bcd34baf4dd">focusing on the filesystem</a></li>
<li>nikki <a href="https://github.com/odino/nikki/commit/36a820025db61a30e55735e733888d25fa2fe2c1">would epically crash</a> if you have an open tab that points to a file, you delete it, and then refresh nikki, as it couldn&rsquo;t  find the file</li>
<li>fixed <a href="https://github.com/odino/nikki/commit/1bce21bb0b60d7bbca1a3993d0b652cfff27178f">a crash</a> when re-opening a tab after closing all tabs</li>
<li>small, informative <a href="https://github.com/odino/nikki/commit/81c197f655cf4d06402ab5c930fc0bdb08e0bbd0">fixes</a></li>
</ul>


<h2>How do I get all this awesomeness?</h2>

<p>As simple as running an <code>npm install -g nikki</code> if this is the first time
you hear about it: for the ones who already have it installed on their
systems simply run a <code>npm update -g nikki</code>.</p>

<p>Then open a terminal, type <code>nikki</code> and let the show begin!</p>

<h2>What&rsquo;s  next?</h2>

<p>I&rsquo;m giving 100% priority to bugs before implementing new features:
given I&rsquo;m using nikki on a daily basis I usually find <a href="https://github.com/odino/nikki/issues?direction=desc&amp;labels=bug&amp;page=1&amp;sort=updated&amp;state=open">gotchas</a>
and fix them straight away.</p>

<p>If there are not gonna be too many fixes to do I will focus
on making the editor &ldquo;smarter&rdquo;, by improving the search in files
and adding find / find &amp; replace functionalities (the ACE editor
has built-in support for them, so shouldn&rsquo;t be that much of
a problem).</p>

<p>Keep an eye on the <a href="https://github.com/odino/nikki">github project</a> and let me know your feedback!</p>
]]></content>
  </entry>
  
</feed>