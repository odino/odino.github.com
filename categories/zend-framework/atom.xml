<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Category: Zend Framework | Alessandro Nadalin]]></title>
  <link href="https://odino.org/categories/zend-framework/atom.xml" rel="self"/>
  <link href="https://odino.org/"/>
  <updated>2022-05-07T15:04:41+00:00</updated>
  <id>https://odino.org/</id>
  <author>
    <name><![CDATA[Alessandro Nadalin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Integrating Zend Framework 2 in Symfony 1.4]]></title>
    <link href="https://odino.org/integrating-zend-framework-2-in-symfony-1-4/"/>
    <updated>2011-07-21T14:14:00+00:00</updated>
    <id>https://odino.org/integrating-zend-framework-2-in-symfony-1-4</id>
    <content type="html"><![CDATA[<p>With PHP 5.3 the <a href="http://blog.webspecies.co.uk/2011-05-23/the-new-era-of-php-frameworks.html">new era of PHP frameworks</a> has begun, and things are really, for example, simpler to integrate, thanks to the <a href="http://groups.google.com/group/php-standards/web/psr-0-final-proposal">PSR0</a>, which is the standard autoloader adopted by the community.</p>

<!-- more -->


<p>The PSR0 is, obviously, not supported by the symfony 1.4 framework, which was released far before PHP 5.3 was ready, but it&rsquo;s not <em>that</em> difficult to integrate PSR0-compliant projects in Sf1.4.</p>

<p>If you want, for example, to use the <a href="https://github.com/zendframework/zf2">Zend Framework 2</a> in symfony you just need a few quick steps: first of all, copy the standard <a href="https://gist.github.com/221634">SplClassLoader</a> in your symfony project ( lib/autoload? ), then require it in your <code>projectConfiguration.class.php</code>:</p>

<p>``` php
&lt;?php</p>

<p>require_once dirname(<strong>FILE</strong>).&lsquo;/../lib/vendor/symfony/lib/autoload/sfCoreAutoload.class.php&rsquo;;
require_once dirname(<strong>FILE</strong>).&lsquo;/../lib/autoload/SplClassLoader.php&rsquo;;
sfCoreAutoload::register();
```</p>

<p>then, put the Zend Framework wherever you want ( <code>lib/vendor/ZF2</code>? ) and re-edit the <code>projectConfiguration</code>:</p>

<p>``` php
&lt;?php</p>

<p>&hellip;
sfCoreAutoload::register();
$classLoader = new SplClassLoader(&lsquo;ZF2&rsquo;, &lsquo;/path/to/zend/framework/2&rsquo;);
$classLoader->register();
```</p>

<p>and you&rsquo;re done!</p>

<p>You can start using the Zend Framework 2 using namespaces inside your existing symfony code, without breaking anything:</p>

<p>``` php
&lt;?php</p>

<p>use ZF2\Service\Twitter;
class twitterActions extends sfActions
{
  public function executeTwitterLogin(sfWebRequest $request)
  {</p>

<pre><code>$service = new Twitter();
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deliver Content as XML With Zend Framework]]></title>
    <link href="https://odino.org/deliver-content-as-xml-with-zend-framework/"/>
    <updated>2010-09-11T12:00:00+00:00</updated>
    <id>https://odino.org/deliver-content-as-xml-with-zend-framework</id>
    <content type="html"><![CDATA[<p>In the <a href="http://devzone.zend.com/article/884">DevZone of ZF</a> there&rsquo;s a good tutorial: my aim is to give you a silly example of how to deliver content as XML in ZF and/or Magento.</p>

<!-- more -->


<p>Create a simple action in your controller:</p>

<p>``` php
&lt;?php</p>

<p>public function xmlAction()
{</p>

<pre><code>...
</code></pre>

<p>}
```</p>

<p>which we&rsquo;re gonna use to construct a single-node ( sooo silly example ) XML structure.</p>

<p>First we create the DOMDocument:</p>

<p>``` php
&lt;?php</p>

<p>$xml = new DOMDocument(&lsquo;1.0&rsquo;, &lsquo;utf-8&rsquo;);
```</p>

<p>then we create our nodes:</p>

<p>``` php
&lt;?php</p>

<p>$xml->appendChild($xml->createElement(&lsquo;nodename&rsquo;, &lsquo;nodevalue&rsquo;));
```</p>

<p>We close this routine operations telling that the output has to be saved as XML, but also that the headers might fit XML requirements:</p>

<p>``` php
&lt;?php</p>

<p>$output = $xml->saveXML();
$this->_response->setHeader(&lsquo;Content-Type&rsquo;, &lsquo;text/xml; charset=utf-8&rsquo;)&ndash;>setBody($output);
```</p>

<p>That&rsquo;s it!</p>
]]></content>
  </entry>
  
</feed>