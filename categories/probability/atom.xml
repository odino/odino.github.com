<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Category: Probability | Alessandro Nadalin]]></title>
  <link href="https://odino.org/categories/probability/atom.xml" rel="self"/>
  <link href="https://odino.org/"/>
  <updated>2021-07-24T08:15:36+00:00</updated>
  <id>https://odino.org/</id>
  <author>
    <name><![CDATA[Alessandro Nadalin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Probabilistic Data Structures: An Introduction]]></title>
    <link href="https://odino.org/probabilistic-data-structures-an-introduction/"/>
    <updated>2018-01-12T09:44:00+00:00</updated>
    <id>https://odino.org/probabilistic-data-structures-an-introduction</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/dice.png"></p>

<p>In the past few years I&rsquo;ve got more and more accustomed to computer science
concepts that were foreign to me earlier in my career: one of the most interesting
aspects that I&rsquo;ve focused on is <a href="https://dzone.com/articles/introduction-probabilistic-0">probabilistic data structures</a>,
which I want to cover with a few posts in the upcoming months.</p>

<p>My excitement around these structures come from the fact that they
enable us to accomplish tasks that were impractical before, and can really influence
the way we design software &mdash; for example, Reddit counts unique views with a
probabilistic data structure as it lets them scale more efficiently.</p>

<!-- more -->


<h2>What&rsquo;s all the fuss about?</h2>

<p>Let&rsquo;s get practical very quickly &mdash; imagine you have a set of records and want to calculate if an element is part
of that set:</p>

<p>``` js
let set = new Array()</p>

<p>for (let x = 0; x &lt; 10; x++) {
  set.push(<code>test${x}</code>)
}</p>

<p>console.log(set.includes(&lsquo;a&rsquo;)) // false
```</p>

<p>Here we are loading the entire set in memory and then loop (<code>.includes(...)</code>)
over it to figure out if our element is part of it.</p>

<p>Let&rsquo;s say we want to figure out the resources used by this script:</p>

<p>``` js
console.time(&lsquo;search&rsquo;)
let set = new Array()</p>

<p>for (let x = 0; x &lt; 10; x++) {
  set.push(<code>test${x}</code>)
}</p>

<p>console.log(set.includes(&lsquo;a&rsquo;))
console.timeEnd(&lsquo;search&rsquo;)
console.log(<code>~${process.memoryUsage().heapUsed / 1000000}mb</code>)</p>

<p>// output:
// false
// search: 2.184ms
// ~4.448288mb
```</p>

<p>As you can see, the time spent in running the script is minimal, and memory is
also &ldquo;low&rdquo;. What happens when we beef up our original list?</p>

<p><code>`` js
...
for (let x = 0; x &lt; 10000000; x++) {
  set.push(</code>test${x}`)
}
&hellip;</p>

<p>// output:
// false
// search: 2383.794ms
// ~532.511032mb
```</p>

<p>See, the figures change quite drastically &mdash; it&rsquo;s not even the execution time
that should scare you (most of the time is spent in filling the array, not in the
<code>.includes(...)</code>), but rather the amount of memory the process is consuming: as usual,
the more data we use, the more memory we consume (no shit, Sherlock!).</p>

<p>This is exactly the problem that probabilistic data structures try to solve, as you:</p>

<ul>
<li>might not have enough available resources</li>
<li>might not need a precise answer to your problem</li>
</ul>


<p>If you can trade certainty off for the sake of staying lightweight, a <a href="https://en.wikipedia.org/wiki/Bloom_filter">Bloom filter</a>
would, for example, be the right data structure for this particular use case:</p>

<p>``` js
const BloomFilter = require(&lsquo;bloomfilter&rsquo;).BloomFilter
console.time(&lsquo;search&rsquo;)
var bloom = new BloomFilter(
  287551752, // number of bits to allocate.
  20        // number of hash functions.
);</p>

<p>for (let x = 0; x &lt; 10000000; x++) {
  bloom.add(<code>test${x}</code>)
}</p>

<p>console.log(bloom.test(&lsquo;a&rsquo;))
console.timeEnd(&lsquo;search&rsquo;)
console.log(<code>~${process.memoryUsage().heapUsed / 1000000}mb</code>)</p>

<p>// output
// false
// search: 11644.863ms
// ~10.738632mb
```</p>

<p>In this case the bloom filter has given us the same output (with a <a href="https://en.wikipedia.org/wiki/Bloom_filter#Probability_of_false_positives">degree
of certainty</a>) while using 10MB of RAM rather than 500MB.
Oh, boy!</p>

<p>This is exactly what probabilistic data structures help you with: you need an
answer with a degree of certainty and don&rsquo;t care if they&rsquo;re off by a tiny
bit &mdash; because to get an exact answer you would require an impractical amount of
resources.</p>

<p>Who cares if that video has been seen by 1M unique users or 1.000.371 ones? If
you find yourself in this situation, chances are that a probabilistic structure
would fit extremely well in your architecture.</p>

<h2>Next steps</h2>

<p>I have only really started to scratch the surface of what is possible thanks to
probabilistic data structures but, if you are fascinated as much as I am, you
will find some of my next articles interesting enough, as I am planning to cover
the ones that I understand better in the upcoming weeks &mdash; namely <a href="https://en.wikipedia.org/wiki/HyperLogLog">HyperLogLog</a>
(by far my favorite data structure) and
<a href="https://en.wikipedia.org/wiki/Bloom_filter">Bloom filters</a>.</p>

<p>The papers behind these data structures are pretty <em>math-heavy</em> and I do not understand half of that jazz :)
so we&rsquo;re going to take a look at them with more of a simplistic, practical view
than a theoretical one.</p>

<h2>Just before you leave&hellip;</h2>

<p>One thing I want to clarify: the specific numbers you&rsquo;ve seen in this post will vary from platform to platform, so don&rsquo;t
look at the absolute numbers but rather at the magnitude of the difference. Also,
here I just focused on one application of Bloom filters, which demonstrates their
advantage in terms of space complexity, but time complexity should be accounted
for as well &mdash; that&rsquo;s material for another post!</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
</feed>