<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Category: Redis | Alessandro Nadalin]]></title>
  <link href="https://odino.org/categories/redis/atom.xml" rel="self"/>
  <link href="https://odino.org/"/>
  <updated>2021-07-18T10:30:01+00:00</updated>
  <id>https://odino.org/</id>
  <author>
    <name><![CDATA[Alessandro Nadalin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Redis Slow With PHP? Think Again!]]></title>
    <link href="https://odino.org/redis-slow-with-php-think-again/"/>
    <updated>2011-01-25T13:56:00+00:00</updated>
    <id>https://odino.org/redis-slow-with-php-think-again</id>
    <content type="html"><![CDATA[<p>So <a href="http://www.odino.org/275/approaching-a-cmf-architecture-with-symfony">you have a problem</a> and think that a NoSQL solution should work for you.</p>

<p>Good.</p>

<p>Then you realize you use PHP.</p>

<p>Damn.</p>

<!-- more -->


<p>As demonstrated in redis' mailing list, there are tons of PHP clients ( also native extensions ) but <a href="http://groups.google.com/group/redis-db/search?group=redis-db&amp;q=php&amp;qt_g=Search+this+group">they do really suck at performances</a>.</p>

<p>I&rsquo;ve tried a couple of benchmarks ( not written by me ):</p>

<ul>
<li><a href="https://gist.github.com/794293">https://gist.github.com/794293</a></li>
<li><a href="https://gist.github.com/794294">https://gist.github.com/794294</a></li>
</ul>


<p>that were basically saying that Redis was able to perform about <code>11k</code> SET/GET per second.</p>

<p>The almost same thing, done with MySQL</p>

<p>``` php
&lt;?php</p>

<p>mysql_connect(&lsquo;127.0.0.1&rsquo;, &lsquo;root&rsquo;);
mysql_select_db(&lsquo;redis_benchmark&rsquo;);
$query = mysql_query(&lsquo;SELECT * FROM users WHERE id = 1&rsquo;);</p>

<p>for ($i = 0; $i &lt; 100; $i++) {
  $start = microtime(true);
  for ($j = 0; $j &lt; 10000; $j++) {</p>

<pre><code>$key = sprintf("key:%05d", $j);

$persone = mysql_fetch_row($query);
</code></pre>

<p>  }
  $time = microtime(true)&ndash;$start;
  printf(&ldquo;%6d req/sec\n&rdquo;, $j/$time);
}
```</p>

<p>was identical: <code>11k</code> GETs per second.</p>

<p>As Salvatore, the lead developer of Redis, <a href="http://groups.google.com/group/redis-db/msg/2669d6c13361db72">stated months ago</a>, the biggest percentage of benchmarks suck and the problem with PHP is PHP itself.</p>

<p>However <a href="http://groups.google.com/group/redis-db/browse_thread/thread/8061cf422260517b/007d8fabaf43705a?lnk=gst&amp;q=php+slow#007d8fabaf43705a">Kijin</a> highlighted that the main part of the benchmarks made with PHP are single threaded and not-pipelined.</p>

<h2>What if we only use the pipeline?</h2>

<p>Editing the second gist:</p>

<p>``` php
&lt;?php</p>

<p>  $start = microtime(true);
  for ($j = 0; $j &lt; 10000; $j++) {</p>

<pre><code>$key = sprintf("key:%05d", $j);
$redis-&gt;pipeline();
/* GET or SET */
if (rand() % 2 == 0) {
  $redis-&gt;set($key, rand());
} else {
  $redis-&gt;get($key);
}
</code></pre>

<p>```</p>

<p>we see that the transaction rate goes up to > <code>40k</code> SET/GET per second!</p>

<p>Adding the pipeline to the first gist ( which only does SETs ) make it reach the <code>90k</code> SETs per second.</p>

<p>Don&rsquo;t believe?</p>

<p>See it before</p>

<p><img class="center" src="/images/redis-before.png"></p>

<p>and after</p>

<p><img class="center" src="/images/redis-after.png"></p>

<p>So, guys, yes, <strong>Redis is fast also with PHP</strong>.</p>
]]></content>
  </entry>
  
</feed>