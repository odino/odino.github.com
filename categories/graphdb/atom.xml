<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Category: Graphdb | Alessandro Nadalin]]></title>
  <link href="https://odino.org/categories/graphdb/atom.xml" rel="self"/>
  <link href="https://odino.org/"/>
  <updated>2022-11-18T09:33:53+00:00</updated>
  <id>https://odino.org/</id>
  <author>
    <name><![CDATA[Alessandro Nadalin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GraphDB in PHP: Time for the Serious Stuff]]></title>
    <link href="https://odino.org/graphdb-in-php-time-for-the-serious-stuff/"/>
    <updated>2011-10-25T12:09:00+00:00</updated>
    <id>https://odino.org/graphdb-in-php-time-for-the-serious-stuff</id>
    <content type="html"><![CDATA[<p>This weekend I&rsquo;ve been, for the first time in my life, in Poland, to speak at their national PHP conference.</p>

<p>We &ndash; as I was co-speaking with <a href="http://davidfunaro.com/">David</a> &ndash; introduced to the audience the fantastic ecosystem of graph databases, which are storage system using graphs as their primary data structures.</p>

<p>They rule for many reasons that I won&rsquo;t explain here, so I embed the presentation:</p>

<p><div class="slideshare" id="__ss_9831071"><iframe src="https://www.slideshare.net/slideshow/embed_code/9831071 " width="100%" height="550" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe></div></p>

<p>We had a little demo at the end of the talk, and everything went fine except for the last feature we wanted to show; we eventually noticed that it didn&rsquo;t work because of a missing fixture in the DB, what a disappointment!</p>

<p>PHPCon Poland was really funny, although we weren&rsquo;t able to follow the 99% of the talks, as they were in Polish.</p>

<p>Saturday night was really intense because of the chats we had with the guys there about our talk and, later, the drinks.</p>

<h2>And now?</h2>

<p>On our way back to home we started working on the only huge miss of <a href="https://github.com/congow/Orient/">Orient</a> ( our ODM for OrientDB ): <strong>persisting PHP objects to the DB</strong> ( the opposite process is almost finished, it was subject of the <a href="https://github.com/congow/Orient/issues?sort=created&amp;direction=desc&amp;state=closed&amp;page=1&amp;milestone=3">beta-5</a> milestone that we have almost finished ).</p>

<p>Rock the graph out :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Graph Databases: OrientDB to the Rescue]]></title>
    <link href="https://odino.org/graph-databases-orientdb-to-the-rescue/"/>
    <updated>2011-04-16T14:02:00+00:00</updated>
    <id>https://odino.org/graph-databases-orientdb-to-the-rescue</id>
    <content type="html"><![CDATA[<p><a href="http://www.orientechnologies.com/">OrientDB</a> is a graph database written in Java, mainly developed by <a href="http://zion-city.blogspot.com/">Luca Garulli</a>, <a href="http://www.assetdata.it/it/index.php">AssetData</a>&rsquo;s CTO.</p>

<!-- more -->


<p><img class="right" src="/images/orientdb.png"></p>

<h2>Why a graph database</h2>

<p>Sometimes the relation model isn&rsquo;t the way you want both to collect and navigate your data: Luca Bonmasser, at the NoSQL day, highlighted it in his talk about <a href="http://www.slideshare.net/bonmassar/patterns-antipatterns-with-nosql/29">anti-patterns in the relational ecosystem</a>.</p>

<p>So, sometimes, in order to:</p>

<ul>
<li>improve performances</li>
<li>mantain a clean data structure</li>
<li>do DDD right<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup></li>
</ul>


<p>you should go for a NoSQL solution: that said, when you also need to store and retrieve a particular data structure, you should work with a graph database.</p>

<h2>Oh My Graph</h2>

<p><img class="left" src="/images/directed.graph.svg"></p>

<p>A graph is a really simple entity ( ok, not that simple: I try to outrageously simplify things here ) with <strong>vertices</strong> and <strong>edges</strong>.</p>

<p>Edges connect various vertices, and can be <strong>directed</strong> or <strong>undirected</strong>: directed connections happen when the edge has an orientation ( like in the case of a person <em>having</em> a car ), undirected when it hasn&rsquo;t ( like a person being friend of a person, which is a bi-directional connection ).</p>

<p>You use and work with graphs more frequently than what you can actually think: when dealing with trees ( like the ones you tend to solve with <a href="http://www.doctrine-project.org/documentation/manual/1_2/nl/hierarchical-data">Doctrine&rsquo;s nested sets</a> ) you are basically working with <strong>a directed graph with no cycles</strong>.</p>

<p>In the database domain, the graph has an additional element, the <strong>property</strong>: N properties can be assigned to a vertex ( thus <strong>any graph storage engine can work as a document-oriented DB</strong> ).</p>

<h2>Why OrientDB</h2>

<p>OrientDB is a NoSQL graph database with an aim: be easy by making you more productive.</p>

<p>So it&rsquo;s really easy to install and setup: you just need to download the <a href="http://code.google.com/p/orient/downloads/list">latest release from googlecode</a> ( hope they will move it to GitHub soon ), unzip it and start the server:</p>

<p><code>bash
cd path/to/orient
cd bin
chmod +x server.sh
./server.sh
</code></p>

<p><img class="center" src="/images/orient-bash.png"></p>

<p>Orient is also SQL-friendly, letting you query the database with SQL-like syntax: since everybody knows SQL, you should be able to take confidence with its query language in a few minutes.</p>

<p>It is <a href="http://en.wikipedia.org/wiki/ACID">ACID</a> and can be schema-*; which means that:</p>

<ul>
<li>it can be schema-ful, just like a RDBMS</li>
<li>it can be schema-less, leveraging the power of no-prior knowledge of data&rsquo;s structure</li>
<li>it can be schema-mixed, &hellip;well, you guessed it!</li>
</ul>


<p>Another cool thing is that the distribution comes with a pre-defined set of data: so now you are ready to play with graph stuff&hellip; but how?</p>

<h2>REST in P&hellip;DB</h2>

<p><img class="right" src="/images/orient-studio.png"></p>

<p>I introduce you OrientStudio, the GUI to manage your Orient&rsquo;s instance.</p>

<p>OrientStudio is a simple tool bundled with Orient&rsquo;s package, which listens on port 2480 as you start the server, mainly developed in JavaScript, able to let you:</p>

<ul>
<li>CRUD objects, <a href="http://code.google.com/p/orient/wiki/Concepts#Class">classes</a> and <a href="http://code.google.com/p/orient/wiki/Concepts#Cluster">clusters</a></li>
<li>query the DB</li>
<li>explore and navigate your graph&rsquo;s objects</li>
</ul>


<p>There&rsquo;s something really cool about OrientStudio: it works, natively, via HTTP, which means that Orient has an <a href="http://code.google.com/p/orient/wiki/OrientDB_REST">HTTP interface</a> to let you manage your graph.</p>

<p>The interface is defined &ldquo;RESTful&rdquo;, in the docs: just don&rsquo;t be finicky and consider it as RESTful as CouchDB ( so definitely not RESTful, but HTTP-loving ).</p>

<p>Orient also works with its binary protocol, which is a looooooot faster than the HTTP one.</p>

<h2>OrientDB and PHP</h2>

<p>So, what does this have in common with our so-loved scripting language?</p>

<p>We&rsquo;ll find it out in my next article, where I&rsquo;ll tell you how to query OrientDb from PHP.</p>

<p><div class="footnotes">
<span>
Notes
</span>
	<ol>
		<li id='fn:1'>This is not an academic motivation: DDD is the base of a good OO design <a href='#fnref:1' rev='footnote'>â†©</a></li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
</feed>