<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Category: Symfony2 | Alessandro Nadalin]]></title>
  <link href="https://odino.org/categories/symfony2/atom.xml" rel="self"/>
  <link href="https://odino.org/"/>
  <updated>2022-05-07T15:04:41+00:00</updated>
  <id>https://odino.org/</id>
  <author>
    <name><![CDATA[Alessandro Nadalin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Planning to Write Long-term APIs? @cirpo and Me Shared Our Experience]]></title>
    <link href="https://odino.org/planning-to-write-long-term-apis-at-cirpo-and-me-shared-our-experience/"/>
    <updated>2014-07-05T23:34:00+00:00</updated>
    <id>https://odino.org/planning-to-write-long-term-apis-at-cirpo-and-me-shared-our-experience</id>
    <content type="html"><![CDATA[<p>A few weeks ago <a href="https://twitter.com/cirpo">@cirpo</a> and me
flew back to Italy to partecipate to the 2014 edition of the
<a href="http://2014.phpday.it/">PHPDay</a> in Verona, sharing our
experience building APIs.</p>

<!-- more -->


<p>It was really a great time, especially since I missed the
event in the past couple of years, so it was a blast to see
those good'old tech-friends again.</p>

<p>Our presentation, titled &ldquo;<a href="http://www.slideshare.net/odino/dont-screw-it-up-how-to-build-durable-web-apis-phpday-2014-in-verona-ita">Don&rsquo;t screw it up: how to build durable
web APIs</a>&rdquo;, went <a href="https://joind.in/talk/view/11310">pretty well</a>: have a look below and let me know
if you have any feedback!</p>

<p><div class="slideshare" id="__ss_34940481"><iframe src="https://www.slideshare.net/slideshow/embed_code/34940481 " width="100%" height="550" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Service Oriented Architectures With Symfony2]]></title>
    <link href="https://odino.org/service-oriented-architectures-with-symfony2/"/>
    <updated>2014-02-28T14:31:00+00:00</updated>
    <id>https://odino.org/service-oriented-architectures-with-symfony2</id>
    <content type="html"><![CDATA[<p>Last talk for me in the cold lands of Canada: today it was Symfony2&rsquo;s
turn and how to integrate it with your SOA.</p>

<!-- more -->


<p>As usual, for those who missed it, here are the slides:</p>

<p><div class="slideshare" id="__ss_31775384"><iframe src="https://www.slideshare.net/slideshow/embed_code/31775384 " width="850" height="650" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speaking About AngularJS, SOA and OrientDB in Montreal at the Confoo 2014]]></title>
    <link href="https://odino.org/speaking-about-angularjs-soa-and-orientdb-in-montreal-at-the-confoo-2014/"/>
    <updated>2013-10-20T11:00:00+00:00</updated>
    <id>https://odino.org/speaking-about-angularjs-soa-and-orientdb-in-montreal-at-the-confoo-2014</id>
    <content type="html"><![CDATA[<p>I am very happy to announce that next February I will
be attending the <a href="http://confoo.ca/">Confoo 2014</a> and <a href="http://confoo.ca/en/speaker/alessandro-nadalin">speaking as well</a>,
with a good lineup of talks:</p>

<ul>
<li><a href="http://confoo.ca/en/2014/session/orientdb-the-fastest-document-based-graphdb">OrientDB, the fastest NoSQL graph database</a></li>
<li>building a <a href="http://confoo.ca/en/2014/session/soa-with-symfony2">SOA with Symfony2</a></li>
<li><a href="http://confoo.ca/en/2014/session/angularjs-is-the-future-maybe">is AngularJS the future?</a></li>
</ul>


<!-- more -->


<p>For the first time ever, I have to admit it, I will be
presenting <strong>3 topics that have very different backgrounds</strong>,
and, as the days go by, I realize that working at <a href="http://en-ae.namshi.com">Namshi</a>
has been terrific under this point of view: we have the ability of
experimenting with different technologies and use the best out on the
market, something that gets translated into the ability of having a
360Â° overview of the market.</p>

<p><img class="right" src="/images/montreal.jpg"></p>

<p>For me it will be the first time in the cold lands of Canada, and
I can&rsquo;t wait to make the most out of this trip: I always had a <strong>very</strong>
good opinion about canadians in general, hope this trip will
confirm my random thoughts.</p>

<p>If you have the chance to join, don&rsquo;t miss this amazing event:
<a href="http://confoo.ca/en/2014/sessions">the schedule</a> speaks for itself
and I am thrilled to be part of such an amazing speakers' lineup
&mdash; which I obviously ruin :&ndash;) !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notificator, Sending Notifications Through PHP in a Clean and Lightweight Way]]></title>
    <link href="https://odino.org/notificator-sending-notifications-through-php-in-clean-and-lightweight-way/"/>
    <updated>2013-07-11T01:20:00+00:00</updated>
    <id>https://odino.org/notificator-sending-notifications-through-php-in-clean-and-lightweight-way</id>
    <content type="html"><![CDATA[<p>While implementing various pieces of our
<a href="/why-we-choose-symfony2-over-any-other-php-framework/">Service-Oriented Architecture</a>
we, at <a href="http://en-ae.namshi.com">Namshi</a>,
realized that a central notification
service would have been very good in order
to abstract the way we notify our customers
and everyone in the company (ie. skype messages
when a task is due a certain date).</p>

<p>We initially implemented all of this
<a href="/configuring-a-symfony2-application-to-support-soa/">inside a Symfony2 bundle</a>,
but soon realized that we could
abstract and generalize our implementation
in order to extract it into a library for the public
domain, and that&rsquo;s how
<a href="https://github.com/namshi/notificator">notificator</a>
was born.</p>

<!-- more -->


<h2>Aim of the library: a monolog-like implementation for notifications</h2>

<p>The aim of this library is to provide a very
clean abstraction for a task, handling notifications,
that can be spread across multiple channels (for example
emails, skype messages, desktop notifications, &hellip;):
by following this target, we soon realized that by merging
together 2 simple things, <a href="https://github.com/Seldaek/monolog">Monolog</a>
and the concept of <a href="http://en.wikipedia.org/wiki/Observer_pattern">event dispatching</a>,
we could have easily reached our goal.</p>

<p>Honestly, it&rsquo;s true that you can achieve the same goal with
Monolog, but the problem, there, is that it&rsquo;s a library
specifically built for logging, thus, when your domain
deals with simple notifications, your code would really
be inexpressive.</p>

<p>Even though <strong>Notificator is way simpler</strong>, we took a lot
of inspiration from Monolog: for example, the concept of
handlers is a total steal ;&ndash;)</p>

<h2>Installation</h2>

<p>The library is available via composer,
as you can see from its
<a href="https://packagist.org/packages/namshi/notificator">packagist page</a>.</p>

<p>Using semantic versioning, I recommend you
to pick a minor release (<code>1.0</code>, for example)
and stick to it in your <code>composer.json</code>:
what we try to do is that, if there is a BC break
in the API, we increase the minor version (<code>1.0.X</code> to <code>1.1.X</code>, for example).</p>

<p>At the end, you <strong>should</strong> require it like this:</p>

<p><code>
"namshi/notificator": "1.0.*"
</code></p>

<h2>Hello world! example</h2>

<p>Just to give a very rough and simple example on how this
library works, let&rsquo;s see how you can trigger a notification
via <strong>both</strong> email (with PHP&rsquo;s <code>mail</code> function<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>)
and the <code>notify-send</code> utility available on ubuntu (I&rsquo;ve already spoke
about it in <a href="/desktop-notifications-for-phpunit-tests-on-ubuntu/">a previous post</a>).</p>

<p>First of all, we would need to create a <em>plain-old-php-class</em>
representing the notification, which implements 2 interfaces:</p>

<p>``` php
&lt;?php</p>

<p>use Namshi\Notificator\Notification;
use Namshi\Notificator\NotificationInterface;</p>

<p>interface NotifySendNotificationInterface extends NotificationInterface
{</p>

<pre><code>public function getMessage();
</code></pre>

<p>}</p>

<p>interface EmailNotificationInterface extends NotificationInterface
{</p>

<pre><code>public function getAddress();
public function getSubject();
public function getBody();
</code></pre>

<p>}</p>

<p>class DoubleNotification extends Notification implements NotifySendNotificationInterface, EmailNotificationInterface
{</p>

<pre><code>protected $address;
protected $body;
protected $subject;

public function __construct($address, $subject, $body, array $parameters = array())
{
    parent::__construct($parameters);

    $this-&gt;address  = $address;
    $this-&gt;body     = $body;
    $this-&gt;subject  = $subject;
}

public function getAddress()
{
    return $this-&gt;address;
}

public function getSubject()
{
    return $this-&gt;subject;
}

public function getBody()
{
    return $this-&gt;body;
}

public function getMessage()
{
    return $this-&gt;getBody();
}
</code></pre>

<p>}
```</p>

<p>At this point we need 2 notification handlers, which
will separately handle the notification:</p>

<p>``` php
&lt;?php</p>

<p>use Namshi\Notificator\Notification\Handler\HandlerInterface;
use Namshi\Notificator\NotificationInterface;</p>

<p>class NotifySendNotificationHandler implements HandlerInterface
{</p>

<pre><code>public function shouldHandle(NotificationInterface $notification)
{
    return $notification instanceOf NotifySendNotificationInterface;
}

public function handle(NotificationInterface $notification)
{
    shell_exec(sprintf('notify-send "%s"', $notification-&gt;getMessage()));
}
</code></pre>

<p>}</p>

<p>class EmailNotificationHandler implements HandlerInterface
{</p>

<pre><code>public function shouldHandle(NotificationInterface $notification)
{
    return $notification instanceOf EmailNotificationInterface;
}

public function handle(NotificationInterface $notification)
{
    mail($notification-&gt;getAddress(), $notification-&gt;getSubject(), $notification-&gt;getBody());
}
</code></pre>

<p>}
```</p>

<p>We&rsquo;re basically there: with a bunch of code we can now trigger
a notification both via email and <code>notify-send</code>:</p>

<p>``` php
&lt;?php</p>

<p>// create the manager and assign handlers to it
use Namshi\Notificator\Manager;</p>

<p>$manager = new Manager();
$manager->addHandler(new NotifySendNotificationHandler());
$manager->addHandler(new EmailNotificationHandler());</p>

<p>$notification = new DoubleNotification(&lsquo;<a href="&#109;&#x61;&#105;&#108;&#x74;&#111;&#x3a;&#x61;&#x6c;&#101;&#x73;&#x73;&#x61;&#110;&#x64;&#114;&#111;&#46;&#110;&#97;&#100;&#x61;&#x6c;&#105;&#x6e;&#x40;&#x67;&#109;&#x61;&#x69;&#x6c;&#46;&#99;&#111;&#109;">&#x61;&#108;&#x65;&#115;&#x73;&#97;&#x6e;&#100;&#x72;&#x6f;&#x2e;&#x6e;&#97;&#x64;&#97;&#108;&#x69;&#x6e;&#x40;&#103;&#x6d;&#97;&#x69;&#x6c;&#46;&#99;&#x6f;&#109;</a>&rsquo;, &lsquo;Test email&rsquo;, &lsquo;Hello!&rsquo;);</p>

<p>//  trigger the notification
$manager->trigger($notification);
```</p>

<p><img class="right" src="/images/notification-email.png"></p>

<p>At this point, if you run this example<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>, you should
see a notification popping up on your desktop and, in a few seconds,
you will also receive an email to the address you&rsquo;ve given, with the subject
&ldquo;Test email&rdquo; and &ldquo;Hello!&rdquo; in the body.</p>

<p>By the way, if you want to see some examples on
how the library works, <a href="https://github.com/namshi/notificator/tree/master/examples">check them out on github</a>.</p>

<h2>Sending notifications via RabbitMQ</h2>

<p>It is no news that we heavily rely on
<a href="http://odino.org/refactoring-your-architecture-go-for-soa/">RabbitMQ in our SOA</a>,
so it&rsquo;s pretty obvious that, to implement the notification service,
we send messages containing the notifications, that will
be intercepted by our notification service, which relies on
Notificator.</p>

<p>To do so, we take advantage of the great job done by
<a href="https://twitter.com/old_sound">Alvaro Videla</a>
on RabbitMQ for PHP and Symfony2, through the
<a href="https://github.com/videlalvaro/php-amqplib">PHP AMQP library</a>
and the <a href="https://github.com/videlalvaro/RabbitMqBundle">RabbitMQ bundle</a>.</p>

<p>If you are familiar with them, you know that in order to consume messages,
you have to declare your consumer as a callback of the actual, generic
rabbitmq consumer, through the <code>config.yml</code> file:</p>

<p>``` yaml app/config/config.yml
old_sound_rabbit_mq:</p>

<pre><code>consumers:
    notification:
        connection: default
        exchange_options: {name: 'notifications', type: direct}
        queue_options:    {name: 'notifications'}
        callback:         namshi.notification.consumer
</code></pre>

<p>services:</p>

<pre><code>namshi.notification.consumer:
    class: Namshi\Notificator\Messaging\RabbitMQ\Symfony2\Consumer
    arguments: [@namshi.notification.manager]
namshi.notification.manager:
    class: Namshi\Notificator\Manager
    calls:
      - [addhandler, [@namshi.notification.handler.notify_send] ]
namshi.notification.handler.notify_send:
    class: Namshi\Notificator\Notification\Handler\NotifySend
</code></pre>

<p>```</p>

<p>We already provide a <a href="https://github.com/namshi/notificator/blob/master/src/Namshi/Notificator/Messaging/RabbitMQ/Symfony2/Consumer.php">very basic consumer callback</a>
to be used with the RabbitMQ bundle.</p>

<p>The main idea behind this is that the publisher serializes the notification
and sends it through RabbitMQ, while the consumer unserializes and
triggers it through the <code>Manager</code>. The publisher code would be very, very simple:</p>

<p>``` php
&lt;?php</p>

<p>$publisher = $container->get(&lsquo;old_sound_rabbit_mq.notifications_producer&rsquo;);</p>

<p>$notification = new MySampleNotification(&ldquo;man, this comes from RabbitMQ and Symfony2!&rdquo;);</p>

<p>$publisher->publish(serialize($notification));
```</p>

<p>and to start consuming messages you would only need to
start the consumer:</p>

<p><code>
php app/console rabbitmq:consumer -w notification
</code></p>

<h2>FOSS</h2>

<p>I&rsquo;ve tried to write a pretty extensive
<a href="https://github.com/namshi/notificator/">README</a> that you can use as a reference, on Github
(check the <a href="https://github.com/namshi/notificator/tree/master/tests">tests</a>, as well, to get an idea of the internals):
if you spot any typo or mistake, don&rsquo;t hesitate to
reach out and point it out.</p>

<p>This library is part of the efforts,
from <a href="https://github.com/namshi">Namshi</a>,
to be able to give back to the
OSS community as much as possible: you
are therefore strongly encouraged to open a PR
or express your opinion if you find that something
should be fixed or could be improved (there&rsquo;s a lot
of room for improvement, starting by implementing
many more <a href="https://github.com/namshi/notificator/tree/master/src/Namshi/Notificator/Notification/Handler">handlers</a>).</p>

<p><div class="footnotes">
<span>
Notes
</span>
	<ol>
		<li id='fn:1'>Only used for its simplicity here, please do not use it in production, use stuff like SwiftMailer instead! <a href='#fnref:1' rev='footnote'>â©</a></li><li id='fn:2'>I mostly took the example code from the README of the library on github, so forgive me if there are synthax errors or some typo. You can anyhow have a look at the examples (in the examples/ folder) to check some working code <a href='#fnref:2' rev='footnote'>â©</a></li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuring a Symfony2 Application to Support SOA]]></title>
    <link href="https://odino.org/configuring-a-symfony2-application-to-support-soa/"/>
    <updated>2013-06-06T13:00:00+00:00</updated>
    <id>https://odino.org/configuring-a-symfony2-application-to-support-soa</id>
    <content type="html"><![CDATA[<p>When you think in terms of
<a href="/refactoring-your-architecture-go-for-soa/">Service Oriented Architecture</a>
one of the tricky things is to decide
how to organize your development workflow
in order to develop <strong>architecture</strong>,
not a single application: for example, how would
you configure deployments (when you need
to deploy <strong>part</strong> of your architecture, not
just a web application) or push cross-service
features to your SCM?</p>

<!-- more -->


<p>This article gives an overview of the constraints
and preferences that we wanted to implement
in our SOA, which is mainly done with Symfony2,
but most of it can be read in a
framework/language-agnostic key.</p>

<h2>Problems</h2>

<p>We can at least identify 3 problems which pop
up after you decide to layer your architecture
and avoid <a href="http://www.slideshare.net/odino/the-rocket-internet-experience-phptostart-2013-in-turin/103">a monolithic approach</a>:</p>

<ul>
<li><p>given that every of your service will require
some time (1~5 minutes) to be deployed, how do you
ensure that you can release a new version of a service
without the need of updating <strong>all</strong> the other
services?
If you have, for example, 9 machines and 3 services
(A, B and C, 3 machines for each service),
you cant really afford to <strong>deploy everywhere</strong>
when you need to update just the service A, because
you might need to shutdown service B and C during the
deployment, while they dont really need to be updated.
The solution here would be to update just a bunch of
your servers</p></li>
<li><p>how do you create <em>Pull Requests</em> and organize your
repositories? This is not a trivial question: if you
need a feature that involves changes in services A and B,
and you have 2 repositories you will need to add some
overhead on top of every single operation that you
would usually do with a new feature</p></li>
<li><p>is your software able to automatically support SOA?
By this I mean, when you want to add a new service,
how easy is to configure your architecture to be able
to support the new layer? Of course, you would need
something that lets you do this in a matter of a minute</p></li>
</ul>


<h2>Deployments</h2>

<p>As I stated earlier, the solution is to be able
to specify, upon deployments, which services need
to be updated, and your best friend, here, could
be something like <a href="https://github.com/capistrano/capistrano">Capistrano</a>.</p>

<p>If you ever worked with capistrano, you know
that deployments basically depend on the <code>deploy.rb</code> file,
in which you can configure different <strong>stages</strong> of your
architecture:</p>

<p><code>ruby
set :stages, %w(live staging)
set :default_stage, "staging"
require 'capistrano/ext/multistage'
</code></p>

<p>In the example, weare declaring that our application
can be deployed on 2 stages, <code>live</code> and <code>staging</code>; by doing a
<code>cap live deploy</code> or <code>cap deploy</code> you are ready to either deploy to your live
servers or staging ones, after configuring the staging
files (<code>live.rb</code> and <code>staging.rb</code>):</p>

<p>``` ruby An example live.rb
role :web,        &ldquo;company.com&rdquo;
role :app,        &ldquo;company.com&rdquo;, :primary => true
role :db,         &ldquo;company.com&rdquo;, :primary => true</p>

<p>set :app_environment, &ldquo;live&rdquo;
set :deploy_to,   &ldquo;/var/www/htdocs/#{application}.#{app_environment}&rdquo;
```</p>

<p>This still doesn&rsquo;t solve the problem of
<strong>just deploying a single service</strong>, but to
overcome it, thanks to the capistrano <code>multistage</code>
extension, it&rsquo;s a matter of configuring a few deployment
files.</p>

<p>For example, here&rsquo;s how you would write your deployment
files once you have a couple services (<code>A</code> and <code>B</code>):</p>

<p><code>ruby deploy.rb
set :stages, %w(a-live a-staging b-live b-staging, live, staging)
set :default_stage, "staging"
require 'capistrano/ext/multistage'
</code></p>

<p>``` ruby a-live.rb
role :web,        &ldquo;a.company.com&rdquo;
role :app,        &ldquo;a.company.com&rdquo;, :primary => true
role :db,         &ldquo;a.company.com&rdquo;, :primary => true</p>

<p>set :app_environment, &ldquo;live&rdquo;
set :deploy_to,   &ldquo;/var/www/htdocs/#{application}.#{app_environment}&rdquo;
```</p>

<p>As you see, we are creating a few different stages:</p>

<ul>
<li><code>serviceName-environment</code> (ie. a-live), which includes servers for a
specific environment of a service</li>
<li><code>environment</code> (ie. live), which includes the entire architecture,
useful in those cases when you really want to deploy
the entire architecture<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup></li>
</ul>


<p>For Symfony2, to ease your job, you can use
<a href="http://capifony.org/">capifony</a> which takes
care of configure the remaining,
specific, crucial parts of the deployment for the
framework (such as clearing and warming up the cache,
installing the dependencies via composer and so on).</p>

<h2>Software lifecycle</h2>

<p><img class="left" src="/images/cylinders.png"></p>

<p>Ah, good old SCM problems!</p>

<p>Let&rsquo;s say your are working on a traditional, monolithic application:
you branch to implement a new feature, commit, push, open
a pull request, the PR gets merged, deployed on staging, tested and
then goes to live; very simple as well as efficient:
<strong>zero overhead</strong>.</p>

<p>You might think that in SOAs this is not different: you <code>cd</code> into a
specific&rsquo;s service repository, branch to
implement a new feature, commit, push, open
a pull request, the PR gets merged in that repository, the service gets deployed
on its staging servers, tested and then goes to live;
very simple as well as efficient?</p>

<p>No, at all.</p>

<p>Thing is, often you will need to develop <strong>cross-service
features</strong>, which require code to be updated in N different
repositories: as a result, you will need to open N pull requests;
Surround your pullquote like this {" text to be quoted "}</p>

<p>That&rsquo;s why I would advice to keep all of your services under
one repositories, to avoid overheads:</p>

<ul>
<li>N projects in your IDE</li>
<li>N SCM operations (<code>git checkout -b myBranch</code> as well as <code>git push origin myBranch</code>)</li>
<li>N pull requests</li>
<li>N code reviews</li>
</ul>


<p>Due to this, honestly, I don&rsquo;t really see the need of separating services
into different repositories: when you deploy, you deploy a tag of the architecture
itself (only on the servers which host the services to be updated with that tag),
when you rollback, you rollback the entire architecture to a specific
version.</p>

<p><img class="left" src="/images/baby-birds.jpg"></p>

<p>This seems to go against what I preached earlier, while talking
about deployments, but the truth is that you want to be on the safe side
once something goes wrong: you can optimize deployments so that you can
just deploy some services, but in case of rollback, you need to take an
immediate, &ldquo;total&rdquo; action to <strong>restore all of your services</strong>.</p>

<p>Consider the situation from a very similar perspective coming
from a very, very different context: cultivate an healthy colony of newborns
in nature &ndash; as opposed to maintaining an healthy architecture on the internets.</p>

<p>Exactly like the mom of newborn birds, when it comes to feed (update)
them, you would give the weaker ones, in order to help them develop as healthy
as their stronger brothers, the biggest meals; but when it comes
to rescue (rollback) them from a predator, you would crave for having an
option to move them all in one go, without the risk of moving them one by
one, leaving the unluckiest ones defenseless against their own fate.</p>

<h2>Configuring new services in Symfony2</h2>

<p><img class="right" src="/images/cubic-architecture.jpg"></p>

<p>This post has to come to an end dealing with Symfony2,
since, in our experience,
<a href="/why-we-choose-symfony2-over-any-other-php-framework/">we have decided to go SOA with this framework</a>:
all in all, we found that due to the integration with capistrano
and the concept of bundles, together with the ability to have
per-bundle specific hostnames, this framework is pretty friendly
towards the ideas and constraints that we want to implement in
our SOA: what we&rsquo;ve seen is no rocket science, and even
the approach that we are using with Symfony2 is nothing
extraordinary, but it helps maintaining a very clean and
efficient workflow while developing a SOA.</p>

<p>As I said, for deploying you might want to use capifony,
and when it comes to isolate services in just one repository
we realized that a good solution would be to have <strong>one
Symfony2 application</strong> and create <strong>a bundle for each service</strong>
that we need.</p>

<p>Thanks for the capabilities of Symfony2&rsquo;s routing
mechanism, you can also bind a subdomain to a specific
bundle; once you create the bundle, you can tell symfony
that the routes of that specific bundle can be matched only
if the subdomain of the application matches a particular
string:</p>

<p>``` bash app/config/routing.yml
mycompany_service_a:</p>

<pre><code>resource: "@AcmeServiceABundle/Resources/config/routing.yml"
prefix:   /
host:     service-a.mycompany.com
</code></pre>

<p>```</p>

<p>``` bash src/Acme/ServiceABundle/Resources/config/routing.yml
mycompany_service_a_index:</p>

<pre><code>pattern:  /index/{whateverParameter}
defaults: { _controller: AcmeServiceABundle:Default:index }
</code></pre>

<p>```</p>

<p>In this case, the route <code>mycompany_service_a_index</code> will only
be matched when the URL is using the hostname
<code>service-a.mycompany.com</code>: for example, <code>http://mycompany.com/index/param</code>
won&rsquo;t match it; this is pretty interesting since it gives you the
flexibility to develop features in just once repository, on
<strong>as many services as you want</strong>.</p>

<p>We are still heavily experimenting, but out of a few approaches &ndash;
for example <a href="http://symfony.com/doc/2.0/book/routing.html#prefixing-imported-routes">route prefixing</a> &ndash;
we decided to go on with the ones I explained here for cleanness,
clarity, efficiency and security of your development cycles
and architecture: if your experience suggests something different
or you want to share doubts, feel free to abuse of the comments
section, since I am very open and interested to discuss this topic.</p>

<p><div class="footnotes">
<span>
Notes
</span>
	<ol>
		<li id='fn:1'>Cases such as disaster recovery or deployments to a brand new servers' set (for example, if you want to switch from AWS to another provider) <a href='#fnref:1' rev='footnote'>â©</a></li><li id='fn:2'>Rollbacking, per se, shouldn't be a pain in the ass, but you need to focus on it in order to reduce mistakes in an already-critical situation <a href='#fnref:2' rev='footnote'>â©</a></li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
</feed>